{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Google Cloud Pilot","text":"<p>Google Cloud Pilot (gcp-pilot) is a Python library that simplifies interaction with Google Cloud Platform services. It provides a high-level, user-friendly interface to various GCP APIs, handling authentication, error management, and parameter fallback automatically.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install gcp-pilot\n</code></pre> <p>Some APIs need extra packages, thus you must use <code>extras</code> to add them:</p> <ul> <li>Cloud Tasks: <code>pip install gcp-pilot[tasks]</code></li> <li>Cloud Build: <code>pip install gcp-pilot[build]</code></li> <li>Cloud Storage: <code>pip install gcp-pilot[storage]</code></li> <li>Big Query: <code>pip install gcp-pilot[bigquery]</code></li> <li>Speech: <code>pip install gcp-pilot[speech]</code></li> <li>Sheets: <code>pip install gcp-pilot[sheets]</code></li> <li>Pub/Sub: <code>pip install gcp-pilot[pubsub]</code></li> <li>Datastore: <code>pip install gcp-pilot[datastore]</code></li> <li>Cloud DNS: <code>pip install gcp-pilot[dns]</code></li> <li>Secret Manager: <code>pip install gcp-pilot[secret]</code></li> <li>Healthcare Engine: <code>pip install gcp-pilot[healthcare]</code></li> <li>IAM: <code>pip install gcp-pilot[iam]</code></li> </ul>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from gcp_pilot.resource import ResourceManager\n\ngrm = ResourceManager()\n</code></pre>"},{"location":"#why-use-gcp-pilot","title":"Why Use gcp-pilot","text":"<p>\"Since Google already has a generic API client and so many specific clients, why should I use this library?\"</p> <p>Google has 2 types of clients: - dedicated: custom-made for the APIs. They are excellent: they implement high level interaction with the API with friendly methods. The <code>gcp-pilot</code> adds value by handling authentication, friendly errors and parameter fallback. - generic: a single client that is capable of dynamically calling any REST API. They are a pain to use: very specific calls that must be translated from the documentation. The <code>gcp-pilot</code> comes in handy to add high-level interaction with friendly methods such as <code>Calendar.create_event</code>, on top of all other advantages cited above.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Parameter Fallback: Automatically detects project_id and location based on your credentials</li> <li>Friendly Errors: Converts generic HttpExceptions into more specific exceptions like NotFound, AlreadyExists, etc.</li> <li>Auto-Authorization: Sets up required permissions for services that need specific authorizations</li> <li>Integration: Seamlessly integrates different GCP services</li> <li>Authentication Handling: Uses Application Default Credentials with support for impersonation and delegation</li> </ul>"},{"location":"#supported-services","title":"Supported Services","text":"<p>gcp-pilot supports a wide range of Google Cloud Platform services. Each service has its own dedicated documentation page with detailed usage examples:</p> <ul> <li>IAM</li> <li>Identity Platform</li> <li>Resource Manager</li> <li>Secret Manager</li> <li>Cloud Storage</li> <li>Cloud Build</li> <li>Cloud Functions</li> <li>Cloud Scheduler</li> <li>Cloud Tasks</li> <li>Cloud Run</li> <li>BigQuery</li> <li>Pub/Sub</li> <li>Datastore</li> <li>Cloud DNS</li> <li>Healthcare</li> <li>And more...</li> </ul>"},{"location":"authentication/","title":"Authentication and Credentials","text":"<p>Authentication is a critical aspect of interacting with Google Cloud Platform services. gcp-pilot simplifies this process by providing several authentication mechanisms and features.</p>"},{"location":"authentication/#application-default-credentials-adc","title":"Application Default Credentials (ADC)","text":"<p>By default, gcp-pilot uses Application Default Credentials (ADC) to detect credentials. This means that you must have one of the following setups:</p> <ul> <li>Environment variable <code>GOOGLE_APPLICATION_CREDENTIALS</code> pointing to the JSON file with the credentials</li> <li>Run inside GCP (Compute Engine, Cloud Run, GKE, AppEngine), so the machine's credentials will be used</li> <li>Run locally after authenticating with <code>gcloud auth application-default login</code></li> </ul> <p>This approach allows your application to run seamlessly in different environments without code changes.</p>"},{"location":"authentication/#service-account-impersonation","title":"Service Account Impersonation","text":"<p>You can globally set a service account using the environment variable <code>DEFAULT_SERVICE_ACCOUNT</code>, which will require impersonation.</p> <p>Impersonation allows a service account to act on behalf of another service account. This is useful when you want to: - Use a single service account for authentication but need different permissions for different operations - Avoid distributing service account keys by using impersonation instead</p> <p>To use impersonation, you need to: 1. Ensure the original service account has the <code>roles/iam.serviceAccountTokenCreator</code> role on the target service account 2. Pass the target service account email to the client using the <code>impersonate_account</code> parameter</p> <pre><code>from gcp_pilot.storage import CloudStorage\n\n# Impersonate a service account\nstorage = CloudStorage(impersonate_account=\"target-sa@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"authentication/#delegation","title":"Delegation","text":"<p>Some services (like Google Workspace) require specific subjects to be delegated. gcp-pilot automatically handles delegation, sometimes even performing additional credential signatures.</p> <p>To use delegation, you can pass the subject to the client:</p> <pre><code>from gcp_pilot.directory import Directory\n\n# Use delegation for a specific user\ndirectory = Directory(subject=\"user@example.com\")\n</code></pre>"},{"location":"authentication/#default-project","title":"Default Project","text":"<p>When creating a client, a default project is defined by using the project that the credentials belong to.</p> <p>Clients that support managing resources from other projects can be overwritten per call.</p> <p>Example: you create a <code>BigQuery</code> client using credentials from <code>project_a</code>. All calls will query datasets from <code>project_a</code>, unless another project is passed as parameter when performing the call.</p> <p>You can also globally set a project using the environment variable <code>DEFAULT_PROJECT</code>.</p>"},{"location":"authentication/#default-location","title":"Default Location","text":"<p>Similar to the default project, a default location is defined by using the project's location. The project's location will exist if you ever enabled AppEngine, so you had to set a location then. Otherwise, no default location will be set.</p> <p>You can also globally set a location using the environment variable <code>DEFAULT_LOCATION</code> to reduce the number of API calls when creating clients.</p>"},{"location":"authentication/#auto-authorization","title":"Auto-Authorization","text":"<p>Some services require specific authorizations that should be set up prior to their usage, for example: - [Pub/Sub] subscribe to a topic with authenticated push - [Cloud Scheduler] schedule a job to trigger a Cloud Run service - [Cloud Tasks] queue a task to trigger a Cloud Run service</p> <p>In these cases, gcp-pilot tries its best to ensure that the required permissions are properly set up before the actual request is made.</p>"},{"location":"authentication/#oidc-authorization","title":"OIDC Authorization","text":"<p>Identity-Aware Proxy (IAP) and other services that require OIDC tokens are automatically handled by gcp-pilot. The library generates the necessary OIDC tokens for services that require authentication.</p> <pre><code>from gcp_pilot.iap import IdentityAwareProxy\n\n# Generate an OIDC token for a Cloud Run service\niap = IdentityAwareProxy()\ntoken = iap.get_token(url=\"https://my-service.run.app\")\n</code></pre>"},{"location":"services/","title":"Supported Services","text":"<p>gcp-pilot supports a wide range of Google Cloud Platform services. Each service has its own dedicated documentation page with detailed usage examples.</p>"},{"location":"services/#core-services","title":"Core Services","text":"<ul> <li>IAM - Identity and Access Management</li> <li>Identity Platform - User authentication and identity management</li> <li>Resource Manager - Project and resource management</li> <li>Secret Manager - Secret storage and management</li> <li>Identity Aware Proxy - Secure access to applications</li> </ul>"},{"location":"services/#storage-and-databases","title":"Storage and Databases","text":"<ul> <li>Cloud Storage - Object storage</li> <li>Cloud SQL - Managed relational database service</li> <li>Datastore - NoSQL document database</li> <li>BigQuery - Serverless data warehouse</li> </ul>"},{"location":"services/#compute-and-serverless","title":"Compute and Serverless","text":"<ul> <li>Cloud Functions - Serverless functions</li> <li>Cloud Run - Serverless container platform</li> <li>App Engine - Fully managed platform</li> </ul>"},{"location":"services/#messaging-and-integration","title":"Messaging and Integration","text":"<ul> <li>Pub/Sub - Messaging and event streaming</li> <li>Cloud Tasks - Asynchronous task execution</li> <li>Cloud Scheduler - Managed cron job service</li> </ul>"},{"location":"services/#devops-and-cicd","title":"DevOps and CI/CD","text":"<ul> <li>Cloud Build - Continuous integration and delivery platform</li> <li>Source Repositories - Git repository hosting</li> </ul>"},{"location":"services/#networking","title":"Networking","text":"<ul> <li>Cloud DNS - Domain name system service</li> <li>API Gateway - API management platform</li> </ul>"},{"location":"services/#monitoring-and-logging","title":"Monitoring and Logging","text":"<ul> <li>Error Reporting - Error tracking and reporting</li> <li>Logging - Logging service</li> <li>Monitoring - Infrastructure and application monitoring</li> </ul>"},{"location":"services/#specialized-services","title":"Specialized Services","text":"<ul> <li>Healthcare - Healthcare data management</li> <li>Speech - Speech recognition and transcription</li> <li>Datastream - Database migration and replication</li> </ul>"},{"location":"services/#google-workspace-integration","title":"Google Workspace Integration","text":"<ul> <li>Directory - User and group management</li> <li>Calendar - Calendar management</li> <li>Sheets - Spreadsheet management</li> <li>People - Contacts management</li> <li>Chats - Chat messaging</li> </ul>"},{"location":"services/api_gateway/","title":"API Gateway","text":"<p>API Gateway is a fully managed service that enables you to create, secure, and monitor APIs for your Google Cloud backends. The <code>APIGateway</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud API Gateway.</p>"},{"location":"services/api_gateway/#installation","title":"Installation","text":"<p>To use the API Gateway functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/api_gateway/#usage","title":"Usage","text":""},{"location":"services/api_gateway/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.api_gateway import APIGateway\n\n# Initialize with default credentials\napi_gateway = APIGateway()\n\n# Initialize with specific project\napi_gateway = APIGateway(project_id=\"my-project\")\n\n# Initialize with service account impersonation\napi_gateway = APIGateway(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/api_gateway/#managing-apis","title":"Managing APIs","text":""},{"location":"services/api_gateway/#listing-apis","title":"Listing APIs","text":"<pre><code># List all APIs in a project\nfor api in api_gateway.list_apis():\n    print(f\"API: {api['name']}\")\n\n# List APIs in a specific location\nfor api in api_gateway.list_apis(location=\"us-central1\"):\n    print(f\"API: {api['name']}\")\n</code></pre>"},{"location":"services/api_gateway/#getting-an-api","title":"Getting an API","text":"<pre><code># Get information about an API\napi = api_gateway.get_api(api_name=\"my-api\")\n</code></pre>"},{"location":"services/api_gateway/#creating-an-api","title":"Creating an API","text":"<pre><code># Create a simple API\napi = api_gateway.create_api(\n    api_name=\"my-api\",\n    display_name=\"My API\",\n)\n\n# Create an API with labels\napi = api_gateway.create_api(\n    api_name=\"my-api\",\n    display_name=\"My API\",\n    labels={\"environment\": \"production\"},\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    wait=True,  # Optional: wait for the operation to complete\n)\n</code></pre>"},{"location":"services/api_gateway/#deleting-an-api","title":"Deleting an API","text":"<pre><code># Delete an API\napi_gateway.delete_api(\n    api_name=\"my-api\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/api_gateway/#managing-api-configurations","title":"Managing API Configurations","text":""},{"location":"services/api_gateway/#listing-api-configurations","title":"Listing API Configurations","text":"<pre><code># List all configurations for an API\nfor config in api_gateway.list_configs(api_name=\"my-api\"):\n    print(f\"Config: {config['name']}\")\n</code></pre>"},{"location":"services/api_gateway/#getting-an-api-configuration","title":"Getting an API Configuration","text":"<pre><code># Get information about an API configuration\nconfig = api_gateway.get_config(\n    config_name=\"my-config\",\n    api_name=\"my-api\",\n)\n</code></pre>"},{"location":"services/api_gateway/#creating-an-api-configuration","title":"Creating an API Configuration","text":"<pre><code>from pathlib import Path\n\n# Create an API configuration\nconfig = api_gateway.create_config(\n    config_name=\"my-config\",\n    api_name=\"my-api\",\n    service_account=\"service-account@project-id.iam.gserviceaccount.com\",\n    open_api_file=Path(\"/path/to/openapi.yaml\"),\n    display_name=\"My API Configuration\",\n    labels={\"environment\": \"production\"},\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    wait=True,  # Optional: wait for the operation to complete\n)\n</code></pre>"},{"location":"services/api_gateway/#deleting-an-api-configuration","title":"Deleting an API Configuration","text":"<pre><code># Delete an API configuration\napi_gateway.delete_config(\n    config_name=\"my-config\",\n    api_name=\"my-api\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/api_gateway/#managing-gateways","title":"Managing Gateways","text":""},{"location":"services/api_gateway/#listing-gateways","title":"Listing Gateways","text":"<pre><code># List all gateways in a project\nfor gateway in api_gateway.list_gateways():\n    print(f\"Gateway: {gateway['name']}\")\n\n# List gateways in a specific location\nfor gateway in api_gateway.list_gateways(location=\"us-central1\"):\n    print(f\"Gateway: {gateway['name']}\")\n</code></pre>"},{"location":"services/api_gateway/#getting-a-gateway","title":"Getting a Gateway","text":"<pre><code># Get information about a gateway\ngateway = api_gateway.get_gateway(\n    gateway_name=\"my-gateway\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\n</code></pre>"},{"location":"services/api_gateway/#creating-a-gateway","title":"Creating a Gateway","text":"<pre><code># Create a gateway\ngateway = api_gateway.create_gateway(\n    gateway_name=\"my-gateway\",\n    api_name=\"my-api\",\n    config_name=\"my-config\",\n    labels={\"environment\": \"production\"},\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n    wait=True,  # Optional: wait for the operation to complete\n)\n</code></pre>"},{"location":"services/api_gateway/#deleting-a-gateway","title":"Deleting a Gateway","text":"<pre><code># Delete a gateway\napi_gateway.delete_gateway(\n    gateway_name=\"my-gateway\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\n</code></pre>"},{"location":"services/api_gateway/#enabling-and-disabling-api-gateway","title":"Enabling and Disabling API Gateway","text":"<pre><code># Enable API Gateway for an API\napi_gateway.enable_gateway(\n    api_name=\"my-api\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n\n# Disable API Gateway for an API\napi_gateway.disable_gateway(\n    api_name=\"my-api\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/api_gateway/#error-handling","title":"Error Handling","text":"<p>The APIGateway class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    api_gateway.get_api(api_name=\"non-existent-api\")\nexcept exceptions.NotFound:\n    print(\"API not found\")\n</code></pre>"},{"location":"services/api_key/","title":"API Key","text":"<p>API Key is a service that allows you to create and manage API keys for your Google Cloud project. The <code>APIKey</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud API Keys.</p>"},{"location":"services/api_key/#installation","title":"Installation","text":"<p>To use the API Key functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/api_key/#usage","title":"Usage","text":""},{"location":"services/api_key/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.api_key import APIKey\n\n# Initialize with default credentials\napi_key = APIKey()\n\n# Initialize with specific project\napi_key = APIKey(project_id=\"my-project\")\n\n# Initialize with service account impersonation\napi_key = APIKey(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/api_key/#creating-an-api-key","title":"Creating an API Key","text":"<pre><code># Create a simple API key\nkey = api_key.create(\n    key_id=\"my-api-key\",\n    display_name=\"My API Key\",\n)\n\n# Create an API key with API targets\nkey = api_key.create(\n    key_id=\"my-api-key\",\n    display_name=\"My API Key\",\n    api_targets=[\"maps.googleapis.com\", \"places.googleapis.com\"],\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/api_key/#getting-an-api-key","title":"Getting an API Key","text":"<pre><code># Get information about an API key\nkey = api_key.get(\n    key_id=\"my-api-key\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n\n# Access key properties\nprint(f\"Key ID: {key.key_id}\")\nprint(f\"Display Name: {key.display_name}\")\nprint(f\"Created At: {key.created_at}\")\nprint(f\"Updated At: {key.updated_at}\")\nprint(f\"API Targets: {key.api_targets}\")\nprint(f\"Key Value: {key.value}\")\n</code></pre>"},{"location":"services/api_key/#looking-up-an-api-key","title":"Looking Up an API Key","text":"<pre><code># Look up an API key by its value\nkey = api_key.lookup(key=\"AIza...\")\n\n# Check if an API key exists\nexists = api_key.exists(key=\"AIza...\")\nif exists:\n    print(\"API key exists\")\nelse:\n    print(\"API key does not exist\")\n</code></pre>"},{"location":"services/api_key/#listing-api-keys","title":"Listing API Keys","text":"<pre><code># List all API keys in a project\nfor key in api_key.list():\n    print(f\"Key ID: {key.key_id}, Display Name: {key.display_name}\")\n\n# List API keys in a specific project\nfor key in api_key.list(project_id=\"my-project\"):\n    print(f\"Key ID: {key.key_id}, Display Name: {key.display_name}\")\n</code></pre>"},{"location":"services/api_key/#getting-the-api-key-string","title":"Getting the API Key String","text":"<pre><code># Get the actual API key string\nkey_data = api_key.get_key_string(\n    key_id=\"my-api-key\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"API Key: {key_data['keyString']}\")\n</code></pre>"},{"location":"services/api_key/#deleting-and-undeleting-api-keys","title":"Deleting and Undeleting API Keys","text":"<pre><code># Delete an API key\napi_key.delete(\n    key_id=\"my-api-key\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n\n# Undelete a previously deleted API key\napi_key.undelete(\n    key_id=\"my-api-key\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/api_key/#the-key-class","title":"The Key Class","text":"<p>The <code>Key</code> class is a dataclass that represents an API key. It provides convenient properties for accessing the key's attributes:</p> <pre><code>from gcp_pilot.api_key import APIKey\n\napi_key = APIKey()\nkey = api_key.get(key_id=\"my-api-key\")\n\n# Access key properties\nprint(f\"Key ID: {key.key_id}\")\nprint(f\"UID: {key.uid}\")\nprint(f\"ETag: {key.etag}\")\nprint(f\"Display Name: {key.display_name}\")\nprint(f\"Created At: {key.created_at}\")\nprint(f\"Updated At: {key.updated_at}\")\nprint(f\"API Targets: {key.api_targets}\")\nprint(f\"Key Value: {key.value}\")\n</code></pre>"},{"location":"services/api_key/#error-handling","title":"Error Handling","text":"<p>The APIKey class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    api_key.get(key_id=\"non-existent-key\")\nexcept exceptions.NotFound:\n    print(\"API key not found\")\n\ntry:\n    api_key.lookup(key=\"invalid-key\")\nexcept exceptions.NotAllowed:\n    print(\"Invalid API key\")\n</code></pre>"},{"location":"services/app_engine/","title":"App Engine","text":"<p>App Engine is a fully managed, serverless platform for developing and hosting web applications at scale. The <code>AppEngine</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud App Engine.</p>"},{"location":"services/app_engine/#installation","title":"Installation","text":"<p>To use the App Engine functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/app_engine/#usage","title":"Usage","text":""},{"location":"services/app_engine/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.app_engine import AppEngine\n\n# Initialize with default credentials\napp_engine = AppEngine()\n\n# Initialize with specific project\napp_engine = AppEngine(project_id=\"my-project\")\n\n# Initialize with specific location\napp_engine = AppEngine(location=\"us-central1\")\n\n# Initialize with service account impersonation\napp_engine = AppEngine(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/app_engine/#getting-app-information","title":"Getting App Information","text":"<pre><code># Get information about the current project's App Engine application\napp = app_engine.get_app()\nprint(f\"App ID: {app['id']}\")\nprint(f\"Location: {app['locationId']}\")\n\n# Get information about a specific App Engine application\napp = app_engine.get_app(app_id=\"my-project\")\nprint(f\"App ID: {app['id']}\")\nprint(f\"Location: {app['locationId']}\")\n</code></pre>"},{"location":"services/app_engine/#appenginebasedservice","title":"AppEngineBasedService","text":"<p>The <code>AppEngine</code> class inherits from <code>AppEngineBasedService</code>, which is a base class used by other services that rely on App Engine, such as Cloud Tasks. This base class provides functionality for determining the default location of an App Engine application, which is useful for services that need to be deployed in the same location as the App Engine application.</p> <pre><code>from gcp_pilot.tasks import CloudTasks\n\n# CloudTasks inherits from AppEngineBasedService\ntasks = CloudTasks()\n\n# The location will be automatically set to the App Engine application's location\nprint(f\"Location: {tasks.location}\")\n</code></pre>"},{"location":"services/app_engine/#error-handling","title":"Error Handling","text":"<p>The AppEngine class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    app_engine.get_app(app_id=\"non-existent-project\")\nexcept exceptions.NotFound:\n    print(\"App Engine application not found\")\n</code></pre>"},{"location":"services/big_query/","title":"BigQuery","text":"<p>BigQuery is a fully managed, serverless data warehouse that enables scalable analysis over petabytes of data. The <code>BigQuery</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud BigQuery.</p>"},{"location":"services/big_query/#installation","title":"Installation","text":"<p>To use the BigQuery functionality, you need to install gcp-pilot with the bigquery extra:</p> <pre><code>pip install gcp-pilot[bigquery]\n</code></pre>"},{"location":"services/big_query/#usage","title":"Usage","text":""},{"location":"services/big_query/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.big_query import BigQuery\n\n# Initialize with default credentials\nbq = BigQuery()\n\n# Initialize with specific project\nbq = BigQuery(project_id=\"my-project\")\n\n# Initialize with specific location\nbq = BigQuery(location=\"us-central1\")\n\n# Initialize with service account impersonation\nbq = BigQuery(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/big_query/#managing-datasets-and-tables","title":"Managing Datasets and Tables","text":""},{"location":"services/big_query/#listing-datasets","title":"Listing Datasets","text":"<pre><code># List all datasets in the project\ndatasets = bq.list_datasets()\nfor dataset in datasets:\n    print(f\"Dataset: {dataset.dataset_id}\")\n</code></pre>"},{"location":"services/big_query/#listing-tables","title":"Listing Tables","text":"<pre><code># List all tables in a dataset\ntables = bq.list_tables(dataset_id=\"my_dataset\")\nfor table in tables:\n    print(f\"Table: {table.table_id}\")\n</code></pre>"},{"location":"services/big_query/#getting-a-table","title":"Getting a Table","text":"<pre><code># Get a table\ntable = bq.get_table(\n    table_name=\"my_table\",\n    dataset_name=\"my_dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Table: {table.table_id}\")\nprint(f\"Schema: {table.schema}\")\nprint(f\"Rows: {table.num_rows}\")\n</code></pre>"},{"location":"services/big_query/#creating-a-table","title":"Creating a Table","text":"<pre><code>from google.cloud import bigquery\n\n# Define the schema\nschema = [\n    bigquery.SchemaField(\"name\", \"STRING\", mode=\"REQUIRED\"),\n    bigquery.SchemaField(\"age\", \"INTEGER\", mode=\"REQUIRED\"),\n    bigquery.SchemaField(\"email\", \"STRING\", mode=\"NULLABLE\"),\n]\n\n# Create a table reference\ndataset_ref = bq.client.dataset(\"my_dataset\")\ntable_ref = dataset_ref.table(\"my_table\")\n\n# Create a table object\ntable = bigquery.Table(table_ref, schema=schema)\n\n# Create the table\nbq.create_table(table)\n</code></pre>"},{"location":"services/big_query/#deleting-a-table","title":"Deleting a Table","text":"<pre><code>from google.cloud import bigquery\n\n# Create a table reference\ndataset_ref = bq.client.dataset(\"my_dataset\")\ntable_ref = dataset_ref.table(\"my_table\")\n\n# Create a table object\ntable = bigquery.Table(table_ref)\n\n# Delete the table\nbq.delete_table(table)\n</code></pre>"},{"location":"services/big_query/#executing-queries","title":"Executing Queries","text":"<pre><code># Execute a simple query\nresults = bq.execute(\"SELECT * FROM `my_dataset.my_table` LIMIT 10\")\nfor row in results:\n    print(row)\n\n# Execute a query with parameters\nresults = bq.execute(\n    \"SELECT * FROM `my_dataset.my_table` WHERE name = @name\",\n    params={\"name\": \"John\"},\n)\nfor row in results:\n    print(row)\n\n# Execute a query and write the results to a destination table\nbq.execute(\n    \"SELECT * FROM `my_dataset.my_table`\",\n    destination_table_name=\"my_destination_table\",\n    destination_dataset_name=\"my_destination_dataset\",\n    destination_project=\"my-destination-project\",  # Optional: defaults to the project associated with credentials\n    truncate=True,  # Optional: if True, truncates the destination table before writing\n)\n</code></pre>"},{"location":"services/big_query/#inserting-data","title":"Inserting Data","text":"<pre><code># Insert rows into a table\nrows = [\n    {\"name\": \"John\", \"age\": 30, \"email\": \"john@example.com\"},\n    {\"name\": \"Jane\", \"age\": 25, \"email\": \"jane@example.com\"},\n]\nerrors = bq.insert_rows(\n    dataset_name=\"my_dataset\",\n    table_name=\"my_table\",\n    rows=rows,\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nif errors:\n    print(f\"Errors: {errors}\")\n</code></pre>"},{"location":"services/big_query/#loading-data","title":"Loading Data","text":"<pre><code># Load data from a local file\nbq.load(\n    table_name=\"my_table\",\n    filename=\"/path/to/data.csv\",\n    dataset_name=\"my_dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    schema=[\n        bigquery.SchemaField(\"name\", \"STRING\", mode=\"REQUIRED\"),\n        bigquery.SchemaField(\"age\", \"INTEGER\", mode=\"REQUIRED\"),\n        bigquery.SchemaField(\"email\", \"STRING\", mode=\"NULLABLE\"),\n    ],\n    wait=True,  # Optional: if True, waits for the load job to complete\n    truncate=True,  # Optional: if True, truncates the table before loading\n)\n\n# Load data from a file in Google Cloud Storage\nbq.load(\n    table_name=\"my_table\",\n    filename=\"gs://my-bucket/data.csv\",\n    dataset_name=\"my_dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    schema=[\n        bigquery.SchemaField(\"name\", \"STRING\", mode=\"REQUIRED\"),\n        bigquery.SchemaField(\"age\", \"INTEGER\", mode=\"REQUIRED\"),\n        bigquery.SchemaField(\"email\", \"STRING\", mode=\"NULLABLE\"),\n    ],\n    wait=True,  # Optional: if True, waits for the load job to complete\n)\n\n# Load data from a local file, uploading it to Google Cloud Storage first\nbq.load(\n    table_name=\"my_table\",\n    filename=\"/path/to/data.csv\",\n    dataset_name=\"my_dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    schema=[\n        bigquery.SchemaField(\"name\", \"STRING\", mode=\"REQUIRED\"),\n        bigquery.SchemaField(\"age\", \"INTEGER\", mode=\"REQUIRED\"),\n        bigquery.SchemaField(\"email\", \"STRING\", mode=\"NULLABLE\"),\n    ],\n    gcs_bucket=\"my-bucket\",  # Uploads the file to this bucket before loading\n    wait=True,  # Optional: if True, waits for the load job to complete\n)\n</code></pre>"},{"location":"services/big_query/#copying-tables","title":"Copying Tables","text":"<pre><code># Copy a table\nbq.copy(\n    source_dataset_name=\"my_source_dataset\",\n    source_table_name=\"my_source_table\",\n    destination_dataset_name=\"my_destination_dataset\",\n    destination_table_name=\"my_destination_table\",\n    destination_project=\"my-destination-project\",  # Optional: defaults to the project associated with credentials\n    wait=True,  # Optional: if True, waits for the copy job to complete\n)\n</code></pre>"},{"location":"services/big_query/#working-with-external-data-sources","title":"Working with External Data Sources","text":"<pre><code># Add an external Google Cloud Storage data source\nbq.add_external_gcs_source(\n    gcs_url=\"gs://my-bucket/data.csv\",\n    dataset_name=\"my_dataset\",\n    table_name=\"my_external_table\",\n    skip_rows=1,  # Optional: number of header rows to skip\n    delimiter=\",\",  # Optional: field delimiter\n    quote='\"',  # Optional: quote character\n    source_format=\"CSV\",  # Optional: source format (CSV, NEWLINE_DELIMITED_JSON, AVRO, etc.)\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/big_query/#utility-methods","title":"Utility Methods","text":"<pre><code># Convert a datetime to a string format suitable for BigQuery\nfrom datetime import datetime\n\ndt = datetime.now()\ndate_str = BigQuery.date_to_str(dt)\nprint(f\"Date string: {date_str}\")\n\n# Convert a datetime to a string format suitable for BigQuery table suffixes\ndate_str = BigQuery.date_to_str(dt, table_suffix=True)\nprint(f\"Table suffix: {date_str}\")\n</code></pre>"},{"location":"services/big_query/#error-handling","title":"Error Handling","text":"<p>The BigQuery class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    bq.get_table(table_name=\"non_existent_table\", dataset_name=\"my_dataset\")\nexcept exceptions.NotFound:\n    print(\"Table not found\")\n\ntry:\n    bq.execute(\"SELECT * FROM `non_existent_dataset.non_existent_table`\")\nexcept exceptions.NotFound:\n    print(\"Table or dataset not found\")\n</code></pre>"},{"location":"services/build/","title":"Cloud Build","text":"<p>Cloud Build is a service that executes your builds on Google Cloud Platform infrastructure. The <code>CloudBuild</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Build, making it easy to create and manage build triggers, run builds, and subscribe to build notifications.</p>"},{"location":"services/build/#installation","title":"Installation","text":"<p>To use the Cloud Build functionality, you need to install gcp-pilot with the build extra:</p> <pre><code>pip install gcp-pilot[build]\n</code></pre>"},{"location":"services/build/#usage","title":"Usage","text":""},{"location":"services/build/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.build import CloudBuild\n\n# Initialize with default credentials\nbuild = CloudBuild()\n\n# Initialize with specific project\nbuild = CloudBuild(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nbuild = CloudBuild(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/build/#creating-build-steps","title":"Creating Build Steps","text":"<p>Build steps define the actions that Cloud Build will execute during a build. Each step runs a Docker container.</p> <pre><code>from gcp_pilot.build import CloudBuild\nfrom google.cloud.devtools import cloudbuild_v1\n\nbuild = CloudBuild()\n\n# Create a simple build step\nstep = build.make_build_step(\n    name=\"gcr.io/cloud-builders/docker\",\n    args=[\"build\", \"-t\", \"gcr.io/my-project/my-image\", \".\"],\n)\n\n# Create a build step with an identifier\nstep = build.make_build_step(\n    name=\"gcr.io/cloud-builders/docker\",\n    identifier=\"build-docker-image\",\n    args=[\"build\", \"-t\", \"gcr.io/my-project/my-image\", \".\"],\n)\n\n# Create a build step with environment variables\nstep = build.make_build_step(\n    name=\"gcr.io/cloud-builders/docker\",\n    args=[\"build\", \"-t\", \"gcr.io/my-project/my-image\", \".\"],\n    env=[\"ENV_VAR=value\"],\n)\n\n# Create a build step with a custom entrypoint\nstep = build.make_build_step(\n    name=\"gcr.io/cloud-builders/docker\",\n    args=[\"build\", \"-t\", \"gcr.io/my-project/my-image\", \".\"],\n    entrypoint=\"bash\",\n)\n\n# Create a build step with a timeout\nstep = build.make_build_step(\n    name=\"gcr.io/cloud-builders/docker\",\n    args=[\"build\", \"-t\", \"gcr.io/my-project/my-image\", \".\"],\n    timeout=300,  # 5 minutes\n)\n</code></pre>"},{"location":"services/build/#creating-source-repository-events","title":"Creating Source Repository Events","text":"<p>Source repository events define when a build trigger should run based on changes to a Cloud Source Repository.</p> <pre><code># Create a source repository event for the master branch\nevent = build.make_source_repo_event(\n    repo_name=\"my-repo\",\n)\n\n# Create a source repository event for a specific branch\nevent = build.make_source_repo_event(\n    repo_name=\"my-repo\",\n    branch_name=\"develop\",\n)\n\n# Create a source repository event for a specific tag\nevent = build.make_source_repo_event(\n    repo_name=\"my-repo\",\n    tag_name=\"v1.0.0\",\n)\n\n# Create a source repository event for a specific project\nevent = build.make_source_repo_event(\n    repo_name=\"my-repo\",\n    branch_name=\"develop\",\n    project_id=\"my-project\",\n)\n</code></pre>"},{"location":"services/build/#creating-github-events","title":"Creating GitHub Events","text":"<p>GitHub events define when a build trigger should run based on changes to a GitHub repository.</p> <pre><code># Create a GitHub event for the master branch\nevent = build.make_github_event(\n    url=\"https://github.com/owner/repo\",\n)\n\n# Create a GitHub event for a specific branch\nevent = build.make_github_event(\n    url=\"https://github.com/owner/repo\",\n    branch_name=\"develop\",\n)\n\n# Create a GitHub event for a specific tag\nevent = build.make_github_event(\n    url=\"https://github.com/owner/repo\",\n    tag_name=\"v1.0.0\",\n)\n</code></pre>"},{"location":"services/build/#working-with-substitutions","title":"Working with Substitutions","text":"<p>Substitutions allow you to parameterize your build configurations.</p> <pre><code>from gcp_pilot.build import CloudBuild, Substitutions\n\n# Create a substitutions object\nsubstitutions = Substitutions()\n\n# Add substitution variables\nsubstitutions.add(\n    image_name=\"my-image\",\n    tag=\"latest\",\n    env=\"production\",\n)\n\n# Access substitution variables\nprint(substitutions.IMAGE_NAME)  # Outputs: ${_IMAGE_NAME}\n\n# Use substitution variables in a build step\nbuild = CloudBuild()\nstep = build.make_build_step(\n    name=\"gcr.io/cloud-builders/docker\",\n    args=[\"build\", \"-t\", f\"gcr.io/my-project/{substitutions.IMAGE_NAME}:{substitutions.TAG}\", \".\"],\n)\n</code></pre>"},{"location":"services/build/#creating-build-triggers","title":"Creating Build Triggers","text":"<p>Build triggers automatically start a build when changes are pushed to a repository.</p> <pre><code># Create a build trigger for a Cloud Source Repository\ntrigger = build.create_trigger(\n    name=\"my-trigger\",\n    description=\"Build and deploy on push to master\",\n    event=build.make_source_repo_event(repo_name=\"my-repo\"),\n    steps=[\n        build.make_build_step(\n            name=\"gcr.io/cloud-builders/docker\",\n            args=[\"build\", \"-t\", \"gcr.io/my-project/my-image\", \".\"],\n        ),\n    ],\n    tags=[\"deploy\", \"production\"],\n    images=[\"gcr.io/my-project/my-image\"],\n    substitutions=substitutions,\n    timeout=600,  # 10 minutes\n    machine_type=cloudbuild_v1.BuildOptions.MachineType.N1_HIGHCPU_8,\n)\n\n# Create a build trigger for a GitHub repository\ntrigger = build.create_trigger(\n    name=\"my-github-trigger\",\n    description=\"Build and deploy on push to master\",\n    event=build.make_github_event(url=\"https://github.com/owner/repo\"),\n    steps=[\n        build.make_build_step(\n            name=\"gcr.io/cloud-builders/docker\",\n            args=[\"build\", \"-t\", \"gcr.io/my-project/my-image\", \".\"],\n        ),\n    ],\n    tags=[\"deploy\", \"production\"],\n)\n</code></pre>"},{"location":"services/build/#updating-build-triggers","title":"Updating Build Triggers","text":"<pre><code># Update an existing build trigger\ntrigger = build.update_trigger(\n    name=\"my-trigger\",\n    description=\"Updated description\",\n    event=build.make_source_repo_event(repo_name=\"my-repo\"),\n    steps=[\n        build.make_build_step(\n            name=\"gcr.io/cloud-builders/docker\",\n            args=[\"build\", \"-t\", \"gcr.io/my-project/my-image:v2\", \".\"],\n        ),\n    ],\n    tags=[\"deploy\", \"production\"],\n)\n</code></pre>"},{"location":"services/build/#creating-or-updating-build-triggers","title":"Creating or Updating Build Triggers","text":"<pre><code># Create a trigger if it doesn't exist, or update it if it does\ntrigger = build.create_or_update_trigger(\n    name=\"my-trigger\",\n    description=\"Build and deploy on push to master\",\n    event=build.make_source_repo_event(repo_name=\"my-repo\"),\n    steps=[\n        build.make_build_step(\n            name=\"gcr.io/cloud-builders/docker\",\n            args=[\"build\", \"-t\", \"gcr.io/my-project/my-image\", \".\"],\n        ),\n    ],\n    tags=[\"deploy\", \"production\"],\n)\n</code></pre>"},{"location":"services/build/#getting-and-deleting-build-triggers","title":"Getting and Deleting Build Triggers","text":"<pre><code># Get a build trigger\ntrigger = build.get_trigger(\n    trigger_id=\"my-trigger\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n\n# Delete a build trigger\nbuild.delete_trigger(\n    trigger_id=\"my-trigger\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/build/#running-build-triggers","title":"Running Build Triggers","text":"<pre><code># Run a build trigger for a specific branch\nbuild.run_trigger(\n    name=\"my-trigger\",\n    branch_name=\"master\",\n)\n\n# Run a build trigger for a specific tag\nbuild.run_trigger(\n    name=\"my-trigger\",\n    tag_name=\"v1.0.0\",\n)\n\n# Run a build trigger for a specific commit\nbuild.run_trigger(\n    name=\"my-trigger\",\n    commit_sha=\"abc123\",\n)\n</code></pre>"},{"location":"services/build/#getting-builds","title":"Getting Builds","text":"<pre><code># Get all builds\nfor build_obj in build.get_builds():\n    print(f\"Build: {build_obj.id}\")\n\n# Get builds for a specific trigger\nfor build_obj in build.get_builds(trigger_id=\"my-trigger\"):\n    print(f\"Build: {build_obj.id}\")\n\n# Get builds with a specific status\nfor build_obj in build.get_builds(status=\"SUCCESS\"):\n    print(f\"Build: {build_obj.id}\")\n</code></pre>"},{"location":"services/build/#subscribing-to-build-notifications","title":"Subscribing to Build Notifications","text":"<p>Cloud Build can publish build status notifications to Pub/Sub. gcp-pilot makes it easy to subscribe to these notifications.</p> <pre><code># Subscribe to build notifications\nbuild.subscribe(\n    subscription_id=\"my-build-notifications\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n\n# Subscribe to build notifications with a push endpoint\nbuild.subscribe(\n    subscription_id=\"my-build-notifications\",\n    push_to_url=\"https://example.com/build-webhook\",\n    use_oidc_auth=True,  # Use OIDC authentication for the push endpoint\n)\n</code></pre> <p>Note: To use the <code>subscribe</code> method, you need to install gcp-pilot with the pubsub extra:</p> <pre><code>pip install gcp-pilot[build,pubsub]\n</code></pre>"},{"location":"services/build/#error-handling","title":"Error Handling","text":"<p>The CloudBuild class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    build.create_trigger(name=\"existing-trigger\", ...)\nexcept exceptions.AlreadyExists:\n    print(\"Trigger already exists\")\n</code></pre>"},{"location":"services/calendar/","title":"Calendar","text":"<p>Calendar is a service that allows you to manage Google Calendar resources. The <code>Calendar</code> class in gcp-pilot provides a high-level interface for interacting with Google Calendar API.</p>"},{"location":"services/calendar/#installation","title":"Installation","text":"<p>To use the Calendar functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/calendar/#usage","title":"Usage","text":""},{"location":"services/calendar/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.calendar import Calendar\n\n# Initialize with default credentials and a specific email\ncalendar = Calendar(email=\"user@example.com\")\n\n# Initialize with a specific timezone\ncalendar = Calendar(email=\"user@example.com\", timezone=\"America/New_York\")\n\n# Initialize with service account impersonation\ncalendar = Calendar(\n    email=\"user@example.com\",\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n</code></pre>"},{"location":"services/calendar/#managing-calendars","title":"Managing Calendars","text":""},{"location":"services/calendar/#getting-calendars","title":"Getting Calendars","text":"<pre><code># Get all calendars\ncalendars = calendar.get_calendars()\nfor cal in calendars:\n    print(f\"Calendar: {cal['summary']}, ID: {cal['id']}\")\n\n# Get a specific calendar\ncal = calendar.get_calendar(calendar_id=\"primary\")\nprint(f\"Calendar: {cal['summary']}, ID: {cal['id']}\")\n</code></pre>"},{"location":"services/calendar/#creating-and-updating-calendars","title":"Creating and Updating Calendars","text":"<pre><code># Create a new calendar\nnew_calendar = calendar.create_calendar(\n    summary=\"My Calendar\",\n    description=\"A calendar for my events\",\n    timezone=\"America/New_York\"\n)\nprint(f\"Created calendar with ID: {new_calendar['id']}\")\n\n# Update an existing calendar\nupdated_calendar = calendar.update_calendar(\n    calendar_id=\"calendar_id_here\",\n    summary=\"Updated Calendar Name\",\n    description=\"Updated description\",\n    timezone=\"Europe/London\"\n)\nprint(f\"Updated calendar: {updated_calendar['summary']}\")\n\n# Create or update a calendar (creates if it doesn't exist, updates if it does)\ncal = calendar.create_or_update_calendar(\n    summary=\"My Calendar\",\n    description=\"A calendar for my events\",\n    timezone=\"America/New_York\",\n    calendar_id=\"optional_calendar_id_here\"\n)\n</code></pre>"},{"location":"services/calendar/#deleting-and-clearing-calendars","title":"Deleting and Clearing Calendars","text":"<pre><code># Delete a calendar\ncalendar.delete_calendar(calendar_id=\"calendar_id_here\")\n\n# Clear all events from a calendar\ncalendar.clear_calendar(calendar_id=\"calendar_id_here\")\n</code></pre>"},{"location":"services/calendar/#managing-events","title":"Managing Events","text":""},{"location":"services/calendar/#creating-and-updating-events","title":"Creating and Updating Events","text":"<pre><code>from datetime import datetime, timedelta\nfrom gcp_pilot.calendar import Attendee, Color, SendUpdates\n\n# Create a simple event\nstart_time = datetime.now() + timedelta(days=1)\nend_time = start_time + timedelta(hours=1)\n\nevent = calendar.create_or_update_event(\n    summary=\"Meeting with Team\",\n    start_at=start_time,\n    end_at=end_time,\n    calendar_id=\"primary\"\n)\nprint(f\"Created event with ID: {event['id']}\")\n\n# Create an event with more details\nattendees = [\n    Attendee(email=\"colleague@example.com\", name=\"Colleague\"),\n    Attendee(email=\"manager@example.com\", name=\"Manager\", required=True)\n]\n\nevent = calendar.create_or_update_event(\n    summary=\"Project Review\",\n    start_at=start_time,\n    end_at=end_time,\n    location=\"Conference Room A\",\n    description=\"Quarterly project review meeting\",\n    attendees=attendees,\n    color=Color.BLUE,\n    send_updates=SendUpdates.ALL,\n    calendar_id=\"primary\"\n)\n\n# Create a recurring event\nevent = calendar.create_or_update_event(\n    summary=\"Weekly Team Meeting\",\n    start_at=start_time,\n    end_at=end_time,\n    recurrence_type=\"WEEKLY\",\n    recurrence_amount=\"4\",  # Repeat for 4 weeks\n    calendar_id=\"primary\"\n)\n\n# Update an existing event\nevent = calendar.create_or_update_event(\n    summary=\"Updated Meeting Title\",\n    start_at=start_time,\n    end_at=end_time,\n    event_id=\"event_id_here\",\n    calendar_id=\"primary\"\n)\n</code></pre>"},{"location":"services/calendar/#getting-events","title":"Getting Events","text":"<pre><code># Get all events from a calendar\nevents = calendar.get_events(calendar_id=\"primary\")\nfor event in events:\n    print(f\"Event: {event['summary']}, Start: {event['start']}\")\n\n# Get events within a specific time range\nfrom datetime import datetime, timedelta\n\nstart_date = datetime.now()\nend_date = start_date + timedelta(days=7)\n\nevents = calendar.get_events(\n    calendar_id=\"primary\",\n    starts_at=start_date,\n    ends_at=end_date\n)\nfor event in events:\n    print(f\"Event: {event['summary']}, Start: {event['start']}\")\n\n# Get a specific event\nevent = calendar.get_event(\n    event_id=\"event_id_here\",\n    calendar_id=\"primary\"\n)\nprint(f\"Event: {event['summary']}\")\n\n# Get instances of a recurring event\nrecurring_events = calendar.get_recurrent_events(\n    event_id=\"recurring_event_id_here\",\n    calendar_id=\"primary\"\n)\nfor event in recurring_events:\n    print(f\"Event instance: {event['summary']}, Start: {event['start']}\")\n</code></pre>"},{"location":"services/calendar/#deleting-events","title":"Deleting Events","text":"<pre><code># Delete an event\ncalendar.delete_event(\n    event_id=\"event_id_here\",\n    calendar_id=\"primary\"\n)\n</code></pre>"},{"location":"services/calendar/#checking-availability","title":"Checking Availability","text":"<pre><code>from datetime import datetime, timedelta\n\nstart_time = datetime.now() + timedelta(days=1)\nend_time = start_time + timedelta(hours=2)\n\n# Check availability for the primary calendar\navailability = calendar.check_availability(\n    starts_at=start_time,\n    ends_at=end_time\n)\nprint(f\"Available: {availability}\")\n\n# Check availability for multiple calendars\navailability = calendar.check_availability(\n    starts_at=start_time,\n    ends_at=end_time,\n    calendar_ids=[\"calendar_id_1\", \"calendar_id_2\"],\n    timezone=\"America/New_York\"\n)\nprint(f\"Available: {availability}\")\n</code></pre>"},{"location":"services/calendar/#watching-for-changes","title":"Watching for Changes","text":""},{"location":"services/calendar/#watching-calendars","title":"Watching Calendars","text":"<pre><code># Set up a webhook to be notified of calendar changes\nwatch_response = calendar.watch_calendars(\n    hook_url=\"https://example.com/webhook\",\n    hook_token=\"my_secret_token\"\n)\nprint(f\"Channel ID: {watch_response['id']}\")\nprint(f\"Resource ID: {watch_response['resourceId']}\")\n\n# Stop watching calendars\ncalendar.unwatch(\n    uuid=\"channel_id_from_watch_response\",\n    resource_id=\"resource_id_from_watch_response\"\n)\n</code></pre>"},{"location":"services/calendar/#watching-events","title":"Watching Events","text":"<pre><code># Set up a webhook to be notified of event changes in a calendar\nwatch_response = calendar.watch_events(\n    hook_url=\"https://example.com/webhook\",\n    calendar_id=\"primary\",\n    hook_token=\"my_secret_token\"\n)\nprint(f\"Channel ID: {watch_response['id']}\")\nprint(f\"Resource ID: {watch_response['resourceId']}\")\n\n# Stop watching events\ncalendar.unwatch(\n    uuid=\"channel_id_from_watch_response\",\n    resource_id=\"resource_id_from_watch_response\"\n)\n</code></pre>"},{"location":"services/calendar/#enums-and-helper-classes","title":"Enums and Helper Classes","text":""},{"location":"services/calendar/#responsestatus","title":"ResponseStatus","text":"<p>The <code>ResponseStatus</code> enum represents the response status of an attendee:</p> <pre><code>from gcp_pilot.calendar import ResponseStatus\n\n# Available values\nResponseStatus.NEEDS_ACTION  # The attendee has not responded to the invitation\nResponseStatus.DECLINED      # The attendee has declined the invitation\nResponseStatus.TENTATIVE     # The attendee has tentatively accepted the invitation\nResponseStatus.ACCEPTED      # The attendee has accepted the invitation\n</code></pre>"},{"location":"services/calendar/#attendee","title":"Attendee","text":"<p>The <code>Attendee</code> class represents an event attendee:</p> <pre><code>from gcp_pilot.calendar import Attendee, ResponseStatus\n\n# Create an attendee\nattendee = Attendee(\n    email=\"user@example.com\",\n    name=\"User Name\",\n    required=True,  # Optional: if True, the attendee is required\n    status=ResponseStatus.ACCEPTED  # Optional: the attendee's response status\n)\n\n# Convert to a dictionary for API calls\nattendee_data = attendee.as_data()\n</code></pre>"},{"location":"services/calendar/#color","title":"Color","text":"<p>The <code>Color</code> enum represents event colors:</p> <pre><code>from gcp_pilot.calendar import Color\n\n# Available colors\nColor.BLUE\nColor.GREEN\nColor.PURPLE\nColor.RED\nColor.YELLOW\nColor.ORANGE\nColor.TURQUOISE\nColor.GRAY\nColor.BOLD_BLUE\nColor.BOLD_GREEN\nColor.BOLD_RED\n</code></pre>"},{"location":"services/calendar/#sendupdates","title":"SendUpdates","text":"<p>The <code>SendUpdates</code> enum controls how updates are sent to attendees:</p> <pre><code>from gcp_pilot.calendar import SendUpdates\n\n# Available options\nSendUpdates.ALL        # Send updates to all attendees\nSendUpdates.EXTERNAL   # Send updates only to non-Google Calendar attendees\nSendUpdates.NONE       # Don't send updates\n</code></pre>"},{"location":"services/calendar/#error-handling","title":"Error Handling","text":"<p>The Calendar class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    calendar.get_event(event_id=\"non_existent_event\", calendar_id=\"primary\")\nexcept exceptions.NotFound:\n    print(\"Event not found\")\n\ntry:\n    calendar.delete_calendar(calendar_id=\"non_existent_calendar\")\nexcept exceptions.NotFound:\n    print(\"Calendar not found\")\n</code></pre>"},{"location":"services/chats/","title":"Google Chats","text":"<p>Google Chats is a messaging platform built for teams. The <code>chats</code> module in gcp-pilot provides classes for interacting with Google Chats, both as a webhook and as a bot.</p>"},{"location":"services/chats/#installation","title":"Installation","text":"<p>To use the Google Chats functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/chats/#usage","title":"Usage","text":"<p>The <code>chats</code> module provides two main ways to interact with Google Chats:</p> <ol> <li><code>ChatsHook</code>: For sending messages to Google Chat via webhooks</li> <li><code>ChatsBot</code>: For interacting with Google Chat as a bot</li> </ol>"},{"location":"services/chats/#using-chatshook","title":"Using ChatsHook","text":"<p>The <code>ChatsHook</code> class allows you to send messages to Google Chat via webhooks. This is useful for sending notifications from your application to a Google Chat room.</p> <pre><code>from gcp_pilot.chats import ChatsHook, Card, Section, Text\n\n# Initialize with the webhook URL\nhook = ChatsHook(hook_url=\"https://chat.googleapis.com/v1/spaces/SPACE_ID/messages?key=KEY&amp;token=TOKEN\")\n\n# Send a simple text message\nhook.send_text(\"Hello, world!\")\n\n# Send a message to a specific thread\nhook.send_text(\"Hello, thread!\", thread_key=\"thread_key_here\")\n\n# Create a card with a section\ncard = Card()\nsection = Section()\nsection.add_header(\"Card Header\")\nsection.add_paragraph(\"This is a paragraph of text.\")\nsection.add_button(url=\"https://example.com\", text=\"Visit Example\")\ncard.add_section(section)\n\n# Send the card\nhook.send_card(card)\n\n# Send the card with additional text\nhook.send_card(card, additional_text=\"Check out this card!\")\n\n# Send the card to a specific thread\nhook.send_card(card, thread_key=\"thread_key_here\")\n</code></pre>"},{"location":"services/chats/#using-chatsbot","title":"Using ChatsBot","text":"<p>The <code>ChatsBot</code> class allows you to interact with Google Chat as a bot. This requires a service account with the appropriate permissions.</p> <pre><code>from gcp_pilot.chats import ChatsBot, Card, Section\n\n# Initialize with default credentials\nbot = ChatsBot()\n\n# Initialize with service account impersonation\nbot = ChatsBot(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Get information about a room\nroom = bot.get_room(room_id=\"room_id_here\")\nprint(f\"Room name: {room['displayName']}\")\n\n# List all rooms the bot is a member of\nrooms = bot.get_rooms()\nfor room in rooms:\n    print(f\"Room: {room['displayName']}\")\n\n# Get information about a member in a room\nmember = bot.get_member(room_id=\"room_id_here\", member_id=\"member_id_here\")\nprint(f\"Member name: {member['displayName']}\")\n\n# List all members in a room\nmembers = bot.get_members(room_id=\"room_id_here\")\nfor member in members:\n    print(f\"Member: {member['displayName']}\")\n\n# Send a text message to a room\nbot.send_text(room_id=\"room_id_here\", text=\"Hello from the bot!\")\n\n# Create a card with a section\ncard = Card()\nsection = Section()\nsection.add_header(\"Bot Card\")\nsection.add_paragraph(\"This is a message from the bot.\")\nsection.add_button(url=\"https://example.com\", text=\"Visit Example\")\ncard.add_section(section)\n\n# Send the card to a room\nbot.send_card(room_id=\"room_id_here\", card=card)\n\n# Send the card with additional text\nbot.send_card(room_id=\"room_id_here\", card=card, additional_text=\"Check out this card!\")\n</code></pre>"},{"location":"services/chats/#building-rich-messages","title":"Building Rich Messages","text":"<p>The <code>chats</code> module provides several classes for building rich messages with cards, sections, and widgets.</p>"},{"location":"services/chats/#text-utilities","title":"Text Utilities","text":"<p>The <code>Text</code> class provides static methods for formatting text:</p> <pre><code>from gcp_pilot.chats import Text\n\n# Create a mention\nmention_all = Text.build_mention()  # Mentions @all\nmention_user = Text.build_mention(member_id=\"user_id_here\")  # Mentions a specific user\n\n# Create a link\nlink = Text.build_link(url=\"https://example.com\", text=\"Visit Example\")\n\n# Format text with color\ncolored_text = Text.format_color(hex_color=\"#ff0000\", text=\"This text is red\")\n</code></pre>"},{"location":"services/chats/#creating-cards","title":"Creating Cards","text":"<p>A card is the main container for rich content in Google Chat:</p> <pre><code>from gcp_pilot.chats import Card, Section\n\n# Create a card\ncard = Card()\n\n# Add a header to the card\ncard.add_header(\n    title=\"Card Title\",\n    subtitle=\"Card Subtitle\",\n    image_url=\"https://example.com/image.png\",\n    style=\"IMAGE\"  # or \"AVATAR\"\n)\n\n# Create a section\nsection = Section()\n\n# Add the section to the card\ncard.add_section(section)\n\n# Get the card data for API calls\ncard_data = card.as_data()\n</code></pre>"},{"location":"services/chats/#creating-sections","title":"Creating Sections","text":"<p>Sections are containers for widgets within a card:</p> <pre><code>from gcp_pilot.chats import Section, ButtonWidget, OnClickWidget\n\n# Create a section\nsection = Section()\n\n# Add a header to the section\nsection.add_header(\"Section Header\")\n\n# Add a paragraph of text\nsection.add_paragraph(\"This is a paragraph of text.\")\n\n# Add text with more formatting options\nsection.add_text(\n    content=\"Main content\",\n    title=\"Title\",\n    footer=\"Footer\",\n    click_url=\"https://example.com\",\n    icon=\"STAR\",\n    button=\"Visit\"\n)\n\n# Add a button\nsection.add_button(\n    url=\"https://example.com\",\n    text=\"Visit Example\",\n    image_url=\"https://example.com/button.png\",\n    icon=\"STAR\"\n)\n\n# Add an image\nsection.add_image(\n    image_url=\"https://example.com/image.png\",\n    click_url=\"https://example.com\"\n)\n\n# Get the section data for API calls\nsection_data = section.as_data()\n</code></pre>"},{"location":"services/chats/#creating-widgets","title":"Creating Widgets","text":"<p>Widgets are the individual UI elements within a section:</p> <pre><code>from gcp_pilot.chats import (\n    ButtonWidget, ButtonGroupWidget, OnClickWidget,\n    KeyValueWidget, TextWidget, ImageWidget\n)\n\n# Create a button widget\nbutton = ButtonWidget(\n    url=\"https://example.com\",\n    text=\"Visit Example\",\n    image_url=\"https://example.com/button.png\",\n    icon=\"STAR\"\n)\n\n# Create a button group widget\nbutton_group = ButtonGroupWidget(\n    buttons=[\n        ButtonWidget(url=\"https://example.com\", text=\"Button 1\"),\n        ButtonWidget(url=\"https://example.org\", text=\"Button 2\")\n    ]\n)\n\n# Create an on-click widget\non_click = OnClickWidget(url=\"https://example.com\")\n\n# Create a key-value widget\nkey_value = KeyValueWidget(\n    content=\"Content\",\n    top=\"Top Label\",\n    bottom=\"Bottom Label\",\n    break_lines=True,\n    on_click=on_click,\n    icon=\"STAR\",\n    button=button\n)\n\n# Create a text widget\ntext = TextWidget(text=\"This is a text widget\")\n\n# Create an image widget\nimage = ImageWidget(\n    image_url=\"https://example.com/image.png\",\n    on_click=on_click\n)\n\n# Get widget data for API calls\nbutton_data = button.as_data()\n</code></pre>"},{"location":"services/chats/#error-handling","title":"Error Handling","text":"<p>The Chats classes handle common errors and convert them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    bot.get_room(room_id=\"non_existent_room\")\nexcept exceptions.NotFound:\n    print(\"Room not found\")\n\ntry:\n    hook.send_text(\"Message\")\nexcept exceptions.HttpError as e:\n    print(f\"Error sending message: {e}\")\n</code></pre>"},{"location":"services/datastore/","title":"Datastore","text":"<p>Datastore is a highly scalable NoSQL database for your applications. The <code>datastore</code> module in gcp-pilot provides an ORM-like interface for interacting with Google Cloud Datastore.</p>"},{"location":"services/datastore/#installation","title":"Installation","text":"<p>To use the Datastore functionality, you need to install gcp-pilot with the datastore extra:</p> <pre><code>pip install gcp-pilot[datastore]\n</code></pre>"},{"location":"services/datastore/#usage","title":"Usage","text":"<p>The <code>datastore</code> module provides a way to define document classes and perform CRUD operations on them.</p>"},{"location":"services/datastore/#defining-document-classes","title":"Defining Document Classes","text":"<p>To define a document class, you need to inherit from the <code>Document</code> class:</p> <pre><code>from gcp_pilot.datastore import Document, EmbeddedDocument\nfrom datetime import datetime\nfrom typing import List, Optional\n\n# Define an embedded document class\nclass Address(EmbeddedDocument):\n    street: str\n    city: str\n    state: str\n    zip_code: str\n\n    # You can customize the kind name (collection name)\n    class Config:\n        kind = \"addresses\"\n\n# Define a document class\nclass User(Document):\n    name: str\n    email: str\n    age: int\n    created_at: datetime = datetime.now()\n    address: Optional[Address] = None\n    tags: List[str] = []\n\n    # You can customize the kind name (collection name)\n    # and exclude fields from indexing\n    class Config:\n        kind = \"users\"\n        exclude_from_indexes = [\"address\"]\n</code></pre>"},{"location":"services/datastore/#creating-documents","title":"Creating Documents","text":"<pre><code># Create a new user\nuser = User(\n    name=\"John Doe\",\n    email=\"john@example.com\",\n    age=30,\n    address=Address(\n        street=\"123 Main St\",\n        city=\"Anytown\",\n        state=\"CA\",\n        zip_code=\"12345\"\n    ),\n    tags=[\"customer\", \"premium\"]\n)\n\n# Save the user to Datastore\nuser.save()\nprint(f\"User created with ID: {user.pk}\")\n\n# You can also create a document using the Manager\nfrom gcp_pilot.datastore import Manager\n\n# Create a manager for the User class\nuser_manager = Manager(User)\n\n# Create a user using the manager\nuser = user_manager.create(\n    name=\"Jane Smith\",\n    email=\"jane@example.com\",\n    age=25,\n    address=Address(\n        street=\"456 Oak St\",\n        city=\"Othertown\",\n        state=\"NY\",\n        zip_code=\"67890\"\n    ),\n    tags=[\"customer\"]\n)\nprint(f\"User created with ID: {user.pk}\")\n</code></pre>"},{"location":"services/datastore/#querying-documents","title":"Querying Documents","text":"<pre><code>from gcp_pilot.datastore import Manager, DoesNotExist, MultipleObjectsFound\n\n# Create a manager for the User class\nuser_manager = Manager(User)\n\n# Get a user by primary key\nuser = user_manager.get(pk=\"user_id_here\")\nprint(f\"User: {user.name}, Email: {user.email}\")\n\n# Get a user by a field value\ntry:\n    user = user_manager.get(email=\"john@example.com\")\n    print(f\"User: {user.name}, Email: {user.email}\")\nexcept DoesNotExist:\n    print(\"User not found\")\nexcept MultipleObjectsFound:\n    print(\"Multiple users found with the same email\")\n\n# Query users with filters\nusers = user_manager.filter(age__gt=25)  # Users older than 25\nfor user in users:\n    print(f\"User: {user.name}, Age: {user.age}\")\n\n# Query with multiple filters\nusers = user_manager.filter(age__gt=25, tags__contains=\"premium\")\nfor user in users:\n    print(f\"User: {user.name}, Age: {user.age}, Tags: {user.tags}\")\n\n# Query with ordering\nusers = user_manager.query(order_by=\"age\")  # Order by age ascending\nfor user in users:\n    print(f\"User: {user.name}, Age: {user.age}\")\n\nusers = user_manager.query(order_by=\"-age\")  # Order by age descending\nfor user in users:\n    print(f\"User: {user.name}, Age: {user.age}\")\n\n# Query with pagination\nusers = user_manager.query(page_size=10)  # Get 10 users per page\nfor user in users:\n    print(f\"User: {user.name}\")\n\n# Query with distinct values\nusers = user_manager.query(distinct_on=\"age\")\nfor user in users:\n    print(f\"User: {user.name}, Age: {user.age}\")\n</code></pre>"},{"location":"services/datastore/#updating-documents","title":"Updating Documents","text":"<pre><code># Update a user by primary key\nuser_manager.update(\n    pk=\"user_id_here\",\n    name=\"John Smith\",\n    age=31\n)\n\n# Update a user object\nuser = user_manager.get(pk=\"user_id_here\")\nuser.name = \"John Smith\"\nuser.age = 31\nuser.save()\n</code></pre>"},{"location":"services/datastore/#deleting-documents","title":"Deleting Documents","text":"<pre><code># Delete a user by primary key\nuser_manager.delete(pk=\"user_id_here\")\n\n# Delete a user object\nuser = user_manager.get(pk=\"user_id_here\")\nuser.delete()\n</code></pre>"},{"location":"services/datastore/#advanced-usage","title":"Advanced Usage","text":""},{"location":"services/datastore/#custom-managers","title":"Custom Managers","text":"<p>You can create custom managers for your document classes to add specialized query methods:</p> <pre><code>from gcp_pilot.datastore import Manager, Document\n\nclass UserManager(Manager):\n    def get_premium_users(self):\n        return self.filter(tags__contains=\"premium\")\n\n    def get_users_by_age_range(self, min_age, max_age):\n        return self.filter(age__gte=min_age, age__lte=max_age)\n\nclass User(Document):\n    name: str\n    email: str\n    age: int\n    tags: list = []\n\n    # Attach the custom manager\n    objects = UserManager()\n\n    class Config:\n        kind = \"users\"\n\n# Use the custom manager\npremium_users = User.objects.get_premium_users()\nfor user in premium_users:\n    print(f\"Premium user: {user.name}\")\n\n# Get users in an age range\nusers_25_to_35 = User.objects.get_users_by_age_range(25, 35)\nfor user in users_25_to_35:\n    print(f\"User: {user.name}, Age: {user.age}\")\n</code></pre>"},{"location":"services/datastore/#query-operators","title":"Query Operators","text":"<p>The Datastore module supports various query operators:</p> <ul> <li><code>__eq</code>: Equal to (default if no operator is specified)</li> <li><code>__ne</code>: Not equal to</li> <li><code>__lt</code>: Less than</li> <li><code>__lte</code>: Less than or equal to</li> <li><code>__gt</code>: Greater than</li> <li><code>__gte</code>: Greater than or equal to</li> <li><code>__in</code>: In a list of values</li> <li><code>__contains</code>: Contains a value (for lists)</li> <li><code>__startswith</code>: Starts with a value (for strings)</li> <li><code>__endswith</code>: Ends with a value (for strings)</li> </ul> <pre><code># Examples of query operators\nusers = user_manager.filter(age__lt=30)  # Users younger than 30\nusers = user_manager.filter(name__startswith=\"J\")  # Users whose name starts with J\nusers = user_manager.filter(tags__contains=\"premium\")  # Users with the premium tag\nusers = user_manager.filter(age__in=[25, 30, 35])  # Users of specific ages\n</code></pre>"},{"location":"services/datastore/#embedded-documents","title":"Embedded Documents","text":"<p>Embedded documents are stored as part of their parent document:</p> <pre><code>from gcp_pilot.datastore import Document, EmbeddedDocument\nfrom typing import List, Optional\n\nclass Address(EmbeddedDocument):\n    street: str\n    city: str\n    state: str\n    zip_code: str\n\nclass Contact(EmbeddedDocument):\n    phone: str\n    email: str\n\nclass User(Document):\n    name: str\n    address: Optional[Address] = None\n    contacts: List[Contact] = []\n\n    class Config:\n        kind = \"users\"\n\n# Create a user with embedded documents\nuser = User(\n    name=\"John Doe\",\n    address=Address(\n        street=\"123 Main St\",\n        city=\"Anytown\",\n        state=\"CA\",\n        zip_code=\"12345\"\n    ),\n    contacts=[\n        Contact(phone=\"555-1234\", email=\"john@example.com\"),\n        Contact(phone=\"555-5678\", email=\"john@work.com\")\n    ]\n)\n\n# Save the user\nuser.save()\n\n# Query users by embedded document fields\nuser_manager = Manager(User)\nusers = user_manager.filter(**{\"address.city\": \"Anytown\"})\nfor user in users:\n    print(f\"User: {user.name}, City: {user.address.city}\")\n</code></pre>"},{"location":"services/datastore/#error-handling","title":"Error Handling","text":"<p>The Datastore module provides custom exceptions for handling common errors:</p> <pre><code>from gcp_pilot.datastore import Manager, DoesNotExist, MultipleObjectsFound\n\nuser_manager = Manager(User)\n\ntry:\n    # Try to get a user that doesn't exist\n    user = user_manager.get(email=\"nonexistent@example.com\")\nexcept DoesNotExist:\n    print(\"User not found\")\n\ntry:\n    # Try to get a user when multiple users have the same email\n    user = user_manager.get(age=30)  # Multiple users might be 30 years old\nexcept MultipleObjectsFound:\n    print(\"Multiple users found\")\n</code></pre>"},{"location":"services/datastream/","title":"Datastream","text":"<p>Datastream is a serverless and easy-to-use change data capture (CDC) and replication service. The <code>Datastream</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Datastream.</p>"},{"location":"services/datastream/#installation","title":"Installation","text":"<p>To use the Datastream functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/datastream/#usage","title":"Usage","text":""},{"location":"services/datastream/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.datastream import Datastream\n\n# Initialize with default credentials\ndatastream = Datastream()\n\n# Initialize with specific project\ndatastream = Datastream(project_id=\"my-project\")\n\n# Initialize with specific location\ndatastream = Datastream(location=\"us-central1\")\n\n# Initialize with service account impersonation\ndatastream = Datastream(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/datastream/#managing-streams","title":"Managing Streams","text":""},{"location":"services/datastream/#listing-streams","title":"Listing Streams","text":"<pre><code># List all streams in a project\nstreams = datastream.get_streams()\nfor stream in streams:\n    print(f\"Stream: {stream['name']}\")\n\n# List streams in a specific location\nstreams = datastream.get_streams(location=\"us-central1\")\nfor stream in streams:\n    print(f\"Stream: {stream['name']}\")\n</code></pre>"},{"location":"services/datastream/#getting-a-stream","title":"Getting a Stream","text":"<pre><code># Get information about a stream\nstream = datastream.get_stream(\n    stream_name=\"my-stream\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Stream: {stream['name']}\")\nprint(f\"State: {stream['state']}\")\nprint(f\"Source: {stream['sourceConfig']['sourceConnectionProfile']}\")\nprint(f\"Destination: {stream['destinationConfig']['destinationConnectionProfile']}\")\n</code></pre>"},{"location":"services/datastream/#deleting-a-stream","title":"Deleting a Stream","text":"<pre><code># Delete a stream\ndatastream.delete_stream(\n    stream_name=\"my-stream\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/datastream/#managing-stream-objects","title":"Managing Stream Objects","text":"<p>Stream objects represent the database objects (tables, schemas) that are being replicated by a stream.</p>"},{"location":"services/datastream/#listing-stream-objects","title":"Listing Stream Objects","text":"<pre><code># List all objects in a stream\nobjects = datastream.get_objects(\n    stream_name=\"my-stream\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor obj in objects:\n    print(f\"Object: {obj['displayName']}\")\n    print(f\"Source Type: {obj['sourceObject']['postgresqlTable']['table']}\")\n    print(f\"Backfill Status: {obj['backfillJob']['state']}\")\n</code></pre>"},{"location":"services/datastream/#getting-a-stream-object","title":"Getting a Stream Object","text":"<pre><code># Get information about a specific stream object\nobj = datastream.get_object(\n    object_id=\"my-object-id\",\n    stream_name=\"my-stream\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Object: {obj['displayName']}\")\nprint(f\"Source Type: {obj['sourceObject']['postgresqlTable']['table']}\")\nprint(f\"Backfill Status: {obj['backfillJob']['state']}\")\n</code></pre>"},{"location":"services/datastream/#finding-a-stream-object","title":"Finding a Stream Object","text":"<pre><code># Find a stream object by schema and table name\nobj = datastream.find_object(\n    schema=\"public\",\n    table=\"users\",\n    stream_name=\"my-stream\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Object: {obj['displayName']}\")\n</code></pre>"},{"location":"services/datastream/#managing-backfill-jobs","title":"Managing Backfill Jobs","text":"<p>Backfill jobs are used to replicate existing data from the source to the destination.</p>"},{"location":"services/datastream/#starting-a-backfill-job","title":"Starting a Backfill Job","text":"<pre><code># Start a backfill job for a specific table\nresponse = datastream.start_backfill(\n    schema=\"public\",\n    table=\"users\",\n    stream_name=\"my-stream\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Backfill job started: {response}\")\n</code></pre>"},{"location":"services/datastream/#stopping-a-backfill-job","title":"Stopping a Backfill Job","text":"<pre><code># Stop a backfill job for a specific table\nresponse = datastream.stop_backfill(\n    schema=\"public\",\n    table=\"users\",\n    stream_name=\"my-stream\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Backfill job stopped: {response}\")\n</code></pre>"},{"location":"services/datastream/#error-handling","title":"Error Handling","text":"<p>The Datastream class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    datastream.get_stream(stream_name=\"non-existent-stream\")\nexcept exceptions.NotFound:\n    print(\"Stream not found\")\n\ntry:\n    datastream.find_object(schema=\"non-existent\", table=\"non-existent\", stream_name=\"my-stream\")\nexcept exceptions.NotFound:\n    print(\"Object not found\")\n</code></pre>"},{"location":"services/datastream/#working-with-postgresql-sources","title":"Working with PostgreSQL Sources","text":"<p>The examples above focus on PostgreSQL sources, which is what the current implementation supports. The <code>find_object</code> method specifically looks for PostgreSQL identifiers. If you're working with other source types, you may need to modify the code or wait for future updates to the library.</p>"},{"location":"services/directory/","title":"Directory","text":"<p>Directory is a service that allows you to manage Google Workspace users and groups. The <code>Directory</code> class in gcp-pilot provides a high-level interface for interacting with Google Workspace Directory API.</p>"},{"location":"services/directory/#installation","title":"Installation","text":"<p>To use the Directory functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/directory/#usage","title":"Usage","text":""},{"location":"services/directory/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.directory import Directory\n\n# Initialize with default credentials and a specific email\ndirectory = Directory(email=\"admin@example.com\")\n\n# Initialize with service account impersonation\ndirectory = Directory(\n    email=\"admin@example.com\",\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n</code></pre> <p>The <code>email</code> parameter should be the email of a Google Workspace admin user that has permissions to manage users and groups.</p>"},{"location":"services/directory/#managing-groups","title":"Managing Groups","text":""},{"location":"services/directory/#listing-groups","title":"Listing Groups","text":"<pre><code># List all groups in the organization\ngroups = directory.get_groups()\nfor group in groups:\n    print(f\"Group: {group['name']}, Email: {group['email']}\")\n\n# List groups in a specific customer\ngroups = directory.get_groups(customer=\"C01234567\")\nfor group in groups:\n    print(f\"Group: {group['name']}, Email: {group['email']}\")\n\n# List groups in a specific domain\ngroups = directory.get_groups(domain=\"example.com\")\nfor group in groups:\n    print(f\"Group: {group['name']}, Email: {group['email']}\")\n</code></pre>"},{"location":"services/directory/#getting-a-group","title":"Getting a Group","text":"<pre><code># Get information about a specific group\ngroup = directory.get_group(group_id=\"group@example.com\")\nprint(f\"Group: {group['name']}\")\nprint(f\"Email: {group['email']}\")\nprint(f\"Description: {group['description']}\")\n</code></pre>"},{"location":"services/directory/#creating-and-updating-groups","title":"Creating and Updating Groups","text":"<pre><code># Create a new group\ngroup = directory.create_or_update_group(\n    email=\"newgroup@example.com\",\n    name=\"New Group\",\n    description=\"A new group for testing\"\n)\nprint(f\"Created group: {group['name']}\")\n\n# Update an existing group\ngroup = directory.create_or_update_group(\n    email=\"existinggroup@example.com\",\n    name=\"Updated Group Name\",\n    description=\"Updated description\"\n)\nprint(f\"Updated group: {group['name']}\")\n\n# Create or update a group with a specific ID\ngroup = directory.create_or_update_group(\n    email=\"group@example.com\",\n    name=\"Group Name\",\n    description=\"Group description\",\n    group_id=\"specific-group-id\"\n)\n</code></pre>"},{"location":"services/directory/#deleting-a-group","title":"Deleting a Group","text":"<pre><code># Delete a group\ndirectory.delete_group(group_id=\"group@example.com\")\n</code></pre>"},{"location":"services/directory/#managing-group-members","title":"Managing Group Members","text":""},{"location":"services/directory/#listing-group-members","title":"Listing Group Members","text":"<pre><code># List all members of a group\nmembers = directory.get_group_members(group_id=\"group@example.com\")\nfor member in members:\n    print(f\"Member: {member['email']}, Role: {member['role']}\")\n</code></pre>"},{"location":"services/directory/#adding-a-member-to-a-group","title":"Adding a Member to a Group","text":"<pre><code># Add a member to a group with the default role (MEMBER)\ndirectory.add_group_member(\n    group_id=\"group@example.com\",\n    email=\"user@example.com\"\n)\n\n# Add a member to a group with a specific role\ndirectory.add_group_member(\n    group_id=\"group@example.com\",\n    email=\"admin@example.com\",\n    role=\"OWNER\"  # Can be OWNER, MANAGER, or MEMBER\n)\n</code></pre>"},{"location":"services/directory/#removing-a-member-from-a-group","title":"Removing a Member from a Group","text":"<pre><code># Remove a member from a group\ndirectory.delete_group_member(\n    group_id=\"group@example.com\",\n    member_id=\"user@example.com\"\n)\n</code></pre>"},{"location":"services/directory/#managing-users","title":"Managing Users","text":""},{"location":"services/directory/#listing-users","title":"Listing Users","text":"<pre><code># List all users in the organization\nusers = directory.get_users()\nfor user in users:\n    print(f\"User: {user['name']['fullName']}, Email: {user['primaryEmail']}\")\n\n# List users in a specific customer\nusers = directory.get_users(customer=\"C01234567\")\nfor user in users:\n    print(f\"User: {user['name']['fullName']}, Email: {user['primaryEmail']}\")\n\n# List users in a specific domain\nusers = directory.get_users(domain=\"example.com\")\nfor user in users:\n    print(f\"User: {user['name']['fullName']}, Email: {user['primaryEmail']}\")\n</code></pre>"},{"location":"services/directory/#getting-a-user","title":"Getting a User","text":"<pre><code># Get information about a specific user\nuser = directory.get_user(user_id=\"user@example.com\")\nprint(f\"User: {user['name']['fullName']}\")\nprint(f\"Email: {user['primaryEmail']}\")\nprint(f\"Is Admin: {user.get('isAdmin', False)}\")\nprint(f\"Is Suspended: {user.get('suspended', False)}\")\n</code></pre>"},{"location":"services/directory/#creating-a-user","title":"Creating a User","text":"<pre><code># Add a new user\nuser = directory.add_user(\n    email=\"newuser@example.com\",\n    first_name=\"John\",\n    last_name=\"Doe\",\n    password=\"SecurePassword123\"\n)\nprint(f\"Created user: {user['name']['fullName']}\")\n</code></pre>"},{"location":"services/directory/#updating-a-user","title":"Updating a User","text":"<pre><code># Update a user's information\nuser = directory.update_user(\n    user_id=\"user@example.com\",\n    first_name=\"Jane\",\n    last_name=\"Smith\",\n    password=\"NewSecurePassword456\"\n)\nprint(f\"Updated user: {user['name']['fullName']}\")\n\n# Update a user's email\nuser = directory.update_user(\n    user_id=\"user@example.com\",\n    email=\"newuser@example.com\"\n)\nprint(f\"Updated user email: {user['primaryEmail']}\")\n\n# Suspend a user\nuser = directory.update_user(\n    user_id=\"user@example.com\",\n    suspended=True\n)\nprint(f\"User suspended: {user.get('suspended', False)}\")\n</code></pre>"},{"location":"services/directory/#deleting-and-undeleting-users","title":"Deleting and Undeleting Users","text":"<pre><code># Delete a user\ndirectory.delete_user(user_id=\"user@example.com\")\n\n# Undelete a recently deleted user\ndirectory.undelete_user(user_id=\"user@example.com\")\n</code></pre>"},{"location":"services/directory/#managing-user-status","title":"Managing User Status","text":"<pre><code># Suspend a user\ndirectory.suspend_user(user_id=\"user@example.com\")\n\n# Reestablish (unsuspend) a user\ndirectory.reestablish_user(user_id=\"user@example.com\")\n\n# Make a user an admin\ndirectory.make_admin(user_id=\"user@example.com\")\n\n# Remove admin privileges from a user\ndirectory.unmake_admin(user_id=\"user@example.com\")\n</code></pre>"},{"location":"services/directory/#error-handling","title":"Error Handling","text":"<p>The Directory class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    directory.get_user(user_id=\"non-existent-user@example.com\")\nexcept exceptions.NotFound:\n    print(\"User not found\")\n\ntry:\n    directory.get_group(group_id=\"non-existent-group@example.com\")\nexcept exceptions.NotFound:\n    print(\"Group not found\")\n</code></pre>"},{"location":"services/directory/#authentication-and-permissions","title":"Authentication and Permissions","text":"<p>To use the Directory API, you need:</p> <ol> <li>A Google Workspace account with admin privileges</li> <li>The Directory API enabled in your Google Cloud project</li> <li>A service account with domain-wide delegation enabled</li> <li>The service account granted the necessary OAuth scopes in the Google Workspace Admin Console</li> </ol> <p>The required OAuth scopes for the Directory API include: - <code>https://www.googleapis.com/auth/admin.directory.user</code> - <code>https://www.googleapis.com/auth/admin.directory.group</code></p> <p>For more information on setting up authentication, see the Authentication documentation.</p>"},{"location":"services/dns/","title":"Cloud DNS","text":"<p>Cloud DNS is a scalable, reliable, and managed authoritative Domain Name System (DNS) service running on the same infrastructure as Google. The <code>CloudDNS</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud DNS.</p>"},{"location":"services/dns/#installation","title":"Installation","text":"<p>To use the Cloud DNS functionality, you need to install gcp-pilot with the dns extra:</p> <pre><code>pip install gcp-pilot[dns]\n</code></pre>"},{"location":"services/dns/#usage","title":"Usage","text":""},{"location":"services/dns/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.dns import CloudDNS\n\n# Initialize with default credentials\ndns = CloudDNS()\n\n# Initialize with specific project\ndns = CloudDNS(project_id=\"my-project\")\n\n# Initialize with service account impersonation\ndns = CloudDNS(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/dns/#managing-dns-zones","title":"Managing DNS Zones","text":""},{"location":"services/dns/#listing-zones","title":"Listing Zones","text":"<pre><code># List all DNS zones in the project\nzones = dns.list_zones()\nfor zone in zones:\n    print(f\"Zone: {zone.name}, DNS Name: {zone.dns_name}\")\n</code></pre>"},{"location":"services/dns/#creating-a-zone","title":"Creating a Zone","text":"<pre><code># Create a new DNS zone\nzone = dns.create_zone(\n    name=\"my-zone\",  # The name of the zone in Cloud DNS\n    dns_name=\"example.com.\",  # The DNS name of the zone (must end with a period)\n    description=\"My DNS zone\",  # Optional: a description for the zone\n    exists_ok=True,  # Optional: if True, doesn't raise an error if the zone already exists\n)\nprint(f\"Created zone: {zone.name}, DNS Name: {zone.dns_name}\")\n</code></pre>"},{"location":"services/dns/#deleting-a-zone","title":"Deleting a Zone","text":"<pre><code># Delete a DNS zone\ndns.delete_zone(\n    name=\"my-zone\",  # The name of the zone in Cloud DNS\n    dns_name=\"example.com.\",  # The DNS name of the zone (must end with a period)\n    exists_ok=True,  # Optional: if True, doesn't raise an error if the zone doesn't exist\n)\n</code></pre>"},{"location":"services/dns/#managing-dns-records","title":"Managing DNS Records","text":""},{"location":"services/dns/#listing-records","title":"Listing Records","text":"<pre><code># List all records in a zone\nrecords = dns.list_records(\n    zone_name=\"my-zone\",  # The name of the zone in Cloud DNS\n    zone_dns=\"example.com.\",  # The DNS name of the zone (must end with a period)\n)\nfor record in records:\n    print(f\"Record: {record.name}, Type: {record.record_type}, Data: {record.rrdatas}\")\n</code></pre>"},{"location":"services/dns/#adding-records","title":"Adding Records","text":"<pre><code>from gcp_pilot.dns import CloudDNS, RecordType\n\n# Add an A record\ndns.add_record(\n    zone_name=\"my-zone\",  # The name of the zone in Cloud DNS\n    zone_dns=\"example.com.\",  # The DNS name of the zone (must end with a period)\n    name=\"www\",  # The name of the record (without the domain)\n    record_type=RecordType.A,  # The type of record\n    record_data=[\"192.0.2.1\"],  # The IP address(es) for the A record\n    ttl=300,  # Optional: TTL in seconds (default: 300)\n    wait=True,  # Optional: wait for the change to propagate (default: True)\n    exists_ok=True,  # Optional: don't raise an error if the record already exists (default: True)\n)\n\n# Add a CNAME record\ndns.add_record(\n    zone_name=\"my-zone\",\n    zone_dns=\"example.com.\",\n    name=\"blog\",\n    record_type=RecordType.CNAME,\n    record_data=[\"www.example.com.\"],  # The target domain (must end with a period)\n    ttl=300,\n)\n\n# Add an MX record\ndns.add_record(\n    zone_name=\"my-zone\",\n    zone_dns=\"example.com.\",\n    name=\"\",  # Empty string for the root domain\n    record_type=RecordType.MX,\n    record_data=[\"10 mail.example.com.\"],  # Priority and mail server\n    ttl=3600,\n)\n\n# Add a TXT record\ndns.add_record(\n    zone_name=\"my-zone\",\n    zone_dns=\"example.com.\",\n    name=\"\",  # Empty string for the root domain\n    record_type=RecordType.TXT,\n    record_data=[\"v=spf1 include:_spf.example.com ~all\"],\n    ttl=3600,\n)\n</code></pre>"},{"location":"services/dns/#deleting-records","title":"Deleting Records","text":"<pre><code>from gcp_pilot.dns import CloudDNS, RecordType\n\n# Delete an A record\ndns.delete_record(\n    zone_name=\"my-zone\",  # The name of the zone in Cloud DNS\n    zone_dns=\"example.com.\",  # The DNS name of the zone (must end with a period)\n    name=\"www\",  # The name of the record (without the domain)\n    record_type=RecordType.A,  # The type of record\n    wait=True,  # Optional: wait for the change to propagate (default: True)\n)\n\n# Delete a CNAME record\ndns.delete_record(\n    zone_name=\"my-zone\",\n    zone_dns=\"example.com.\",\n    name=\"blog\",\n    record_type=RecordType.CNAME,\n)\n</code></pre>"},{"location":"services/dns/#record-types","title":"Record Types","text":"<p>The <code>RecordType</code> enum provides the supported DNS record types:</p> <pre><code>from gcp_pilot.dns import RecordType\n\n# Available record types\nRecordType.A      # Address record (maps a domain to an IPv4 address)\nRecordType.CNAME  # Canonical name record (maps a domain to another domain)\nRecordType.MX     # Mail exchange record (specifies mail servers)\nRecordType.TXT    # Text record (stores text information)\n</code></pre> <p>The <code>RecordType</code> class also provides helper methods for preparing record data:</p> <pre><code>from gcp_pilot.dns import RecordType\n\n# Build a DNS name (ensure it ends with a period)\ndns_name = RecordType.build_dns_name(\"example.com\")  # Returns \"example.com.\"\ndns_name = RecordType.build_dns_name(\"example.com.\")  # Returns \"example.com.\"\n\n# Prepare record data based on the record type\ncname_record = RecordType.prepare(RecordType.CNAME, \"example.com\")  # Returns \"example.com.\"\n</code></pre>"},{"location":"services/dns/#error-handling","title":"Error Handling","text":"<p>The CloudDNS class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    # Try to create a zone that already exists\n    dns.create_zone(name=\"existing-zone\", dns_name=\"example.com.\", exists_ok=False)\nexcept exceptions.AlreadyExists:\n    print(\"Zone already exists\")\n\ntry:\n    # Try to add a record that already exists\n    dns.add_record(\n        zone_name=\"my-zone\",\n        zone_dns=\"example.com.\",\n        name=\"www\",\n        record_type=RecordType.A,\n        record_data=[\"192.0.2.1\"],\n        exists_ok=False,\n    )\nexcept exceptions.AlreadyExists:\n    print(\"Record already exists\")\n\ntry:\n    # Try to delete a zone that doesn't exist\n    dns.delete_zone(name=\"non-existent-zone\", dns_name=\"example.com.\", exists_ok=False)\nexcept exceptions.NotFound:\n    print(\"Zone not found\")\n</code></pre>"},{"location":"services/dns/#waiting-for-changes","title":"Waiting for Changes","text":"<p>DNS changes can take time to propagate. By default, the <code>add_record</code> and <code>delete_record</code> methods wait for the changes to complete before returning. You can disable this behavior by setting <code>wait=False</code>:</p> <pre><code># Add a record without waiting for the change to complete\ndns.add_record(\n    zone_name=\"my-zone\",\n    zone_dns=\"example.com.\",\n    name=\"www\",\n    record_type=RecordType.A,\n    record_data=[\"192.0.2.1\"],\n    wait=False,\n)\n</code></pre> <p>When <code>wait=True</code> (the default), the method will poll the change status every 60 seconds until it's complete.</p>"},{"location":"services/error_reporting/","title":"Error Reporting","text":"<p>Error Reporting is a service that aggregates and displays errors produced in your running cloud services. The <code>CloudErrorReporting</code> and <code>CloudErrorExplorer</code> classes in gcp-pilot provide high-level interfaces for interacting with Google Cloud Error Reporting.</p>"},{"location":"services/error_reporting/#installation","title":"Installation","text":"<p>To use the Error Reporting functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/error_reporting/#usage","title":"Usage","text":""},{"location":"services/error_reporting/#clouderrorreporting","title":"CloudErrorReporting","text":"<p>The <code>CloudErrorReporting</code> class allows you to report errors to Google Cloud Error Reporting.</p>"},{"location":"services/error_reporting/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.error_reporting import CloudErrorReporting\n\n# Initialize with a service name\nerror_reporting = CloudErrorReporting(service_name=\"my-service\")\n\n# Initialize with service account impersonation\nerror_reporting = CloudErrorReporting(\n    service_name=\"my-service\",\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n</code></pre> <p>The <code>service_name</code> parameter is required and identifies the service that is reporting the error.</p>"},{"location":"services/error_reporting/#reporting-errors","title":"Reporting Errors","text":"<pre><code># Report a simple error message\nerror_reporting.report(message=\"An error occurred\")\n\n# Report an error with user information\nerror_reporting.report(\n    message=\"An error occurred for a specific user\",\n    user=\"user@example.com\"\n)\n\n# Report an error with HTTP context\nfrom google.cloud.error_reporting import HTTPContext\n\nhttp_context = HTTPContext(\n    url=\"https://example.com/path\",\n    method=\"GET\",\n    user_agent=\"Mozilla/5.0\",\n    referrer=\"https://example.com\",\n    response_status_code=500\n)\n\nerror_reporting.report(\n    message=\"An HTTP error occurred\",\n    http_context=http_context\n)\n</code></pre>"},{"location":"services/error_reporting/#reporting-errors-with-wsgi-requests","title":"Reporting Errors with WSGI Requests","text":"<p>If you're using a WSGI-compatible web framework like Django or Flask, you can report errors with the request context:</p> <pre><code># Report an exception with a WSGI request\ntry:\n    # Some code that might raise an exception\n    raise ValueError(\"Something went wrong\")\nexcept Exception:\n    error_reporting.report_with_request(\n        request=request,  # A WSGI request object\n        status_code=500\n    )\n\n# Report a specific message with a WSGI request\nerror_reporting.report_with_request(\n    request=request,  # A WSGI request object\n    status_code=400,\n    message=\"Invalid request parameters\"\n)\n</code></pre>"},{"location":"services/error_reporting/#clouderrorexplorer","title":"CloudErrorExplorer","text":"<p>The <code>CloudErrorExplorer</code> class allows you to explore errors that have been reported to Google Cloud Error Reporting.</p>"},{"location":"services/error_reporting/#initialization_1","title":"Initialization","text":"<pre><code>from gcp_pilot.error_reporting import CloudErrorExplorer\n\n# Initialize with default credentials\nerror_explorer = CloudErrorExplorer()\n\n# Initialize with specific project\nerror_explorer = CloudErrorExplorer(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nerror_explorer = CloudErrorExplorer(\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n</code></pre>"},{"location":"services/error_reporting/#getting-error-events","title":"Getting Error Events","text":"<pre><code># Get all error events\nevents = error_explorer.get_events()\nfor event in events:\n    print(f\"Error: {event['message']}\")\n    print(f\"Time: {event['eventTime']}\")\n    print(f\"Service: {event['serviceContext']['service']}\")\n\n# Get error events for a specific error group\nevents = error_explorer.get_events(error_id=\"error-group-id\")\nfor event in events:\n    print(f\"Error: {event['message']}\")\n\n# Get error events for a specific service\nevents = error_explorer.get_events(service_name=\"my-service\")\nfor event in events:\n    print(f\"Error: {event['message']}\")\n\n# Get error events with multiple filters\nevents = error_explorer.get_events(\n    service_name=\"my-service\",\n    service_version=\"v1.0\",\n    resource_type=\"gae_app\",\n    project_id=\"my-project\"  # Optional: defaults to the project associated with credentials\n)\nfor event in events:\n    print(f\"Error: {event['message']}\")\n</code></pre>"},{"location":"services/error_reporting/#getting-error-groups","title":"Getting Error Groups","text":"<pre><code># Get all error groups\nerrors = error_explorer.get_errors()\nfor error in errors:\n    print(f\"Error Group ID: {error['id']}\")\n    print(f\"Count: {error['count']}\")\n    print(f\"First Seen: {error['firstSeenTime']}\")\n    print(f\"Last Seen: {error['lastSeenTime']}\")\n\n# Get error groups for a specific service\nerrors = error_explorer.get_errors(service_name=\"my-service\")\nfor error in errors:\n    print(f\"Error Group ID: {error['id']}\")\n\n# Get error groups with multiple filters\nerrors = error_explorer.get_errors(\n    service_name=\"my-service\",\n    service_version=\"v1.0\",\n    resource_type=\"gae_app\",\n    project_id=\"my-project\"  # Optional: defaults to the project associated with credentials\n)\nfor error in errors:\n    print(f\"Error Group ID: {error['id']}\")\n</code></pre>"},{"location":"services/error_reporting/#error-handling","title":"Error Handling","text":"<p>The Error Reporting classes handle common errors and convert them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    error_explorer.get_events(error_id=\"non-existent-id\")\nexcept exceptions.NotFound:\n    print(\"Error group not found\")\n</code></pre>"},{"location":"services/error_reporting/#integration-with-web-frameworks","title":"Integration with Web Frameworks","text":""},{"location":"services/error_reporting/#django-integration","title":"Django Integration","text":"<p>Here's an example of how to integrate Error Reporting with Django:</p> <pre><code># In your Django middleware\nfrom gcp_pilot.error_reporting import CloudErrorReporting\n\nclass ErrorReportingMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n        self.error_reporting = CloudErrorReporting(service_name=\"my-django-app\")\n\n    def __call__(self, request):\n        try:\n            response = self.get_response(request)\n            return response\n        except Exception as e:\n            self.error_reporting.report_with_request(\n                request=request,\n                status_code=500\n            )\n            raise\n</code></pre>"},{"location":"services/error_reporting/#flask-integration","title":"Flask Integration","text":"<p>Here's an example of how to integrate Error Reporting with Flask:</p> <pre><code># In your Flask app\nfrom flask import Flask, request\nfrom gcp_pilot.error_reporting import CloudErrorReporting\n\napp = Flask(__name__)\nerror_reporting = CloudErrorReporting(service_name=\"my-flask-app\")\n\n@app.errorhandler(Exception)\ndef handle_exception(e):\n    error_reporting.report_with_request(\n        request=request,\n        status_code=500\n    )\n    return \"An error occurred\", 500\n</code></pre>"},{"location":"services/functions/","title":"Cloud Functions","text":"<p>Cloud Functions is a serverless execution environment for building and connecting cloud services. The <code>CloudFunctions</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Functions.</p>"},{"location":"services/functions/#installation","title":"Installation","text":"<p>To use the Cloud Functions functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/functions/#usage","title":"Usage","text":""},{"location":"services/functions/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.functions import CloudFunctions\n\n# Initialize with default credentials\nfunctions = CloudFunctions()\n\n# Initialize with specific project\nfunctions = CloudFunctions(project_id=\"my-project\")\n\n# Initialize with specific location\nfunctions = CloudFunctions(location=\"us-central1\")\n\n# Initialize with service account impersonation\nfunctions = CloudFunctions(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/functions/#listing-functions","title":"Listing Functions","text":"<pre><code># List all functions in a project\nfunctions_list = functions.get_functions()\nfor function in functions_list:\n    print(f\"Function: {function['name']}\")\n\n# List functions in a specific location\nfunctions_list = functions.get_functions(location=\"us-central1\")\nfor function in functions_list:\n    print(f\"Function: {function['name']}\")\n\n# List functions in a specific project\nfunctions_list = functions.get_functions(project_id=\"my-project\")\nfor function in functions_list:\n    print(f\"Function: {function['name']}\")\n</code></pre>"},{"location":"services/functions/#getting-a-function","title":"Getting a Function","text":"<pre><code># Get information about a specific function\nfunction = functions.get_function(\n    name=\"my-function\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Function: {function['name']}\")\nprint(f\"Description: {function['description']}\")\nprint(f\"Entry Point: {function['entryPoint']}\")\nprint(f\"Runtime: {function['runtime']}\")\n</code></pre>"},{"location":"services/functions/#creating-or-updating-a-function","title":"Creating or Updating a Function","text":"<pre><code># Create a new function\nfunction = functions.create_or_update_function(\n    name=\"my-function\",\n    description=\"My Cloud Function\",\n    entry_point=\"main\",  # The name of the function to execute\n    repo_name=\"my-repo\",  # The name of the repository containing the function code\n    runtime=\"python39\",  # Optional: defaults to \"python39\"\n    timeout=60,  # Optional: timeout in seconds, defaults to 60\n    ram=128,  # Optional: memory in MB, defaults to 128\n    repo_branch=\"main\",  # Optional: the branch to use, defaults to \"master\"\n    repo_tag=None,  # Optional: the tag to use\n    repo_commit=None,  # Optional: the commit to use\n    repo_directory=None,  # Optional: the directory containing the function code\n    labels={\"environment\": \"production\"},  # Optional: labels to apply to the function\n    env_vars={\"DEBUG\": \"True\"},  # Optional: environment variables for the function\n    max_instances=10,  # Optional: maximum number of instances\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n    service_account_email=\"service-account@project-id.iam.gserviceaccount.com\",  # Optional: service account to use\n    is_public=False,  # Optional: if True, makes the function publicly accessible\n)\nprint(f\"Function created/updated: {function['name']}\")\n\n# Update an existing function\nfunction = functions.create_or_update_function(\n    name=\"my-function\",\n    description=\"Updated description\",\n    entry_point=\"main\",\n    repo_name=\"my-repo\",\n    runtime=\"python310\",  # Updated runtime\n    timeout=120,  # Updated timeout\n    ram=256,  # Updated memory\n    repo_branch=\"develop\",  # Updated branch\n    labels={\"environment\": \"staging\"},  # Updated labels\n    env_vars={\"DEBUG\": \"False\"},  # Updated environment variables\n    max_instances=5,  # Updated maximum instances\n    is_public=True,  # Updated accessibility\n)\nprint(f\"Function updated: {function['name']}\")\n</code></pre>"},{"location":"services/functions/#managing-function-permissions","title":"Managing Function Permissions","text":"<pre><code># Get the current permissions for a function\npolicy = functions.get_permissions(\n    name=\"my-function\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Policy: {policy}\")\n\n# Make a function publicly accessible\npolicy = functions.set_permissions(\n    name=\"my-function\",\n    is_public=True,\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated policy: {policy}\")\n\n# Make a function private\npolicy = functions.set_permissions(\n    name=\"my-function\",\n    is_public=False,\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated policy: {policy}\")\n</code></pre>"},{"location":"services/functions/#deleting-a-function","title":"Deleting a Function","text":"<pre><code># Delete a function\nfunction = functions.delete_function(\n    name=\"my-function\",\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Function deleted: {function['name']}\")\n</code></pre>"},{"location":"services/functions/#building-repository-sources","title":"Building Repository Sources","text":"<p>The <code>build_repo_source</code> method is a helper method for building the source repository configuration for a function. It's used internally by the <code>create_or_update_function</code> method, but you can also use it directly:</p> <pre><code># Build a repository source for a function\nrepo_source = CloudFunctions.build_repo_source(\n    name=\"my-repo\",\n    branch=\"main\",  # Optional: defaults to \"master\"\n    tag=None,  # Optional: the tag to use\n    commit=None,  # Optional: the commit to use\n    directory=\"functions/my-function\",  # Optional: the directory containing the function code\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Repository source URL: {repo_source['url']}\")\n\n# Build a repository source for a GitHub repository\nrepo_source = CloudFunctions.build_repo_source(\n    name=\"organization/repo\",  # GitHub repository in the format \"organization/repo\"\n    branch=\"main\",\n    project_id=\"my-project\",\n)\nprint(f\"Repository source URL: {repo_source['url']}\")\n</code></pre>"},{"location":"services/functions/#error-handling","title":"Error Handling","text":"<p>The CloudFunctions class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    functions.get_function(name=\"non-existent-function\")\nexcept exceptions.NotFound:\n    print(\"Function not found\")\n\ntry:\n    CloudFunctions.build_repo_source(name=\"my-repo\", branch=\"main\", tag=\"v1.0\")\nexcept exceptions.ValidationError:\n    print(\"Only one of branch, tag, or commit can be provided\")\n</code></pre>"},{"location":"services/functions/#working-with-github-repositories","title":"Working with GitHub Repositories","text":"<p>The CloudFunctions class supports working with GitHub repositories that are integrated with Google Cloud Source Repositories through the GitHub App:</p> <pre><code># Create a function using a GitHub repository\nfunction = functions.create_or_update_function(\n    name=\"my-function\",\n    description=\"Function from GitHub\",\n    entry_point=\"main\",\n    repo_name=\"organization/repo\",  # GitHub repository in the format \"organization/repo\"\n    repo_branch=\"main\",\n    repo_directory=\"functions/my-function\",  # Optional: the directory containing the function code\n)\nprint(f\"Function created/updated: {function['name']}\")\n</code></pre>"},{"location":"services/functions/#supported-runtimes","title":"Supported Runtimes","text":"<p>The CloudFunctions class supports various runtimes for Cloud Functions:</p> <ul> <li><code>python37</code>: Python 3.7</li> <li><code>python38</code>: Python 3.8</li> <li><code>python39</code>: Python 3.9</li> <li><code>python310</code>: Python 3.10</li> <li><code>nodejs10</code>: Node.js 10</li> <li><code>nodejs12</code>: Node.js 12</li> <li><code>nodejs14</code>: Node.js 14</li> <li><code>nodejs16</code>: Node.js 16</li> <li><code>go113</code>: Go 1.13</li> <li><code>go116</code>: Go 1.16</li> <li><code>java11</code>: Java 11</li> <li><code>dotnet3</code>: .NET Core 3.1</li> <li><code>ruby27</code>: Ruby 2.7</li> </ul> <p>You can specify the runtime when creating or updating a function:</p> <pre><code>function = functions.create_or_update_function(\n    name=\"my-function\",\n    description=\"My Cloud Function\",\n    entry_point=\"main\",\n    repo_name=\"my-repo\",\n    runtime=\"python310\",  # Specify the runtime\n)\n</code></pre>"},{"location":"services/healthcare/","title":"Healthcare API","text":"<p>The Healthcare API is a service that enables secure storage, processing, and machine learning for healthcare data. The <code>HealthcareBase</code> and <code>HealthcareFHIR</code> classes in gcp-pilot provide high-level interfaces for interacting with Google Cloud Healthcare API, with a focus on FHIR (Fast Healthcare Interoperability Resources) data.</p>"},{"location":"services/healthcare/#installation","title":"Installation","text":"<p>To use the Healthcare API functionality, you need to install gcp-pilot with the healthcare extra:</p> <pre><code>pip install gcp-pilot[healthcare]\n</code></pre>"},{"location":"services/healthcare/#usage","title":"Usage","text":""},{"location":"services/healthcare/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.healthcare import HealthcareFHIR\n\n# Initialize with default credentials\nhealthcare = HealthcareFHIR()\n\n# Initialize with specific project\nhealthcare = HealthcareFHIR(project_id=\"my-project\")\n\n# Initialize with specific location\nhealthcare = HealthcareFHIR(location=\"us-central1\")\n\n# Initialize with service account impersonation\nhealthcare = HealthcareFHIR(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre> <p>Note: The Healthcare API is only available in specific regions. If you specify a region that is not supported, the API will default to the multi-region \"us\".</p>"},{"location":"services/healthcare/#managing-datasets","title":"Managing Datasets","text":""},{"location":"services/healthcare/#listing-datasets","title":"Listing Datasets","text":"<pre><code># List all datasets in a project\ndatasets = healthcare.list_datasets(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nfor dataset in datasets:\n    print(f\"Dataset: {dataset['name']}\")\n</code></pre>"},{"location":"services/healthcare/#getting-a-dataset","title":"Getting a Dataset","text":"<pre><code># Get information about a specific dataset\ndataset = healthcare.get_dataset(\n    name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Dataset: {dataset['name']}\")\n</code></pre>"},{"location":"services/healthcare/#creating-a-dataset","title":"Creating a Dataset","text":"<pre><code># Create a new dataset\ndataset = healthcare.create_dataset(\n    name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Dataset created: {dataset['name']}\")\n</code></pre>"},{"location":"services/healthcare/#deleting-a-dataset","title":"Deleting a Dataset","text":"<pre><code># Delete a dataset\nhealthcare.delete_dataset(\n    name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\n</code></pre>"},{"location":"services/healthcare/#managing-fhir-stores","title":"Managing FHIR Stores","text":""},{"location":"services/healthcare/#listing-fhir-stores","title":"Listing FHIR Stores","text":"<pre><code># List all FHIR stores in a dataset\nstores = healthcare.list_stores(\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nfor store in stores:\n    print(f\"Store: {store['name']}\")\n</code></pre>"},{"location":"services/healthcare/#getting-a-fhir-store","title":"Getting a FHIR Store","text":"<pre><code># Get information about a specific FHIR store\nstore = healthcare.get_store(\n    name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Store: {store['name']}\")\n</code></pre>"},{"location":"services/healthcare/#creating-a-fhir-store","title":"Creating a FHIR Store","text":"<pre><code># Create a new FHIR store\nstore = healthcare.create_store(\n    name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    labels={\"environment\": \"production\"},  # Optional: labels to apply to the store\n    enable_upsert=True,  # Optional: if True, enables update-as-create semantics\n    notify_pubsub_topic=\"my-topic\",  # Optional: Pub/Sub topic for notifications\n    notify_pubsub_full_resource=False,  # Optional: if True, sends the full resource in notifications\n    notify_pubsub_deletion=True,  # Optional: if True, sends notifications for deletions\n    export_to_bigquery_dataset=\"my-bq-dataset\",  # Optional: BigQuery dataset for streaming exports\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n    version=\"R4\",  # Optional: FHIR version, defaults to \"R4\"\n)\nprint(f\"Store created: {store['name']}\")\n</code></pre>"},{"location":"services/healthcare/#updating-a-fhir-store","title":"Updating a FHIR Store","text":"<pre><code># Update an existing FHIR store\nstore = healthcare.update_store(\n    name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    labels={\"environment\": \"staging\"},  # Optional: new labels to apply to the store\n    notify_pubsub_topic=\"my-new-topic\",  # Optional: new Pub/Sub topic for notifications\n    notify_pubsub_full_resource=True,  # Optional: if True, sends the full resource in notifications\n    notify_pubsub_deletion=True,  # Optional: if True, sends notifications for deletions\n    export_to_bigquery_dataset=\"my-new-bq-dataset\",  # Optional: new BigQuery dataset for streaming exports\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Store updated: {store['name']}\")\n</code></pre>"},{"location":"services/healthcare/#deleting-a-fhir-store","title":"Deleting a FHIR Store","text":"<pre><code># Delete a FHIR store\nhealthcare.delete_store(\n    name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\n</code></pre>"},{"location":"services/healthcare/#managing-fhir-resources","title":"Managing FHIR Resources","text":""},{"location":"services/healthcare/#listing-resources","title":"Listing Resources","text":"<pre><code>from fhir.resources.patient import Patient\n\n# List all Patient resources in a FHIR store\npatients = healthcare.list_resources(\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    resource_class=Patient,\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n    query={\"name\": \"John\"},  # Optional: query parameters to filter resources\n    limit=100,  # Optional: maximum number of resources to return per page\n    cursor=None,  # Optional: cursor for pagination\n)\n\n# Iterate through all patients\nfor patient in patients:\n    print(f\"Patient: {patient.id}\")\n    print(f\"Name: {patient.name[0].given[0]} {patient.name[0].family}\")\n\n# Get the first patient\ntry:\n    first_patient = patients.first()\n    print(f\"First patient: {first_patient.id}\")\nexcept exceptions.NotFound:\n    print(\"No patients found\")\n</code></pre>"},{"location":"services/healthcare/#getting-a-resource","title":"Getting a Resource","text":"<pre><code>from fhir.resources.patient import Patient\n\n# Get a specific Patient resource\npatient = healthcare.get_resource(\n    resource_class=Patient,\n    resource_id=\"patient-id\",\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Patient: {patient.id}\")\nprint(f\"Name: {patient.name[0].given[0]} {patient.name[0].family}\")\n</code></pre>"},{"location":"services/healthcare/#creating-a-resource","title":"Creating a Resource","text":"<pre><code>from fhir.resources.patient import Patient\nfrom fhir.resources.humanname import HumanName\nfrom fhir.resources.identifier import Identifier\n\n# Create a new Patient resource\npatient = Patient(\n    id=\"patient-id\",\n    identifier=[\n        Identifier(\n            system=\"http://example.org/fhir/ids\",\n            value=\"12345\"\n        )\n    ],\n    name=[\n        HumanName(\n            given=[\"John\"],\n            family=\"Doe\"\n        )\n    ]\n)\n\n# Create the patient in the FHIR store\ncreated_patient = healthcare.create_resource(\n    resource=patient,\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Patient created: {created_patient.id}\")\n</code></pre>"},{"location":"services/healthcare/#updating-a-resource","title":"Updating a Resource","text":"<pre><code># Update an existing Patient resource\npatient.name[0].family = \"Smith\"\nupdated_patient = healthcare.update_resource(\n    resource=patient,\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Patient updated: {updated_patient.id}\")\n</code></pre>"},{"location":"services/healthcare/#patch-updating-a-resource","title":"Patch Updating a Resource","text":"<pre><code># Patch update a Patient resource\nupdated_patient = healthcare.patch_update(\n    resource_class=Patient,\n    data={\"name\": [{\"given\": [\"John\"], \"family\": \"Smith\"}]},\n    resource_id=\"patient-id\",\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Patient patched: {updated_patient.id}\")\n</code></pre>"},{"location":"services/healthcare/#conditional-patch-update","title":"Conditional Patch Update","text":"<pre><code># Conditionally patch update a Patient resource\nupdated_patient = healthcare.conditional_patch_resource(\n    resource_class=Patient,\n    query={\"identifier\": \"http://example.org/fhir/ids|12345\"},\n    json_patch=[\n        {\"op\": \"replace\", \"path\": \"/name/0/family\", \"value\": \"Smith\"}\n    ],\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Patient conditionally patched: {updated_patient.id}\")\n</code></pre>"},{"location":"services/healthcare/#creating-or-updating-a-resource","title":"Creating or Updating a Resource","text":"<pre><code># Create or update a Patient resource\npatient = Patient(\n    identifier=[\n        Identifier(\n            system=\"http://example.org/fhir/ids\",\n            value=\"12345\"\n        )\n    ],\n    name=[\n        HumanName(\n            given=[\"John\"],\n            family=\"Doe\"\n        )\n    ]\n)\n\n# Create or update the patient in the FHIR store\npatient = healthcare.create_or_update_resource(\n    resource=patient,\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    query={\"identifier\": \"http://example.org/fhir/ids|12345\"},  # Optional: query to find existing resource\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Patient created or updated: {patient.id}\")\n</code></pre>"},{"location":"services/healthcare/#deleting-a-resource","title":"Deleting a Resource","text":"<pre><code># Delete a Patient resource\nhealthcare.delete_resource(\n    resource_class=Patient,\n    resource_id=\"patient-id\",\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\n</code></pre>"},{"location":"services/healthcare/#resource-history","title":"Resource History","text":"<pre><code># Get the history of a Patient resource\nhistory = healthcare.get_resource_history(\n    resource_class=Patient,\n    resource_id=\"patient-id\",\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\n\nfor method, version in history:\n    print(f\"Method: {method}\")\n    if version:\n        print(f\"Version: {version.id}\")\n        print(f\"Name: {version.name[0].given[0]} {version.name[0].family}\")\n</code></pre>"},{"location":"services/healthcare/#validating-resources","title":"Validating Resources","text":"<pre><code># Validate a Patient resource\ntry:\n    healthcare.validate_resource(\n        resource=patient,\n        store_name=\"my-store\",\n        dataset_name=\"my-dataset\",\n        project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n        location=\"us-central1\",  # Optional: defaults to the default location\n    )\n    print(\"Resource is valid\")\nexcept exceptions.ValidationError as e:\n    print(f\"Validation errors: {e}\")\n</code></pre>"},{"location":"services/healthcare/#importing-and-exporting-resources","title":"Importing and Exporting Resources","text":""},{"location":"services/healthcare/#exporting-resources","title":"Exporting Resources","text":"<pre><code># Export FHIR resources to Google Cloud Storage\nexport_info = healthcare.export_resources(\n    gcs_path=\"my-bucket/exports\",\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n    resource_names=[\"Patient\", \"Observation\"],  # Optional: specific resource types to export\n)\nprint(f\"Export operation ID: {export_info['operation_id']}\")\n\n# Check the status of the export operation\noperation = healthcare.get_operation(\n    operation_id=export_info[\"operation_id\"],\n    dataset_name=export_info[\"dataset_name\"],\n    project_id=export_info[\"project_id\"],\n    location=export_info[\"location\"],\n)\nprint(f\"Operation status: {operation['metadata']['state']}\")\n</code></pre>"},{"location":"services/healthcare/#importing-resources","title":"Importing Resources","text":"<pre><code># Import FHIR resources from Google Cloud Storage\nimport_operation = healthcare.import_resources(\n    gcs_path=\"my-bucket/imports/resources.ndjson\",\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Import operation: {import_operation['name']}\")\n</code></pre>"},{"location":"services/healthcare/#natural-language-processing","title":"Natural Language Processing","text":"<pre><code># Analyze medical entities in text using NLP\nentities = healthcare.analyze_entities(\n    content=\"Patient has a history of hypertension and type 2 diabetes.\",\n    use_idc10=True,  # Optional: if True, includes ICD-10 codes\n    use_snomed=True,  # Optional: if True, includes SNOMED CT codes\n    location=\"us-central1\",  # Optional: defaults to the default location\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    fhir_output=True,  # Optional: if True, returns results as FHIR resources\n)\nprint(f\"Entities: {entities}\")\n</code></pre>"},{"location":"services/healthcare/#configuring-search","title":"Configuring Search","text":"<pre><code># Configure search for a FHIR store\nsearch_config = healthcare.configure_search(\n    canonical_urls=[\"http://hl7.org/fhir/StructureDefinition/Patient\"],\n    store_name=\"my-store\",\n    dataset_name=\"my-dataset\",\n    validate_only=False,  # Optional: if True, validates the configuration without applying it\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Search configuration: {search_config}\")\n</code></pre>"},{"location":"services/healthcare/#error-handling","title":"Error Handling","text":"<p>The Healthcare classes handle common errors and convert them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    healthcare.get_dataset(name=\"non-existent-dataset\")\nexcept exceptions.NotFound:\n    print(\"Dataset not found\")\n\ntry:\n    healthcare.create_or_update_resource(\n        resource=patient,\n        store_name=\"my-store\",\n        dataset_name=\"my-dataset\",\n        query={\"identifier\": \"http://example.org/fhir/ids|12345\"},\n    )\nexcept exceptions.FailedPrecondition as e:\n    print(f\"Failed precondition: {e}\")\n\ntry:\n    healthcare.validate_resource(\n        resource=invalid_patient,\n        store_name=\"my-store\",\n        dataset_name=\"my-dataset\",\n    )\nexcept exceptions.ValidationError as e:\n    print(f\"Validation errors: {e}\")\n</code></pre>"},{"location":"services/healthcare/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nhealthcare = HealthcareFHIR(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\ndatasets = healthcare.list_datasets()\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/healthcare/#best-practices","title":"Best Practices","text":"<p>Here are some best practices for working with the Healthcare API:</p> <ol> <li>Use appropriate regions: Choose a region that complies with your data residency requirements and is close to your users.</li> <li>Implement proper access controls: Use IAM to restrict access to healthcare datasets and FHIR stores.</li> <li>Enable audit logging: Set up audit logging to track access to sensitive healthcare data.</li> <li>Use FHIR validation: Validate resources before storing them to ensure data quality.</li> <li>Configure notifications: Set up Pub/Sub notifications for important events like resource creation and deletion.</li> <li>Stream to BigQuery: Enable streaming to BigQuery for real-time analytics on healthcare data.</li> <li>Use conditional operations: Use conditional operations to avoid race conditions when updating resources.</li> <li>Implement proper error handling: Handle errors appropriately, especially for validation and precondition failures.</li> <li>Regularly export data: Set up regular exports to Google Cloud Storage for backup and disaster recovery.</li> <li>Monitor API usage: Set up monitoring and alerting for API usage to detect and respond to issues quickly.</li> </ol>"},{"location":"services/iam/","title":"IAM (Identity and Access Management)","text":"<p>IAM (Identity and Access Management) is a service that allows you to manage access control to your Google Cloud resources. The <code>IdentityAccessManager</code> and <code>IAMCredentials</code> classes in gcp-pilot provide high-level interfaces for interacting with Google Cloud IAM.</p>"},{"location":"services/iam/#installation","title":"Installation","text":"<p>To use the IAM functionality, you need to install gcp-pilot with the iam extra:</p> <pre><code>pip install gcp-pilot[iam]\n</code></pre>"},{"location":"services/iam/#usage","title":"Usage","text":""},{"location":"services/iam/#identityaccessmanager","title":"IdentityAccessManager","text":"<p>The <code>IdentityAccessManager</code> class allows you to manage service accounts and their keys, as well as IAM policies.</p>"},{"location":"services/iam/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.iam import IdentityAccessManager\n\n# Initialize with default credentials\niam = IdentityAccessManager()\n\n# Initialize with specific project\niam = IdentityAccessManager(project_id=\"my-project\")\n\n# Initialize with service account impersonation\niam = IdentityAccessManager(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/iam/#managing-service-accounts","title":"Managing Service Accounts","text":"<pre><code># Create a service account\nservice_account = iam.create_service_account(\n    name=\"my-service-account\",\n    display_name=\"My Service Account\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    exists_ok=True,  # Optional: if True, returns the existing service account if it already exists\n)\nprint(f\"Service Account: {service_account['email']}\")\n\n# Get a service account\nservice_account = iam.get_service_account(\n    name=\"my-service-account\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Service Account: {service_account['email']}\")\n\n# List all service accounts in a project\nservice_accounts = iam.list_service_accounts(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor account in service_accounts:\n    print(f\"Service Account: {account['email']}\")\n</code></pre>"},{"location":"services/iam/#managing-service-account-keys","title":"Managing Service Account Keys","text":"<pre><code># Create a key for a service account\nkey = iam.create_key(\n    service_account_name=\"my-service-account\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Key ID: {key['id']}\")\nprint(f\"Private Key JSON: {key['json']}\")\n\n# List keys for a service account\nkeys = iam.list_keys(\n    service_account_name=\"my-service-account\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor key in keys:\n    print(f\"Key ID: {key['id']}\")\n    print(f\"Valid After: {key['validAfterTime']}\")\n    print(f\"Valid Before: {key['validBeforeTime']}\")\n\n# Get a specific key\nkey = iam.get_key(\n    key_id=\"key-id\",\n    service_account_name=\"my-service-account\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Key ID: {key['id']}\")\nprint(f\"Valid After: {key['validAfterTime']}\")\nprint(f\"Valid Before: {key['validBeforeTime']}\")\n\n# Delete a key\niam.delete_key(\n    key_id=\"key-id\",\n    service_account_name=\"my-service-account\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/iam/#managing-iam-policies","title":"Managing IAM Policies","text":"<pre><code># Get the IAM policy for a service account\npolicy = iam.get_policy(\n    email=\"my-service-account@my-project.iam.gserviceaccount.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Policy: {policy}\")\n\n# Bind a member to a role for a service account\npolicy = iam.bind_member(\n    target_email=\"my-service-account@my-project.iam.gserviceaccount.com\",\n    member_email=\"user@example.com\",\n    role=\"roles/iam.serviceAccountUser\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated Policy: {policy}\")\n\n# Remove a member from a role for a service account\npolicy = iam.remove_member(\n    target_email=\"my-service-account@my-project.iam.gserviceaccount.com\",\n    member_email=\"user@example.com\",\n    role=\"roles/iam.serviceAccountUser\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated Policy: {policy}\")\n\n# Set a custom policy for a service account\npolicy = iam.set_policy(\n    email=\"my-service-account@my-project.iam.gserviceaccount.com\",\n    policy=custom_policy,  # A policy object\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated Policy: {policy}\")\n</code></pre>"},{"location":"services/iam/#iamcredentials","title":"IAMCredentials","text":"<p>The <code>IAMCredentials</code> class allows you to work with IAM credentials, including JWT tokens, ID tokens, and custom tokens.</p>"},{"location":"services/iam/#initialization_1","title":"Initialization","text":"<pre><code>from gcp_pilot.iam import IAMCredentials\n\n# Initialize with default credentials\niam_credentials = IAMCredentials()\n\n# Initialize with service account impersonation\niam_credentials = IAMCredentials(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/iam/#working-with-jwt-tokens","title":"Working with JWT Tokens","text":"<pre><code># Encode a JWT token\npayload = {\n    \"sub\": \"user@example.com\",\n    \"aud\": \"https://example.com\",\n    \"iat\": datetime.now(tz=UTC).timestamp(),\n    \"exp\": (datetime.now(tz=UTC) + timedelta(hours=1)).timestamp(),\n    \"custom_claim\": \"custom_value\",\n}\njwt_token = iam_credentials.encode_jwt(\n    payload=payload,\n    service_account_email=\"service-account@project-id.iam.gserviceaccount.com\",\n)\nprint(f\"JWT Token: {jwt_token}\")\n\n# Decode a JWT token\ndecoded_token = IAMCredentials.decode_jwt(\n    token=jwt_token,\n    issuer_email=\"service-account@project-id.iam.gserviceaccount.com\",\n    audience=\"https://example.com\",\n    verify=True,  # Optional: if True, verifies the token signature\n    cache_certs=True,  # Optional: if True, caches the public certificates\n    clock_skew_in_seconds=0,  # Optional: allows for clock skew\n)\nprint(f\"Decoded Token: {decoded_token}\")\n</code></pre>"},{"location":"services/iam/#working-with-id-tokens","title":"Working with ID Tokens","text":"<pre><code># Generate an ID token\nid_token = iam_credentials.generate_id_token(\n    audience=\"https://example.com\",\n    service_account_email=\"service-account@project-id.iam.gserviceaccount.com\",  # Optional: defaults to the impersonated account\n)\nprint(f\"ID Token: {id_token}\")\n\n# Decode an ID token\ndecoded_token = IAMCredentials.decode_id_token(\n    token=id_token,\n    audience=\"https://example.com\",  # Optional: if provided, verifies the audience\n)\nprint(f\"Decoded Token: {decoded_token}\")\n</code></pre>"},{"location":"services/iam/#working-with-custom-tokens","title":"Working with Custom Tokens","text":"<pre><code># Generate a custom token for Firebase Authentication\ncustom_token = iam_credentials.generate_custom_token(\n    uid=\"user123\",  # Optional: defaults to a random UUID\n    expires_in_seconds=3600,  # Optional: defaults to 12 hours\n    tenant_id=\"tenant123\",  # Optional: for multi-tenancy\n    auth_email=\"service-account@project-id.iam.gserviceaccount.com\",  # Optional: defaults to the impersonated account\n    claims={\"premium_account\": True},  # Optional: custom claims\n)\nprint(f\"Custom Token: {custom_token}\")\n\n# Decode a custom token\ndecoded_token = IAMCredentials.decode_custom_token(\n    token=custom_token,\n    issuer_email=\"service-account@project-id.iam.gserviceaccount.com\",\n    verify=True,  # Optional: if True, verifies the token signature\n)\nprint(f\"Decoded Token: {decoded_token}\")\n</code></pre>"},{"location":"services/iam/#error-handling","title":"Error Handling","text":"<p>The IAM classes handle common errors and convert them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    iam.get_service_account(name=\"non-existent-account\")\nexcept exceptions.NotFound:\n    print(\"Service account not found\")\n\ntry:\n    iam.create_service_account(name=\"existing-account\", display_name=\"Existing Account\", exists_ok=False)\nexcept exceptions.AlreadyExists:\n    print(\"Service account already exists\")\n\ntry:\n    iam_credentials.encode_jwt(payload={\"exp\": datetime.now(tz=UTC).timestamp() + 13 * 60 * 60}, service_account_email=\"service-account@project-id.iam.gserviceaccount.com\")\nexcept ValueError:\n    print(\"JWT tokens cannot be valid for more than 12 hours\")\n</code></pre>"},{"location":"services/iam/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\niam = IdentityAccessManager(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\nservice_account = iam.get_service_account(name=\"another-service-account\")\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/iam/#common-iam-roles","title":"Common IAM Roles","text":"<p>Here are some common IAM roles that you might use with service accounts:</p> <ul> <li><code>roles/iam.serviceAccountUser</code>: Allows a user to impersonate a service account</li> <li><code>roles/iam.serviceAccountTokenCreator</code>: Allows a user to create tokens for a service account</li> <li><code>roles/iam.serviceAccountKeyAdmin</code>: Allows a user to manage keys for a service account</li> <li><code>roles/iam.serviceAccountAdmin</code>: Allows a user to create and manage service accounts</li> </ul> <p>You can use these roles when binding members to service accounts:</p> <pre><code># Grant the serviceAccountUser role to a user\npolicy = iam.bind_member(\n    target_email=\"my-service-account@my-project.iam.gserviceaccount.com\",\n    member_email=\"user@example.com\",\n    role=\"roles/iam.serviceAccountUser\",\n)\n</code></pre>"},{"location":"services/iap/","title":"Identity-Aware Proxy (IAP)","text":"<p>Identity-Aware Proxy (IAP) is a service that provides a central authorization layer for applications accessed by HTTPS. The <code>IdentityAwareProxy</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud IAP.</p>"},{"location":"services/iap/#installation","title":"Installation","text":"<p>To use the IAP functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/iap/#usage","title":"Usage","text":""},{"location":"services/iap/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.iap import IdentityAwareProxy\n\n# Initialize with an audience\niap = IdentityAwareProxy(audience=\"https://example.com\")\n\n# Initialize with service account impersonation\niap = IdentityAwareProxy(\n    audience=\"https://example.com\",\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n</code></pre> <p>The <code>audience</code> parameter is required and should be the URL of the IAP-protected resource you want to access.</p>"},{"location":"services/iap/#getting-an-iap-token","title":"Getting an IAP Token","text":"<pre><code># Get an IAP token\ntoken = iap.token\nprint(f\"IAP Token: {token}\")\n</code></pre> <p>The <code>token</code> property automatically handles token generation, either by: 1. Getting a token from the GCP metadata server (when running on GCP) 2. Getting a token using the service account credentials (when running outside GCP)</p>"},{"location":"services/iap/#using-iap-headers","title":"Using IAP Headers","text":"<pre><code># Get headers for IAP-protected requests\nheaders = iap.headers\nprint(f\"IAP Headers: {headers}\")\n\n# Use the headers in a request\nimport requests\n\nresponse = requests.get(\n    url=\"https://example.com\",\n    headers=headers\n)\nprint(f\"Response: {response.text}\")\n</code></pre> <p>The <code>headers</code> property returns a dictionary with the Authorization header set to \"Bearer {token}\".</p>"},{"location":"services/iap/#example-accessing-an-iap-protected-cloud-run-service","title":"Example: Accessing an IAP-Protected Cloud Run Service","text":"<pre><code>from gcp_pilot.iap import IdentityAwareProxy\nimport requests\n\n# Initialize IAP for a Cloud Run service\niap = IdentityAwareProxy(audience=\"https://my-service-abcdef-uc.a.run.app\")\n\n# Make a request to the IAP-protected service\nresponse = requests.get(\n    url=\"https://my-service-abcdef-uc.a.run.app\",\n    headers=iap.headers\n)\n\n# Process the response\nif response.status_code == 200:\n    print(\"Successfully accessed IAP-protected service\")\n    print(f\"Response: {response.json()}\")\nelse:\n    print(f\"Failed to access IAP-protected service: {response.status_code}\")\n    print(f\"Error: {response.text}\")\n</code></pre>"},{"location":"services/iap/#example-accessing-an-iap-protected-app-engine-service","title":"Example: Accessing an IAP-Protected App Engine Service","text":"<pre><code>from gcp_pilot.iap import IdentityAwareProxy\nimport requests\n\n# Initialize IAP for an App Engine service\niap = IdentityAwareProxy(audience=\"https://my-service-dot-my-project.appspot.com\")\n\n# Make a request to the IAP-protected service\nresponse = requests.get(\n    url=\"https://my-service-dot-my-project.appspot.com\",\n    headers=iap.headers\n)\n\n# Process the response\nif response.status_code == 200:\n    print(\"Successfully accessed IAP-protected service\")\n    print(f\"Response: {response.json()}\")\nelse:\n    print(f\"Failed to access IAP-protected service: {response.status_code}\")\n    print(f\"Error: {response.text}\")\n</code></pre>"},{"location":"services/iap/#example-accessing-an-iap-protected-compute-engine-service","title":"Example: Accessing an IAP-Protected Compute Engine Service","text":"<pre><code>from gcp_pilot.iap import IdentityAwareProxy\nimport requests\n\n# Initialize IAP for a Compute Engine service\niap = IdentityAwareProxy(audience=\"https://my-vm-ip.region.c.my-project.internal\")\n\n# Make a request to the IAP-protected service\nresponse = requests.get(\n    url=\"https://my-vm-ip.region.c.my-project.internal\",\n    headers=iap.headers\n)\n\n# Process the response\nif response.status_code == 200:\n    print(\"Successfully accessed IAP-protected service\")\n    print(f\"Response: {response.json()}\")\nelse:\n    print(f\"Failed to access IAP-protected service: {response.status_code}\")\n    print(f\"Error: {response.text}\")\n</code></pre>"},{"location":"services/iap/#error-handling","title":"Error Handling","text":"<p>The IAP class handles common errors and automatically falls back to alternative token generation methods:</p> <pre><code>from gcp_pilot.iap import IdentityAwareProxy\nimport requests\n\ntry:\n    # Initialize IAP\n    iap = IdentityAwareProxy(audience=\"https://example.com\")\n\n    # Get a token\n    token = iap.token\n\n    # Make a request\n    response = requests.get(\n        url=\"https://example.com\",\n        headers=iap.headers\n    )\n\n    # Check for HTTP errors\n    response.raise_for_status()\n\nexcept requests.exceptions.ConnectionError:\n    print(\"Failed to connect to the metadata server, falling back to service account credentials\")\n\nexcept requests.exceptions.HTTPError as e:\n    print(f\"HTTP error: {e}\")\n\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"services/iap/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\niap = IdentityAwareProxy(\n    audience=\"https://example.com\",\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n\n# Now all operations will be performed as the impersonated service account\ntoken = iap.token\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/iap/#setting-up-iap","title":"Setting Up IAP","text":"<p>Before you can use IAP, you need to set it up in the Google Cloud Console:</p> <ol> <li>Enable the IAP API in your project</li> <li>Configure IAP for your application (App Engine, Cloud Run, Compute Engine, etc.)</li> <li>Set up the appropriate IAM permissions for the service account you're using</li> </ol> <p>For more information on setting up IAP, see the Google Cloud IAP documentation.</p>"},{"location":"services/identity_platform/","title":"Identity Platform","text":"<p>Identity Platform is a customer identity and access management (CIAM) platform that helps organizations add identity and access management functionality to their applications. The <code>IdentityPlatform</code> and <code>IdentityPlatformAdmin</code> classes in gcp-pilot provide high-level interfaces for interacting with Google Identity Platform (Firebase Auth).</p>"},{"location":"services/identity_platform/#installation","title":"Installation","text":"<p>To use the Identity Platform functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/identity_platform/#usage","title":"Usage","text":""},{"location":"services/identity_platform/#identityplatform","title":"IdentityPlatform","text":"<p>The <code>IdentityPlatform</code> class allows you to manage users and authentication in Google Identity Platform.</p>"},{"location":"services/identity_platform/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.identity_platform import IdentityPlatform\n\n# Initialize with default credentials\nidentity = IdentityPlatform()\n\n# Initialize with specific project\nidentity = IdentityPlatform(project_id=\"my-project\")\n\n# Initialize with a specific tenant\nidentity = IdentityPlatform(tenant_id=\"my-tenant\")\n\n# Initialize with service account impersonation\nidentity = IdentityPlatform(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/identity_platform/#user-management","title":"User Management","text":""},{"location":"services/identity_platform/#finding-users","title":"Finding Users","text":"<pre><code># Find a user by email\nuser = identity.find(\n    email=\"user@example.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"User ID: {user.id}\")\nprint(f\"Email: {user.email}\")\nprint(f\"Verified: {user.verified}\")\nprint(f\"Created At: {user.created_at}\")\n\n# Find a user by phone number\nuser = identity.find(\n    phone_number=\"+1234567890\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"User ID: {user.id}\")\nprint(f\"Email: {user.email}\")\nprint(f\"Verified: {user.verified}\")\nprint(f\"Created At: {user.created_at}\")\n\n# Look up multiple users by email\nusers = identity.lookup(\n    email=\"user@example.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nfor user in users:\n    print(f\"User ID: {user.id}\")\n    print(f\"Email: {user.email}\")\n    print(f\"Verified: {user.verified}\")\n    print(f\"Created At: {user.created_at}\")\n</code></pre>"},{"location":"services/identity_platform/#listing-users","title":"Listing Users","text":"<pre><code># List all users\nusers = identity.list_users(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nfor user in users:\n    print(f\"User ID: {user.id}\")\n    print(f\"Email: {user.email}\")\n    print(f\"Verified: {user.verified}\")\n    print(f\"Created At: {user.created_at}\")\n</code></pre>"},{"location":"services/identity_platform/#creating-users","title":"Creating Users","text":"<pre><code># Sign up a new user with email and password\nuser = identity.sign_up(\n    email=\"user@example.com\",\n    password=\"securepassword\",\n    name=\"John Doe\",  # Optional: display name\n    photo_url=\"https://example.com/photo.jpg\",  # Optional: profile photo URL\n    phone_number=\"+1234567890\",  # Optional: phone number\n    user_id=\"custom-user-id\",  # Optional: custom user ID\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"User ID: {user.id}\")\nprint(f\"Email: {user.email}\")\nprint(f\"Verified: {user.verified}\")\nprint(f\"Created At: {user.created_at}\")\n</code></pre>"},{"location":"services/identity_platform/#updating-users","title":"Updating Users","text":"<pre><code># Update a user's information\nresponse = identity.update(\n    user_id=\"user-id\",\n    email=\"new-email@example.com\",  # Optional: new email\n    password=\"newsecurepassword\",  # Optional: new password\n    phone_number=\"+1234567890\",  # Optional: new phone number\n    name=\"John Smith\",  # Optional: new display name\n    photo_url=\"https://example.com/new-photo.jpg\",  # Optional: new profile photo URL\n    attributes={\"role\": \"admin\", \"subscription\": \"premium\"},  # Optional: custom attributes\n    enabled=True,  # Optional: enable or disable the user\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Updated user: {response}\")\n</code></pre>"},{"location":"services/identity_platform/#deleting-and-disabling-users","title":"Deleting and Disabling Users","text":"<pre><code># Delete a user\nresponse = identity.delete_user(\n    user_id=\"user-id\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Deleted user: {response}\")\n\n# Disable a user\nresponse = identity.disable_user(\n    user_id=\"user-id\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Disabled user: {response}\")\n\n# Enable a user\nresponse = identity.enable_user(\n    user_id=\"user-id\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Enabled user: {response}\")\n</code></pre>"},{"location":"services/identity_platform/#authentication","title":"Authentication","text":""},{"location":"services/identity_platform/#email-and-password-authentication","title":"Email and Password Authentication","text":"<pre><code># Sign in with email and password\nresponse = identity.sign_in_with_password(\n    email=\"user@example.com\",\n    password=\"securepassword\",\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"ID Token: {response['idToken']}\")\nprint(f\"Refresh Token: {response['refreshToken']}\")\nprint(f\"Expires In: {response['expiresIn']}\")\n</code></pre>"},{"location":"services/identity_platform/#phone-number-authentication","title":"Phone Number Authentication","text":"<pre><code># Sign in with phone number and verification code\nresponse = identity.sign_in_with_phone_number(\n    phone_number=\"+1234567890\",\n    code=\"123456\",  # Verification code sent to the phone\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"ID Token: {response['idToken']}\")\nprint(f\"Refresh Token: {response['refreshToken']}\")\nprint(f\"Expires In: {response['expiresIn']}\")\n</code></pre>"},{"location":"services/identity_platform/#custom-token-authentication","title":"Custom Token Authentication","text":"<pre><code># Sign in with a custom token\nresponse = identity.sign_in_with_custom_token(\n    token=\"custom-token\",\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"ID Token: {response['idToken']}\")\nprint(f\"Refresh Token: {response['refreshToken']}\")\nprint(f\"Expires In: {response['expiresIn']}\")\n</code></pre>"},{"location":"services/identity_platform/#email-link-authentication","title":"Email Link Authentication","text":"<pre><code># Sign in with an email link\nresponse = identity.sign_in_with_email_link(\n    email=\"user@example.com\",\n    code=\"oob-code\",  # One-time code from the email link\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"ID Token: {response['idToken']}\")\nprint(f\"Refresh Token: {response['refreshToken']}\")\nprint(f\"Expires In: {response['expiresIn']}\")\n</code></pre>"},{"location":"services/identity_platform/#email-verification-and-password-reset","title":"Email Verification and Password Reset","text":"<pre><code>from gcp_pilot.identity_platform import OOBCodeType\n\n# Generate an email verification code\nresponse = identity.generate_email_code(\n    type=OOBCodeType.VERIFY,\n    email=\"user@example.com\",\n    ip_address=\"192.0.2.1\",  # Optional: IP address of the user\n    send_email=False,  # Optional: if True, sends the email directly; if False, returns the code\n    redirect_url=\"https://example.com/verified\",  # Optional: URL to redirect to after verification\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Verification URL: {response['url']}\")\nprint(f\"Verification Code: {response['code']}\")\n\n# Generate a password reset code\nresponse = identity.generate_email_code(\n    type=OOBCodeType.RESET,\n    email=\"user@example.com\",\n    ip_address=\"192.0.2.1\",  # Optional: IP address of the user\n    send_email=False,  # Optional: if True, sends the email directly; if False, returns the code\n    redirect_url=\"https://example.com/reset-password\",  # Optional: URL to redirect to after reset\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Reset URL: {response['url']}\")\nprint(f\"Reset Code: {response['code']}\")\n\n# Generate an email sign-in link\nresponse = identity.generate_email_code(\n    type=OOBCodeType.SIGNIN,\n    email=\"user@example.com\",\n    ip_address=\"192.0.2.1\",  # Optional: IP address of the user\n    send_email=False,  # Optional: if True, sends the email directly; if False, returns the code\n    redirect_url=\"https://example.com/signin\",  # Optional: URL to redirect to after sign-in\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Sign-in URL: {response['url']}\")\nprint(f\"Sign-in Code: {response['code']}\")\n\n# Reset a password with a reset code\nresponse = identity.reset_password(\n    email=\"user@example.com\",\n    new_password=\"newsecurepassword\",\n    oob_code=\"reset-code\",  # Code from the password reset email\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Reset password: {response}\")\n\n# Reset a password with the old password\nresponse = identity.reset_password(\n    email=\"user@example.com\",\n    new_password=\"newsecurepassword\",\n    old_password=\"oldsecurepassword\",\n    tenant_id=\"my-tenant\",  # Optional: defaults to the tenant specified during initialization\n)\nprint(f\"Reset password: {response}\")\n</code></pre>"},{"location":"services/identity_platform/#identityplatformadmin","title":"IdentityPlatformAdmin","text":"<p>The <code>IdentityPlatformAdmin</code> class allows you to manage the configuration of Google Identity Platform.</p>"},{"location":"services/identity_platform/#initialization_1","title":"Initialization","text":"<pre><code>from gcp_pilot.identity_platform import IdentityPlatformAdmin\n\n# Initialize with default credentials\nadmin = IdentityPlatformAdmin()\n\n# Initialize with specific project\nadmin = IdentityPlatformAdmin(project_id=\"my-project\")\n\n# Initialize with a specific tenant\nadmin = IdentityPlatformAdmin(tenant_id=\"my-tenant\")\n\n# Initialize with service account impersonation\nadmin = IdentityPlatformAdmin(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/identity_platform/#managing-configuration","title":"Managing Configuration","text":"<pre><code># Get the current configuration\nconfig = admin.get_config(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Authorized Domains: {config.get('authorizedDomains', [])}\")\n\n# Add authorized domains\nconfig = admin.add_authorized_domains(\n    domains=[\"example.com\", \"example.org\"],\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated Authorized Domains: {config.get('authorizedDomains', [])}\")\n\n# Remove authorized domains\nconfig = admin.remove_authorized_domains(\n    domains=[\"example.org\"],\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated Authorized Domains: {config.get('authorizedDomains', [])}\")\n\n# Set authorized domains (replaces all existing domains)\nconfig = admin.set_authorized_domains(\n    domains=[\"example.com\", \"example.net\"],\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated Authorized Domains: {config.get('authorizedDomains', [])}\")\n</code></pre>"},{"location":"services/identity_platform/#working-with-firebase-auth-tokens","title":"Working with Firebase Auth Tokens","text":"<p>The <code>FirebaseAuthToken</code> class allows you to parse and validate Firebase Auth tokens.</p> <pre><code>from gcp_pilot.identity_platform import FirebaseAuthToken\n\n# Parse and validate a Firebase Auth token\ntoken = FirebaseAuthToken(\n    jwt_token=\"id-token-from-firebase\",\n    validate_expiration=True,  # Optional: if False, ignores token expiration\n)\n\n# Access token information\nprint(f\"Provider ID: {token.provider_id}\")\nprint(f\"Tenant ID: {token.tenant_id}\")\nprint(f\"Event Type: {token.event_type}\")\nprint(f\"IP Address: {token.ip_address}\")\nprint(f\"User Agent: {token.user_agent}\")\nprint(f\"Expiration Date: {token.expiration_date}\")\nprint(f\"Event ID: {token.event_id}\")\n\n# Access user information\nprint(f\"User ID: {token.user.id}\")\nprint(f\"Email: {token.user.email}\")\nprint(f\"Name: {token.user.name}\")\nprint(f\"Verified: {token.user.verified}\")\nprint(f\"Disabled: {token.user.disabled}\")\nprint(f\"Created At: {token.user.created_at}\")\nprint(f\"Last Login At: {token.user.last_login_at}\")\n\n# Access OAuth information (if available)\nif token.oauth:\n    print(f\"OAuth ID Token: {token.oauth.id_token}\")\n    print(f\"OAuth Access Token: {token.oauth.access_token}\")\n    print(f\"OAuth Refresh Token: {token.oauth.refresh_token}\")\n    print(f\"OAuth Token Secret: {token.oauth.token_secret}\")\n\n# Access JWT information\nprint(f\"Audience: {token.jwt_info.aud}\")\nprint(f\"Issuer: {token.jwt_info.iss}\")\nprint(f\"Subject: {token.jwt_info.sub}\")\nprint(f\"Issued At: {token.jwt_info.iat}\")\nprint(f\"Expires At: {token.jwt_info.exp}\")\nprint(f\"Is Expired: {token.jwt_info.is_expired}\")\n\n# Access raw user information\nprint(f\"Raw User Info: {token.raw_user}\")\n</code></pre>"},{"location":"services/identity_platform/#error-handling","title":"Error Handling","text":"<p>The Identity Platform classes handle common errors and convert them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    identity.find(email=\"non-existent@example.com\")\nexcept exceptions.NotFound:\n    print(\"User not found\")\n\ntry:\n    identity.lookup(email=None, phone_number=None)\nexcept exceptions.ValidationError:\n    print(\"Either email or phone_number must be provided\")\n\ntry:\n    identity.reset_password(email=\"user@example.com\", new_password=\"newpassword\")\nexcept exceptions.ValidationError:\n    print(\"Either old_password or oob_code must be provided\")\n</code></pre>"},{"location":"services/identity_platform/#working-with-multi-tenancy","title":"Working with Multi-Tenancy","text":"<p>Identity Platform supports multi-tenancy, which allows you to manage separate user pools for different applications or organizations within the same project.</p> <pre><code># Initialize with a specific tenant\nidentity = IdentityPlatform(tenant_id=\"my-tenant\")\n\n# All operations will use this tenant by default\nuser = identity.find(email=\"user@example.com\")\n\n# You can also specify a different tenant for a specific operation\nuser = identity.find(email=\"user@example.com\", tenant_id=\"other-tenant\")\n</code></pre>"},{"location":"services/identity_platform/#provider-types","title":"Provider Types","text":"<p>The <code>FirebaseProviderType</code> enum represents the different authentication providers supported by Identity Platform:</p> <pre><code>from gcp_pilot.identity_platform import FirebaseProviderType\n\n# Available provider types\nFirebaseProviderType.GOOGLE     # Google authentication\nFirebaseProviderType.FACEBOOK   # Facebook authentication\nFirebaseProviderType.GITHUB     # GitHub authentication\nFirebaseProviderType.MICROSOFT  # Microsoft authentication\nFirebaseProviderType.APPLE      # Apple authentication\nFirebaseProviderType.PASSWORD   # Email/password authentication\nFirebaseProviderType.PASSWORDLESS  # Email link authentication\n</code></pre> <p>You can use these provider types to check the authentication method used by a user:</p> <pre><code>if token.provider_id == FirebaseProviderType.GOOGLE.value:\n    print(\"User authenticated with Google\")\n</code></pre>"},{"location":"services/logging/","title":"Cloud Logging","text":"<p>Cloud Logging is a fully managed service that allows you to store, search, analyze, monitor, and alert on log data and events from Google Cloud and Amazon Web Services. The <code>CloudLogging</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Logging.</p>"},{"location":"services/logging/#installation","title":"Installation","text":"<p>To use the Cloud Logging functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/logging/#usage","title":"Usage","text":""},{"location":"services/logging/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.logging import CloudLogging\n\n# Initialize with default credentials\nlogging = CloudLogging()\n\n# Initialize with specific project\nlogging = CloudLogging(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nlogging = CloudLogging(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/logging/#enabling-logging","title":"Enabling Logging","text":"<p>You can enable Cloud Logging to capture logs from your application:</p> <pre><code>import logging as python_logging\n\n# Enable Cloud Logging with the default log level (INFO)\ncloud_logging = CloudLogging()\ncloud_logging.enable()\n\n# Enable Cloud Logging with a specific log level\ncloud_logging.enable(log_level=python_logging.DEBUG)\n\n# Now you can use the standard Python logging module, and logs will be sent to Cloud Logging\npython_logging.info(\"This is an info message\")\npython_logging.error(\"This is an error message\")\n</code></pre>"},{"location":"services/logging/#getting-the-default-handler","title":"Getting the Default Handler","text":"<p>You can get the default handler to add it to your own logger:</p> <pre><code>import logging as python_logging\n\n# Initialize Cloud Logging\ncloud_logging = CloudLogging()\n\n# Get the default handler\nhandler = cloud_logging.handler\n\n# Create a custom logger\nlogger = python_logging.getLogger(\"my-logger\")\nlogger.setLevel(python_logging.INFO)\nlogger.addHandler(handler)\n\n# Use the custom logger\nlogger.info(\"This is an info message\")\nlogger.error(\"This is an error message\")\n</code></pre>"},{"location":"services/logging/#logging-structured-data","title":"Logging Structured Data","text":"<p>You can log structured data with additional metadata:</p> <pre><code>from datetime import datetime, UTC\nfrom google.logging.type.log_severity_pb2 import LogSeverity\nfrom google.logging.type.http_request_pb2 import HttpRequest\nfrom google.cloud.logging_v2 import Resource\n\n# Initialize Cloud Logging\ncloud_logging = CloudLogging()\n\n# Log a simple message\ncloud_logging.log_struct(\n    logger_name=\"my-logger\",\n    message=\"This is a simple message\",\n    severity=LogSeverity.INFO,\n)\n\n# Log a structured message\ncloud_logging.log_struct(\n    logger_name=\"my-logger\",\n    message={\n        \"message\": \"This is a structured message\",\n        \"user_id\": \"123\",\n        \"action\": \"login\",\n        \"status\": \"success\",\n    },\n    severity=LogSeverity.INFO,\n)\n\n# Log with additional metadata\ncloud_logging.log_struct(\n    logger_name=\"my-logger\",\n    message=\"This is a message with metadata\",\n    severity=LogSeverity.ERROR,\n    timestamp=datetime.now(tz=UTC),\n    labels={\"environment\": \"production\", \"version\": \"1.0.0\"},\n    span_id=\"span-123\",\n    trace=\"projects/my-project/traces/trace-123\",\n)\n\n# Log an HTTP request\nhttp_request = HttpRequest(\n    request_method=\"GET\",\n    request_url=\"https://example.com/api\",\n    status=200,\n    user_agent=\"Mozilla/5.0\",\n    remote_ip=\"192.0.2.1\",\n)\n\ncloud_logging.log_struct(\n    logger_name=\"my-logger\",\n    message=\"HTTP request processed\",\n    severity=LogSeverity.INFO,\n    http_request=http_request,\n)\n\n# Log with a specific resource\nresource = Resource(\n    type=\"gce_instance\",\n    labels={\n        \"instance_id\": \"instance-123\",\n        \"zone\": \"us-central1-a\",\n    },\n)\n\ncloud_logging.log_struct(\n    logger_name=\"my-logger\",\n    message=\"Instance event\",\n    severity=LogSeverity.INFO,\n    resource=resource,\n)\n</code></pre>"},{"location":"services/logging/#log-severity-levels","title":"Log Severity Levels","text":"<p>The <code>LogSeverity</code> enum from <code>google.logging.type.log_severity_pb2</code> provides the following severity levels:</p> <pre><code>from google.logging.type.log_severity_pb2 import LogSeverity\n\n# Available severity levels\nLogSeverity.DEFAULT  # (0) The log entry has no assigned severity level.\nLogSeverity.DEBUG    # (100) Debug or trace information.\nLogSeverity.INFO     # (200) Routine information, such as ongoing status or performance.\nLogSeverity.NOTICE   # (300) Normal but significant events, such as start up, shut down, or a configuration change.\nLogSeverity.WARNING  # (400) Warning events might cause problems.\nLogSeverity.ERROR    # (500) Error events are likely to cause problems.\nLogSeverity.CRITICAL # (600) Critical events cause more severe problems or outages.\nLogSeverity.ALERT    # (700) A person must take an action immediately.\nLogSeverity.EMERGENCY # (800) One or more systems are unusable.\n</code></pre>"},{"location":"services/logging/#integration-with-python-logging","title":"Integration with Python Logging","text":"<p>Cloud Logging integrates with the standard Python logging module. When you call <code>enable()</code>, it sets up a handler that sends logs to Cloud Logging.</p> <pre><code>import logging as python_logging\n\n# Initialize Cloud Logging\ncloud_logging = CloudLogging()\ncloud_logging.enable()\n\n# Use the standard Python logging module\npython_logging.info(\"This is an info message\")\npython_logging.warning(\"This is a warning message\")\npython_logging.error(\"This is an error message\")\npython_logging.critical(\"This is a critical message\")\n\n# Use a named logger\nlogger = python_logging.getLogger(\"my-component\")\nlogger.info(\"This is an info message from my component\")\n</code></pre>"},{"location":"services/logging/#viewing-logs","title":"Viewing Logs","text":"<p>You can view your logs in the Google Cloud Console:</p> <ol> <li>Go to the Cloud Logging page</li> <li>Select your project</li> <li>Use the query editor to filter logs by:</li> <li>Log name</li> <li>Severity</li> <li>Resource type</li> <li>Labels</li> <li>Text search</li> </ol>"},{"location":"services/logging/#error-handling","title":"Error Handling","text":"<p>The CloudLogging class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    logging = CloudLogging()\n    logging.log_struct(\n        logger_name=\"my-logger\",\n        message=\"Test message\",\n        severity=LogSeverity.INFO,\n    )\nexcept exceptions.HttpError as e:\n    print(f\"HTTP error: {e}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"services/logging/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nlogging = CloudLogging(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\nlogging.log_struct(\n    logger_name=\"my-logger\",\n    message=\"Test message\",\n    severity=LogSeverity.INFO,\n)\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/mocker/","title":"Testing Utilities","text":"<p>The <code>mocker</code> module in gcp-pilot provides utilities for mocking Google Cloud Platform services during testing. This is particularly useful for unit testing applications that use gcp-pilot without needing to connect to actual GCP services.</p>"},{"location":"services/mocker/#installation","title":"Installation","text":"<p>To use the mocker functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/mocker/#usage","title":"Usage","text":""},{"location":"services/mocker/#mocking-authentication","title":"Mocking Authentication","text":"<p>The <code>patch_auth</code> class provides a context manager and decorator for mocking Google Cloud authentication:</p> <pre><code>from gcp_pilot.mocker import patch_auth\n\n# As a context manager\nwith patch_auth(project_id=\"test-project\", location=\"us-central1\", email=\"test@example.com\"):\n    # Code that uses gcp-pilot services\n    # Authentication will be mocked\n\n# As a decorator\n@patch_auth(project_id=\"test-project\", location=\"us-central1\")\ndef test_function():\n    # Code that uses gcp-pilot services\n    # Authentication will be mocked\n</code></pre>"},{"location":"services/mocker/#parameters","title":"Parameters","text":"<ul> <li><code>project_id</code> (str, optional): The project ID to use in the mock. Defaults to \"potato-dev\".</li> <li><code>location</code> (str, optional): The location to use in the mock. Defaults to \"moon-dark1\".</li> <li><code>email</code> (str, optional): The service account email to use in the mock. Defaults to \"chuck@norris.com\".</li> </ul>"},{"location":"services/mocker/#mocking-firebase-token-verification","title":"Mocking Firebase Token Verification","text":"<p>The <code>patch_firebase_token</code> function provides a way to mock Firebase token verification:</p> <pre><code>from gcp_pilot.mocker import patch_firebase_token\nimport unittest.mock\n\n# Mock Firebase token verification\nwith patch_firebase_token(return_value={\"user_id\": \"test-user\"}):\n    # Code that verifies Firebase tokens\n    # Verification will be mocked and return the specified value\n</code></pre>"},{"location":"services/mocker/#example-unit-testing-with-mocks","title":"Example: Unit Testing with Mocks","text":"<p>Here's an example of how to use the mocker utilities in a unit test:</p> <pre><code>import unittest\nfrom gcp_pilot.mocker import patch_auth\nfrom gcp_pilot.storage import Storage\n\nclass TestStorage(unittest.TestCase):\n    @patch_auth(project_id=\"test-project\")\n    def test_list_buckets(self):\n        # This test doesn't actually connect to GCP\n        storage = Storage()\n\n        # Mock the list_buckets method to return test data\n        with unittest.mock.patch.object(storage.client.buckets, 'list', \n                                       return_value=[{'name': 'test-bucket'}]):\n            buckets = list(storage.list_buckets())\n            self.assertEqual(len(buckets), 1)\n            self.assertEqual(buckets[0]['name'], 'test-bucket')\n</code></pre>"},{"location":"services/mocker/#advanced-usage-manual-control","title":"Advanced Usage: Manual Control","text":"<p>If you need more control over when the mocks start and stop:</p> <pre><code>from gcp_pilot.mocker import patch_auth\n\n# Create the mock\nauth_mock = patch_auth(project_id=\"test-project\")\n\n# Start the mock\nauth_mock.start()\n\ntry:\n    # Code that uses gcp-pilot services\n    # Authentication will be mocked\nfinally:\n    # Stop the mock\n    auth_mock.stop()\n</code></pre>"},{"location":"services/mocker/#notes","title":"Notes","text":"<ul> <li>The mocks provided by this module are designed for testing purposes only and should not be used in production code.</li> <li>While these mocks prevent actual API calls to GCP, they don't provide mock responses for service-specific methods. You'll need to combine them with additional mocks (e.g., using <code>unittest.mock</code>) to fully mock GCP service interactions.</li> <li>The authentication mock provides a real <code>Credentials</code> object, but with minimal attributes, so it will pass type checks but fail if actually used to make API calls.</li> </ul>"},{"location":"services/monitoring/","title":"Cloud Monitoring","text":"<p>Cloud Monitoring is a service that provides visibility into the performance, uptime, and overall health of cloud-powered applications. The <code>Monitoring</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Monitoring.</p>"},{"location":"services/monitoring/#installation","title":"Installation","text":"<p>To use the Cloud Monitoring functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/monitoring/#usage","title":"Usage","text":""},{"location":"services/monitoring/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.monitoring import Monitoring\n\n# Initialize with default credentials\nmonitoring = Monitoring()\n\n# Initialize with specific project\nmonitoring = Monitoring(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nmonitoring = Monitoring(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/monitoring/#managing-services","title":"Managing Services","text":"<p>Cloud Monitoring services represent the applications or components that you want to monitor.</p>"},{"location":"services/monitoring/#listing-services","title":"Listing Services","text":"<pre><code># List all services in a project\nservices = monitoring.list_services()\nfor service in services:\n    print(f\"Service: {service['name']}\")\n    print(f\"Display Name: {service['displayName']}\")\n\n# List services in a specific project\nservices = monitoring.list_services(project_id=\"my-project\")\nfor service in services:\n    print(f\"Service: {service['name']}\")\n    print(f\"Display Name: {service['displayName']}\")\n</code></pre>"},{"location":"services/monitoring/#getting-a-service","title":"Getting a Service","text":"<pre><code># Get information about a specific service\nservice = monitoring.get_service(\n    service_id=\"my-service\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Service: {service['name']}\")\nprint(f\"Display Name: {service['displayName']}\")\nprint(f\"Type: {service['type']}\")\n</code></pre>"},{"location":"services/monitoring/#creating-a-service","title":"Creating a Service","text":"<pre><code># Create a new service\nservice = monitoring.create_service(\n    name=\"my-service\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Service created: {service['name']}\")\nprint(f\"Display Name: {service['displayName']}\")\n</code></pre>"},{"location":"services/monitoring/#working-with-service-monitoring","title":"Working with Service Monitoring","text":"<p>Cloud Monitoring services are used to group related resources and metrics. Once you've created a service, you can:</p> <ol> <li>Set up Service Level Objectives (SLOs) for the service</li> <li>Create uptime checks for the service</li> <li>Set up alerts based on service performance</li> <li>View service dashboards</li> </ol> <p>While the current implementation of the <code>Monitoring</code> class focuses on service management, you can use the Google Cloud Console to perform these additional tasks:</p> <ol> <li>Go to the Cloud Monitoring page</li> <li>Select your project</li> <li>Navigate to the \"Services\" section</li> <li>Select the service you created</li> <li>Use the UI to set up SLOs, uptime checks, and alerts</li> </ol>"},{"location":"services/monitoring/#error-handling","title":"Error Handling","text":"<p>The Monitoring class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    monitoring.get_service(service_id=\"non-existent-service\")\nexcept exceptions.NotFound:\n    print(\"Service not found\")\n\ntry:\n    monitoring.create_service(name=\"existing-service\")\nexcept exceptions.AlreadyExists:\n    print(\"Service already exists\")\n</code></pre>"},{"location":"services/monitoring/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nmonitoring = Monitoring(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\nservices = monitoring.list_services()\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/monitoring/#additional-resources","title":"Additional Resources","text":"<p>For more advanced monitoring capabilities, you can use the full Google Cloud Monitoring API. The <code>Monitoring</code> class in gcp-pilot provides a simplified interface for common operations, but the full API offers more features:</p> <ul> <li>Creating and managing metrics</li> <li>Setting up dashboards</li> <li>Configuring alerts</li> <li>Creating uptime checks</li> <li>Setting up Service Level Objectives (SLOs)</li> </ul> <p>For more information, see the Google Cloud Monitoring documentation.</p>"},{"location":"services/people/","title":"Google People API","text":"<p>Google People API is a service that provides access to information about profiles and contacts. The <code>People</code> class in gcp-pilot provides a high-level interface for interacting with Google People API.</p>"},{"location":"services/people/#installation","title":"Installation","text":"<p>To use the People API functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/people/#usage","title":"Usage","text":""},{"location":"services/people/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.people import People\n\n# Initialize with a specific email\npeople = People(email=\"user@example.com\")\n\n# Initialize with service account impersonation\npeople = People(\n    email=\"user@example.com\",\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n</code></pre> <p>The <code>email</code> parameter is required and specifies the user whose contacts will be accessed.</p>"},{"location":"services/people/#getting-people","title":"Getting People","text":"<p>You can retrieve people from the directory:</p> <pre><code># Get all people in the directory\nall_people = people.get_people()\nfor person in all_people:\n    print(f\"Person: {person['names'][0]['displayName'] if 'names' in person else 'Unknown'}\")\n    print(f\"Email: {person['emailAddresses'][0]['value'] if 'emailAddresses' in person else 'Unknown'}\")\n\n# Search for people by query\nsearch_results = people.get_people(query=\"John\")\nfor person in search_results:\n    print(f\"Person: {person['names'][0]['displayName'] if 'names' in person else 'Unknown'}\")\n    print(f\"Email: {person['emailAddresses'][0]['value'] if 'emailAddresses' in person else 'Unknown'}\")\n\n# Get specific fields for people\nspecific_fields = people.get_people(fields=[\"names\", \"emailAddresses\", \"phoneNumbers\"])\nfor person in specific_fields:\n    print(f\"Person: {person['names'][0]['displayName'] if 'names' in person else 'Unknown'}\")\n    print(f\"Email: {person['emailAddresses'][0]['value'] if 'emailAddresses' in person else 'Unknown'}\")\n    if \"phoneNumbers\" in person:\n        print(f\"Phone: {person['phoneNumbers'][0]['value']}\")\n</code></pre>"},{"location":"services/people/#available-fields","title":"Available Fields","text":"<p>The People API provides access to various fields of information about people. The <code>USER_FIELDS</code> constant in the <code>people</code> module lists all available fields:</p> <pre><code>from gcp_pilot.people import USER_FIELDS\n\nprint(f\"Available fields: {USER_FIELDS}\")\n</code></pre> <p>The available fields include:</p> <ul> <li><code>addresses</code>: Postal addresses</li> <li><code>ageRanges</code>: Age ranges</li> <li><code>biographies</code>: Biographies</li> <li><code>birthdays</code>: Birthdays</li> <li><code>calendarUrls</code>: Calendar URLs</li> <li><code>clientData</code>: Client data</li> <li><code>coverPhotos</code>: Cover photos</li> <li><code>emailAddresses</code>: Email addresses</li> <li><code>events</code>: Events</li> <li><code>externalIds</code>: External IDs</li> <li><code>genders</code>: Genders</li> <li><code>imClients</code>: IM clients</li> <li><code>interests</code>: Interests</li> <li><code>locales</code>: Locales</li> <li><code>locations</code>: Locations</li> <li><code>memberships</code>: Memberships</li> <li><code>metadata</code>: Metadata</li> <li><code>miscKeywords</code>: Miscellaneous keywords</li> <li><code>names</code>: Names</li> <li><code>nicknames</code>: Nicknames</li> <li><code>occupations</code>: Occupations</li> <li><code>organizations</code>: Organizations</li> <li><code>phoneNumbers</code>: Phone numbers</li> <li><code>photos</code>: Photos</li> <li><code>relations</code>: Relations</li> <li><code>sipAddresses</code>: SIP addresses</li> <li><code>skills</code>: Skills</li> <li><code>urls</code>: URLs</li> <li><code>userDefined</code>: User-defined fields</li> </ul> <p>You can specify which fields to retrieve by passing a list of field names to the <code>fields</code> parameter of the <code>get_people</code> method.</p>"},{"location":"services/people/#example-finding-a-person-by-email","title":"Example: Finding a Person by Email","text":"<pre><code>from gcp_pilot.people import People\n\n# Initialize the People API client\npeople = People(email=\"user@example.com\")\n\n# Search for a person by email\nsearch_results = people.get_people(query=\"john@example.com\", fields=[\"names\", \"emailAddresses\"])\nfor person in search_results:\n    if \"emailAddresses\" in person:\n        for email in person[\"emailAddresses\"]:\n            if email[\"value\"].lower() == \"john@example.com\":\n                print(f\"Found person: {person['names'][0]['displayName'] if 'names' in person else 'Unknown'}\")\n                break\n</code></pre>"},{"location":"services/people/#example-getting-organization-information","title":"Example: Getting Organization Information","text":"<pre><code>from gcp_pilot.people import People\n\n# Initialize the People API client\npeople = People(email=\"user@example.com\")\n\n# Get organization information for people\norg_info = people.get_people(fields=[\"names\", \"organizations\"])\nfor person in org_info:\n    print(f\"Person: {person['names'][0]['displayName'] if 'names' in person else 'Unknown'}\")\n    if \"organizations\" in person:\n        for org in person[\"organizations\"]:\n            print(f\"  Organization: {org.get('name', 'Unknown')}\")\n            print(f\"  Title: {org.get('title', 'Unknown')}\")\n            print(f\"  Department: {org.get('department', 'Unknown')}\")\n</code></pre>"},{"location":"services/people/#error-handling","title":"Error Handling","text":"<p>The People class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    people = People(email=\"user@example.com\")\n    results = people.get_people(query=\"invalid query\")\nexcept exceptions.HttpError as e:\n    print(f\"HTTP error: {e}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"services/people/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\npeople = People(\n    email=\"user@example.com\",\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n\n# Now all operations will be performed as the impersonated service account\nresults = people.get_people()\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/people/#required-permissions","title":"Required Permissions","text":"<p>To use the People API, the service account or user must have the following permissions:</p> <ul> <li><code>https://www.googleapis.com/auth/contacts</code>: For read/write access to the user's contacts</li> <li><code>https://www.googleapis.com/auth/directory.readonly</code>: For read-only access to the user's domain directory</li> </ul> <p>These permissions are automatically requested when you initialize the <code>People</code> class.</p>"},{"location":"services/people/#domain-wide-delegation","title":"Domain-Wide Delegation","text":"<p>If you're using a service account to access the People API, you'll need to set up domain-wide delegation in your Google Workspace domain. This allows the service account to impersonate users in your domain.</p> <p>For more information on setting up domain-wide delegation, see the Authentication documentation.</p>"},{"location":"services/pubsub/","title":"Cloud Pub/Sub","text":"<p>Cloud Pub/Sub is a messaging service for exchanging event data among applications and services. The <code>CloudPublisher</code>, <code>CloudSubscriber</code>, and <code>Message</code> classes in gcp-pilot provide high-level interfaces for interacting with Google Cloud Pub/Sub.</p>"},{"location":"services/pubsub/#installation","title":"Installation","text":"<p>To use the Cloud Pub/Sub functionality, you need to install gcp-pilot with the pubsub extra:</p> <pre><code>pip install gcp-pilot[pubsub]\n</code></pre>"},{"location":"services/pubsub/#usage","title":"Usage","text":""},{"location":"services/pubsub/#cloudpublisher","title":"CloudPublisher","text":"<p>The <code>CloudPublisher</code> class allows you to create and manage topics, and publish messages to them.</p>"},{"location":"services/pubsub/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.pubsub import CloudPublisher\n\n# Initialize with default credentials\npublisher = CloudPublisher()\n\n# Initialize with specific project\npublisher = CloudPublisher(project_id=\"my-project\")\n\n# Initialize with message ordering enabled\npublisher = CloudPublisher(enable_message_ordering=True)\n\n# Initialize with service account impersonation\npublisher = CloudPublisher(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/pubsub/#managing-topics","title":"Managing Topics","text":"<pre><code># Create a topic\ntopic = publisher.create_topic(\n    topic_id=\"my-topic\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    exists_ok=True,  # Optional: if True, returns the existing topic if it already exists\n    labels={\"environment\": \"production\"},  # Optional: labels to apply to the topic\n)\nprint(f\"Topic created: {topic.name}\")\n\n# Update a topic\ntopic = publisher.update_topic(\n    topic_id=\"my-topic\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    labels={\"environment\": \"staging\"},  # New labels to apply to the topic\n)\nprint(f\"Topic updated: {topic.name}\")\n\n# Get a topic\ntopic = publisher.get_topic(\n    topic_id=\"my-topic\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Topic: {topic.name}\")\n\n# List topics\ntopics = publisher.list_topics(\n    prefix=\"my-\",  # Optional: filter topics by prefix\n    suffix=\"-topic\",  # Optional: filter topics by suffix\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor topic in topics:\n    print(f\"Topic: {topic.name}\")\n</code></pre>"},{"location":"services/pubsub/#publishing-messages","title":"Publishing Messages","text":"<pre><code># Publish a message to a topic\nmessage_id = publisher.publish(\n    message=\"Hello, world!\",\n    topic_id=\"my-topic\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    attributes={\"key\": \"value\"},  # Optional: attributes to attach to the message\n)\nprint(f\"Message published with ID: {message_id}\")\n\n# Publish a message to a topic that doesn't exist yet (it will be created automatically)\nmessage_id = publisher.publish(\n    message=\"Hello, world!\",\n    topic_id=\"new-topic\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Message published with ID: {message_id}\")\n</code></pre>"},{"location":"services/pubsub/#cloudsubscriber","title":"CloudSubscriber","text":"<p>The <code>CloudSubscriber</code> class allows you to create and manage subscriptions, and subscribe to messages.</p>"},{"location":"services/pubsub/#initialization_1","title":"Initialization","text":"<pre><code>from gcp_pilot.pubsub import CloudSubscriber\n\n# Initialize with default credentials\nsubscriber = CloudSubscriber()\n\n# Initialize with specific project\nsubscriber = CloudSubscriber(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nsubscriber = CloudSubscriber(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/pubsub/#managing-subscriptions","title":"Managing Subscriptions","text":"<pre><code># Create a subscription\nsubscription = subscriber.create_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    exists_ok=True,  # Optional: if True, returns the existing subscription if it already exists\n    auto_create_topic=True,  # Optional: if True, creates the topic if it doesn't exist\n    enable_message_ordering=False,  # Optional: if True, enables message ordering\n    push_to_url=None,  # Optional: URL to push messages to\n    use_oidc_auth=False,  # Optional: if True, uses OIDC authentication for push\n    dead_letter_topic_id=None,  # Optional: topic to send dead-letter messages to\n    dead_letter_subscription_id=None,  # Optional: subscription for the dead-letter topic\n    max_retries=None,  # Optional: maximum number of delivery attempts\n    min_backoff=10,  # Optional: minimum backoff time in seconds\n    max_backoff=600,  # Optional: maximum backoff time in seconds\n    expiration_ttl=31,  # Optional: expiration time in days\n    enable_exactly_once_delivery=False,  # Optional: if True, enables exactly-once delivery\n    message_filter=None,  # Optional: filter for messages\n)\nprint(f\"Subscription created: {subscription.name}\")\n\n# Update a subscription\nsubscription = subscriber.update_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    push_to_url=\"https://example.com/push\",  # Optional: URL to push messages to\n    use_oidc_auth=True,  # Optional: if True, uses OIDC authentication for push\n    dead_letter_topic_id=\"my-dead-letter-topic\",  # Optional: topic to send dead-letter messages to\n    dead_letter_subscription_id=\"my-dead-letter-subscription\",  # Optional: subscription for the dead-letter topic\n    max_retries=5,  # Optional: maximum number of delivery attempts\n    min_backoff=30,  # Optional: minimum backoff time in seconds\n    max_backoff=300,  # Optional: maximum backoff time in seconds\n    expiration_ttl=None,  # Optional: expiration time in days (None means never expire)\n    message_filter=\"attributes.key = \\\"value\\\"\",  # Optional: filter for messages\n)\nprint(f\"Subscription updated: {subscription.name}\")\n\n# Create or update a subscription\nsubscription = subscriber.create_or_update_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    auto_create_topic=True,  # Optional: if True, creates the topic if it doesn't exist\n    enable_message_ordering=False,  # Optional: if True, enables message ordering\n    push_to_url=\"https://example.com/push\",  # Optional: URL to push messages to\n    use_oidc_auth=True,  # Optional: if True, uses OIDC authentication for push\n    dead_letter_topic_id=\"my-dead-letter-topic\",  # Optional: topic to send dead-letter messages to\n    dead_letter_subscription_id=\"my-dead-letter-subscription\",  # Optional: subscription for the dead-letter topic\n    max_retries=5,  # Optional: maximum number of delivery attempts\n    min_backoff=30,  # Optional: minimum backoff time in seconds\n    max_backoff=300,  # Optional: maximum backoff time in seconds\n    expiration_ttl=None,  # Optional: expiration time in days (None means never expire)\n    message_filter=\"attributes.key = \\\"value\\\"\",  # Optional: filter for messages\n)\nprint(f\"Subscription created or updated: {subscription.name}\")\n\n# Get a subscription\nsubscription = subscriber.get_subscription(\n    subscription_id=\"my-subscription\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Subscription: {subscription.name}\")\n\n# List subscriptions\nsubscriptions = subscriber.list_subscriptions(\n    prefix=\"my-\",  # Optional: filter subscriptions by prefix\n    suffix=\"-subscription\",  # Optional: filter subscriptions by suffix\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor subscription in subscriptions:\n    print(f\"Subscription: {subscription.name}\")\n\n# Delete a subscription\nsubscriber.delete_subscription(\n    subscription_id=\"my-subscription\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/pubsub/#subscribing-to-messages","title":"Subscribing to Messages","text":"<pre><code># Define a callback function to process messages\ndef process_message(message):\n    print(f\"Received message: {message.data}\")\n    print(f\"Attributes: {message.attributes}\")\n    message.ack()  # Acknowledge the message\n\n# Subscribe to a topic\nsubscriber.subscribe(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    callback=process_message,\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/pubsub/#message","title":"Message","text":"<p>The <code>Message</code> class represents a Pub/Sub message and provides methods for serialization and deserialization.</p>"},{"location":"services/pubsub/#loading-messages","title":"Loading Messages","text":"<pre><code>from gcp_pilot.pubsub import Message\nimport json\n\n# Load a message from a dictionary\nmessage_dict = {\n    \"message\": {\n        \"attributes\": {\"key\": \"value\"},\n        \"data\": \"SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ==\",  # Base64-encoded \"Hello Cloud Pub/Sub! Here is my message!\"\n        \"messageId\": \"136969346945\",\n    },\n    \"subscription\": \"projects/myproject/subscriptions/mysubscription\",\n}\nmessage = Message.load(body=message_dict)\nprint(f\"Message ID: {message.id}\")\nprint(f\"Message Data: {message.data}\")\nprint(f\"Message Attributes: {message.attributes}\")\nprint(f\"Subscription: {message.subscription}\")\n\n# Load a message from a JSON string\nmessage_json = json.dumps(message_dict)\nmessage = Message.load(body=message_json)\nprint(f\"Message ID: {message.id}\")\nprint(f\"Message Data: {message.data}\")\n\n# Load a message from bytes\nmessage_bytes = json.dumps(message_dict).encode()\nmessage = Message.load(body=message_bytes)\nprint(f\"Message ID: {message.id}\")\nprint(f\"Message Data: {message.data}\")\n\n# Load a message with a custom parser\ndef custom_parser(data):\n    return data.upper()\n\nmessage = Message.load(body=message_dict, parser=custom_parser)\nprint(f\"Message Data: {message.data}\")  # Will be uppercase\n</code></pre>"},{"location":"services/pubsub/#dumping-messages","title":"Dumping Messages","text":"<pre><code># Create a message\nmessage = Message(\n    id=\"136969346945\",\n    data=\"Hello, world!\",\n    attributes={\"key\": \"value\"},\n    subscription=\"projects/myproject/subscriptions/mysubscription\",\n)\n\n# Dump the message to a JSON string\nmessage_json = message.dump()\nprint(f\"Message JSON: {message_json}\")\n\n# Dump the message with a custom parser\ndef custom_parser(data):\n    return data.upper()\n\nmessage_json = message.dump(parser=custom_parser)\nprint(f\"Message JSON: {message_json}\")  # Data will be uppercase\n</code></pre>"},{"location":"services/pubsub/#error-handling","title":"Error Handling","text":"<p>The Pub/Sub classes handle common errors and convert them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    publisher = CloudPublisher()\n    publisher.create_topic(topic_id=\"my-topic\", exists_ok=False)\nexcept exceptions.AlreadyExists:\n    print(\"Topic already exists\")\n\ntry:\n    subscriber = CloudSubscriber()\n    subscriber.get_subscription(subscription_id=\"non-existent-subscription\")\nexcept exceptions.NotFound:\n    print(\"Subscription not found\")\n\ntry:\n    subscriber = CloudSubscriber()\n    subscriber.create_subscription(\n        topic_id=\"my-topic\",\n        subscription_id=\"my-subscription\",\n        max_retries=5,\n        dead_letter_topic_id=None,\n    )\nexcept exceptions.ValidationError:\n    print(\"max_retries requires dead_letter_topic_id\")\n</code></pre>"},{"location":"services/pubsub/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\npublisher = CloudPublisher(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\nsubscriber = CloudSubscriber(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\npublisher.create_topic(topic_id=\"my-topic\")\nsubscriber.create_subscription(topic_id=\"my-topic\", subscription_id=\"my-subscription\")\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/pubsub/#message-filtering","title":"Message Filtering","text":"<p>Pub/Sub allows you to filter messages based on their attributes. You can specify a filter when creating or updating a subscription:</p> <pre><code># Create a subscription with a filter\nsubscription = subscriber.create_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    message_filter=\"attributes.key = \\\"value\\\"\",\n)\n\n# Update a subscription with a filter\nsubscription = subscriber.update_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    message_filter=\"attributes.key = \\\"value\\\"\",\n)\n</code></pre> <p>The filter is a CEL (Common Expression Language) expression that evaluates to a boolean value. For more information on message filtering, see the Google Cloud Pub/Sub documentation.</p>"},{"location":"services/pubsub/#dead-letter-topics","title":"Dead Letter Topics","text":"<p>Dead letter topics are used to store messages that could not be delivered to a subscription. You can specify a dead letter topic when creating or updating a subscription:</p> <pre><code># Create a subscription with a dead letter topic\nsubscription = subscriber.create_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    dead_letter_topic_id=\"my-dead-letter-topic\",\n    dead_letter_subscription_id=\"my-dead-letter-subscription\",\n    max_retries=5,\n)\n\n# Update a subscription with a dead letter topic\nsubscription = subscriber.update_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    dead_letter_topic_id=\"my-dead-letter-topic\",\n    dead_letter_subscription_id=\"my-dead-letter-subscription\",\n    max_retries=5,\n)\n</code></pre>"},{"location":"services/pubsub/#push-subscriptions","title":"Push Subscriptions","text":"<p>Pub/Sub supports push subscriptions, which push messages to a webhook endpoint instead of requiring the client to pull messages. You can create a push subscription by specifying a <code>push_to_url</code>:</p> <pre><code># Create a push subscription\nsubscription = subscriber.create_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-push-subscription\",\n    push_to_url=\"https://example.com/push\",\n    use_oidc_auth=True,  # Optional: if True, uses OIDC authentication for push\n)\n\n# Update a subscription to use push\nsubscription = subscriber.update_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    push_to_url=\"https://example.com/push\",\n    use_oidc_auth=True,\n)\n</code></pre> <p>When using push subscriptions, Pub/Sub will send messages to the specified URL as HTTP POST requests. The message will be in the request body in the format expected by the <code>Message.load</code> method.</p>"},{"location":"services/pubsub/#exactly-once-delivery","title":"Exactly-Once Delivery","text":"<p>Pub/Sub supports exactly-once delivery, which ensures that each message is delivered exactly once to a subscription. You can enable exactly-once delivery when creating a subscription:</p> <pre><code># Create a subscription with exactly-once delivery\nsubscription = subscriber.create_subscription(\n    topic_id=\"my-topic\",\n    subscription_id=\"my-subscription\",\n    enable_exactly_once_delivery=True,\n)\n</code></pre> <p>Note that exactly-once delivery is only supported for push subscriptions that use OIDC authentication.</p>"},{"location":"services/resource/","title":"Resource Manager","text":"<p>Resource Manager is a service that allows you to programmatically manage your Google Cloud resources. The <code>ResourceManager</code> and <code>ServiceAgent</code> classes in gcp-pilot provide high-level interfaces for interacting with Google Cloud Resource Manager.</p>"},{"location":"services/resource/#installation","title":"Installation","text":"<p>To use the Resource Manager functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/resource/#usage","title":"Usage","text":""},{"location":"services/resource/#resourcemanager","title":"ResourceManager","text":"<p>The <code>ResourceManager</code> class allows you to manage IAM policies and project information.</p>"},{"location":"services/resource/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.resource import ResourceManager\n\n# Initialize with default credentials\nresource_manager = ResourceManager()\n\n# Initialize with specific project\nresource_manager = ResourceManager(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nresource_manager = ResourceManager(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/resource/#managing-iam-policies","title":"Managing IAM Policies","text":"<pre><code># Get the IAM policy for a project\npolicy = resource_manager.get_policy(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    version=1,  # Optional: the policy version to request\n)\nprint(f\"Policy: {policy}\")\n\n# Add a member to a role\npolicy = resource_manager.add_member(\n    email=\"user@example.com\",\n    role=\"roles/viewer\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated policy: {policy}\")\n\n# Remove a member from a role\npolicy = resource_manager.remove_member(\n    email=\"user@example.com\",\n    role=\"roles/viewer\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated policy: {policy}\")\n\n# Set a custom policy\npolicy = resource_manager.set_policy(\n    policy=custom_policy,  # A policy object\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated policy: {policy}\")\n\n# Allow a service account to impersonate another service account\npolicy = resource_manager.allow_impersonation(\n    email=\"service-account@project-id.iam.gserviceaccount.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Updated policy: {policy}\")\n</code></pre>"},{"location":"services/resource/#getting-project-information","title":"Getting Project Information","text":"<pre><code># Get information about a project\nproject = resource_manager.get_project(\n    project_id=\"my-project\",\n)\nprint(f\"Project: {project['name']}\")\nprint(f\"Project Number: {project['projectNumber']}\")\nprint(f\"Project ID: {project['projectId']}\")\nprint(f\"Lifecycle State: {project['lifecycleState']}\")\n</code></pre>"},{"location":"services/resource/#serviceagent","title":"ServiceAgent","text":"<p>The <code>ServiceAgent</code> class provides utilities for working with Google Cloud service agents.</p>"},{"location":"services/resource/#getting-service-agent-information","title":"Getting Service Agent Information","text":"<pre><code>from gcp_pilot.resource import ServiceAgent\n\n# Get a list of available service agents\navailable_agents = ServiceAgent.get_available_agents()\nfor agent in available_agents:\n    print(f\"Service Agent: {agent}\")\n\n# Get the email address of a service agent\nemail = ServiceAgent.get_email(\n    service_name=\"Cloud Run\",\n    project_id=\"my-project\",\n)\nprint(f\"Service Agent Email: {email}\")\n\n# Get the role of a service agent\nrole = ServiceAgent.get_role(\n    service_name=\"Cloud Run\",\n)\nprint(f\"Service Agent Role: {role}\")\n\n# Get the project number\nproject_number = ServiceAgent.get_project_number(\n    project_id=\"my-project\",\n)\nprint(f\"Project Number: {project_number}\")\n</code></pre>"},{"location":"services/resource/#getting-specific-service-accounts","title":"Getting Specific Service Accounts","text":"<pre><code># Get the Compute Engine service account\ncompute_sa = ServiceAgent.get_compute_service_account(\n    project_id=\"my-project\",\n)\nprint(f\"Compute Service Account: {compute_sa}\")\n\n# Get the Cloud Build service account\nbuild_sa = ServiceAgent.get_cloud_build_service_account(\n    project_id=\"my-project\",\n)\nprint(f\"Cloud Build Service Account: {build_sa}\")\n</code></pre>"},{"location":"services/resource/#restoring-service-agent-permissions","title":"Restoring Service Agent Permissions","text":"<pre><code># Restore permissions for multiple service agents\nServiceAgent.restore(\n    services=[\"Cloud Run\", \"Cloud Build\", \"Cloud Functions\"],\n    project_id=\"my-project\",\n)\n</code></pre>"},{"location":"services/resource/#error-handling","title":"Error Handling","text":"<p>The Resource Manager classes handle common errors and convert them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    resource_manager = ResourceManager()\n    resource_manager.set_policy(policy={\"bindings\": []})\nexcept exceptions.NotAllowed:\n    print(\"Too dangerous to set policy with empty bindings\")\n\ntry:\n    ServiceAgent.get_email(service_name=\"Non-existent Service\", project_id=\"my-project\")\nexcept exceptions.NotFound:\n    print(\"Service not found\")\n</code></pre>"},{"location":"services/resource/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nresource_manager = ResourceManager(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\npolicy = resource_manager.get_policy()\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/resource/#common-iam-roles","title":"Common IAM Roles","text":"<p>Here are some common IAM roles that you might use with Resource Manager:</p> <ul> <li><code>roles/viewer</code>: Read-only access to view resources</li> <li><code>roles/editor</code>: Read-write access to manage resources</li> <li><code>roles/owner</code>: Full access to manage resources and grant permissions</li> <li><code>roles/resourcemanager.projectCreator</code>: Create new projects</li> <li><code>roles/resourcemanager.projectDeleter</code>: Delete projects</li> <li><code>roles/resourcemanager.projectIamAdmin</code>: Manage IAM policies on projects</li> </ul> <p>You can use these roles when adding members to a project:</p> <pre><code># Grant the viewer role to a user\npolicy = resource_manager.add_member(\n    email=\"user@example.com\",\n    role=\"roles/viewer\",\n)\n</code></pre>"},{"location":"services/resource/#service-agents","title":"Service Agents","text":"<p>Google Cloud uses service agents to perform operations on your behalf. These are special service accounts that are automatically created and managed by Google. The <code>ServiceAgent</code> class provides a comprehensive list of service agents and their roles.</p> <p>Here are some examples of service agents:</p> <ul> <li>Cloud Run Service Agent: <code>service-{project-number}@serverless-robot-prod.iam.gserviceaccount.com</code></li> <li>Cloud Build Service Agent: <code>service-{project-number}@gcp-sa-cloudbuild.iam.gserviceaccount.com</code></li> <li>Cloud Functions Service Agent: <code>service-{project-number}@gcf-admin-robot.iam.gserviceaccount.com</code></li> <li>Compute Engine Service Agent: <code>service-{project-number}@compute-system.iam.gserviceaccount.com</code></li> </ul> <p>You can get the email address of a service agent using the <code>get_email</code> method:</p> <pre><code>email = ServiceAgent.get_email(\n    service_name=\"Cloud Run\",\n    project_id=\"my-project\",\n)\nprint(f\"Service Agent Email: {email}\")\n</code></pre> <p>And you can get the role of a service agent using the <code>get_role</code> method:</p> <pre><code>role = ServiceAgent.get_role(\n    service_name=\"Cloud Run\",\n)\nprint(f\"Service Agent Role: {role}\")\n</code></pre> <p>If a service agent's permissions are removed, you can restore them using the <code>restore</code> method:</p> <pre><code>ServiceAgent.restore(\n    services=[\"Cloud Run\"],\n    project_id=\"my-project\",\n)\n</code></pre>"},{"location":"services/run/","title":"Cloud Run","text":"<p>Cloud Run is a fully managed compute platform that automatically scales your stateless containers. The <code>CloudRun</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Run.</p>"},{"location":"services/run/#installation","title":"Installation","text":"<p>To use the Cloud Run functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/run/#usage","title":"Usage","text":""},{"location":"services/run/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.run import CloudRun\n\n# Initialize with default credentials\ncloud_run = CloudRun()\n\n# Initialize with specific project\ncloud_run = CloudRun(project_id=\"my-project\")\n\n# Initialize with specific location\ncloud_run = CloudRun(location=\"us-central1\")\n\n# Initialize with service account impersonation\ncloud_run = CloudRun(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/run/#managing-services","title":"Managing Services","text":""},{"location":"services/run/#listing-services","title":"Listing Services","text":"<pre><code># List all Cloud Run services in a project\nservices = cloud_run.list_services(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor service in services:\n    print(f\"Service: {service['metadata']['name']}\")\n    print(f\"URL: {service['status']['url']}\")\n    print(f\"Latest Revision: {service['status']['latestCreatedRevisionName']}\")\n</code></pre>"},{"location":"services/run/#getting-a-service","title":"Getting a Service","text":"<pre><code># Get information about a specific Cloud Run service\nservice = cloud_run.get_service(\n    service_name=\"my-service\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Service: {service['metadata']['name']}\")\nprint(f\"URL: {service['status']['url']}\")\nprint(f\"Latest Revision: {service['status']['latestCreatedRevisionName']}\")\n</code></pre>"},{"location":"services/run/#creating-a-service","title":"Creating a Service","text":"<pre><code># Create a new Cloud Run service\nservice = cloud_run.create_service(\n    service_name=\"my-service\",\n    image=\"gcr.io/my-project/my-image:latest\",  # Container image to deploy\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n    service_account=\"service-account@my-project.iam.gserviceaccount.com\",  # Optional: service account to run the service\n    trigger_id=\"my-trigger\",  # Optional: Cloud Build trigger ID\n    ram=512,  # Optional: memory in MB, defaults to 256\n    concurrency=100,  # Optional: maximum concurrent requests per container, defaults to 80\n    timeout=600,  # Optional: request timeout in seconds, defaults to 300\n    port=8080,  # Optional: container port, defaults to 8080\n)\nprint(f\"Service created: {service['metadata']['name']}\")\nprint(f\"URL: {service['status']['url']}\")\n</code></pre>"},{"location":"services/run/#managing-revisions","title":"Managing Revisions","text":"<pre><code># List all revisions of a Cloud Run service\nrevisions = cloud_run.list_revisions(\n    service_name=\"my-service\",  # Optional: if provided, only lists revisions for this service\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor revision in revisions:\n    print(f\"Revision: {revision['metadata']['name']}\")\n    print(f\"Created: {revision['metadata']['creationTimestamp']}\")\n    print(f\"Image: {revision['spec']['containers'][0]['image']}\")\n</code></pre>"},{"location":"services/run/#managing-domain-mappings","title":"Managing Domain Mappings","text":""},{"location":"services/run/#listing-domain-mappings","title":"Listing Domain Mappings","text":"<pre><code># List all domain mappings in a project\ndomain_mappings = cloud_run.list_domain_mappings(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor mapping in domain_mappings:\n    print(f\"Domain: {mapping['metadata']['name']}\")\n    print(f\"Service: {mapping['spec']['routeName']}\")\n    print(f\"Status: {mapping['status']['conditions'][0]['status']}\")\n</code></pre>"},{"location":"services/run/#getting-a-domain-mapping","title":"Getting a Domain Mapping","text":"<pre><code># Get information about a specific domain mapping\ndomain_mapping = cloud_run.get_domain_mapping(\n    domain=\"example.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\nprint(f\"Domain: {domain_mapping['metadata']['name']}\")\nprint(f\"Service: {domain_mapping['spec']['routeName']}\")\nprint(f\"Status: {domain_mapping['status']['conditions'][0]['status']}\")\n</code></pre>"},{"location":"services/run/#creating-a-domain-mapping","title":"Creating a Domain Mapping","text":"<pre><code># Create a new domain mapping for a Cloud Run service\ndomain_mapping = cloud_run.create_domain_mapping(\n    domain=\"example.com\",\n    service_name=\"my-service\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n    exists_ok=True,  # Optional: if True, returns the existing mapping if it already exists\n    force=True,  # Optional: if True, forces the mapping even if it conflicts with existing mappings\n)\nprint(f\"Domain mapping created: {domain_mapping['metadata']['name']}\")\nprint(f\"Service: {domain_mapping['spec']['routeName']}\")\nprint(f\"Status: {domain_mapping['status']['conditions'][0]['status']}\")\n</code></pre>"},{"location":"services/run/#deleting-a-domain-mapping","title":"Deleting a Domain Mapping","text":"<pre><code># Delete a domain mapping\ncloud_run.delete_domain_mapping(\n    domain=\"example.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    location=\"us-central1\",  # Optional: defaults to the default location\n)\n</code></pre>"},{"location":"services/run/#listing-locations","title":"Listing Locations","text":"<pre><code># List all locations where Cloud Run is available\nlocations = cloud_run.list_locations(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor location in locations:\n    print(f\"Location: {location['locationId']}\")\n    print(f\"Display Name: {location['displayName']}\")\n    print(f\"Metadata: {location['metadata']}\")\n</code></pre>"},{"location":"services/run/#error-handling","title":"Error Handling","text":"<p>The CloudRun class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    cloud_run.get_service(service_name=\"non-existent-service\")\nexcept exceptions.NotFound:\n    print(\"Service not found\")\n\ntry:\n    cloud_run.create_domain_mapping(domain=\"existing-domain.com\", service_name=\"my-service\", exists_ok=False)\nexcept exceptions.AlreadyExists:\n    print(\"Domain mapping already exists\")\n</code></pre>"},{"location":"services/run/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\ncloud_run = CloudRun(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\nservices = cloud_run.list_services()\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/run/#best-practices","title":"Best Practices","text":"<p>Here are some best practices for working with Cloud Run:</p> <ol> <li>Use container images from trusted sources: Only deploy container images from trusted sources to minimize security risks.</li> <li>Optimize container startup time: Cloud Run scales to zero when not in use, so optimizing container startup time improves user experience.</li> <li>Handle concurrency properly: Set an appropriate concurrency value based on your application's requirements.</li> <li>Use appropriate memory settings: Allocate enough memory for your application to run efficiently, but not so much that you waste resources.</li> <li>Implement health checks: Add health check endpoints to your application to help Cloud Run determine when your service is ready to receive traffic.</li> <li>Use custom domains with SSL: Set up custom domains with SSL certificates for production services.</li> <li>Monitor your services: Set up monitoring and alerting for your Cloud Run services to detect and respond to issues quickly.</li> </ol>"},{"location":"services/scheduler/","title":"Cloud Scheduler","text":"<p>Cloud Scheduler is a fully managed enterprise-grade cron job scheduler. The <code>CloudScheduler</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Scheduler.</p>"},{"location":"services/scheduler/#installation","title":"Installation","text":"<p>To use the Cloud Scheduler functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/scheduler/#usage","title":"Usage","text":""},{"location":"services/scheduler/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.scheduler import CloudScheduler\n\n# Initialize with default credentials\nscheduler = CloudScheduler()\n\n# Initialize with specific project\nscheduler = CloudScheduler(project_id=\"my-project\")\n\n# Initialize with specific location\nscheduler = CloudScheduler(location=\"us-central1\")\n\n# Initialize with specific timezone\nscheduler = CloudScheduler(timezone=\"America/New_York\")\n\n# Initialize with service account impersonation\nscheduler = CloudScheduler(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/scheduler/#creating-jobs","title":"Creating Jobs","text":"<pre><code>from google.cloud import scheduler\n\n# Create a new Cloud Scheduler job\njob = scheduler.create(\n    name=\"my-job\",  # The name of the job\n    url=\"https://example.com/api/endpoint\",  # The URL to call\n    payload=\"Hello, world!\",  # The payload to send\n    cron=\"0 * * * *\",  # The cron schedule (every hour in this example)\n    timezone=\"America/New_York\",  # Optional: the timezone for the schedule, defaults to UTC\n    method=scheduler.HttpMethod.POST,  # Optional: the HTTP method, defaults to POST\n    headers={\"Content-Type\": \"application/json\"},  # Optional: HTTP headers\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    use_oidc_auth=True,  # Optional: if True, uses OIDC authentication for the request\n    timeout_in_seconds=600,  # Optional: request timeout in seconds, defaults to 30 minutes\n    retry_count=3,  # Optional: number of retry attempts, defaults to 0\n)\nprint(f\"Job created: {job.name}\")\nprint(f\"Schedule: {job.schedule}\")\nprint(f\"Time Zone: {job.time_zone}\")\nprint(f\"URL: {job.http_target.uri}\")\n</code></pre>"},{"location":"services/scheduler/#updating-jobs","title":"Updating Jobs","text":"<pre><code># Update an existing Cloud Scheduler job\njob = scheduler.update(\n    name=\"my-job\",  # The name of the job\n    url=\"https://example.com/api/new-endpoint\",  # The new URL to call\n    payload=\"Updated payload\",  # The new payload to send\n    cron=\"0 */2 * * *\",  # The new cron schedule (every 2 hours in this example)\n    timezone=\"America/Los_Angeles\",  # Optional: the new timezone for the schedule\n    method=scheduler.HttpMethod.PUT,  # Optional: the new HTTP method\n    headers={\"Content-Type\": \"application/json\", \"X-Custom-Header\": \"value\"},  # Optional: new HTTP headers\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    use_oidc_auth=True,  # Optional: if True, uses OIDC authentication for the request\n    timeout_in_seconds=300,  # Optional: new request timeout in seconds\n    retry_count=5,  # Optional: new number of retry attempts\n)\nprint(f\"Job updated: {job.name}\")\nprint(f\"New Schedule: {job.schedule}\")\nprint(f\"New Time Zone: {job.time_zone}\")\nprint(f\"New URL: {job.http_target.uri}\")\n</code></pre>"},{"location":"services/scheduler/#creating-or-updating-jobs","title":"Creating or Updating Jobs","text":"<pre><code># Create a new job or update an existing one\njob = scheduler.put(\n    name=\"my-job\",  # The name of the job\n    url=\"https://example.com/api/endpoint\",  # The URL to call\n    payload=\"Hello, world!\",  # The payload to send\n    cron=\"0 * * * *\",  # The cron schedule (every hour in this example)\n    timezone=\"America/New_York\",  # Optional: the timezone for the schedule, defaults to UTC\n    method=scheduler.HttpMethod.POST,  # Optional: the HTTP method, defaults to POST\n    headers={\"Content-Type\": \"application/json\"},  # Optional: HTTP headers\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    use_oidc_auth=True,  # Optional: if True, uses OIDC authentication for the request\n    timeout_in_seconds=600,  # Optional: request timeout in seconds, defaults to 30 minutes\n    retry_count=3,  # Optional: number of retry attempts, defaults to 0\n)\nprint(f\"Job created or updated: {job.name}\")\n</code></pre>"},{"location":"services/scheduler/#listing-jobs","title":"Listing Jobs","text":"<pre><code># List all jobs in a project\njobs = scheduler.list(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor job in jobs:\n    print(f\"Job: {job.name}\")\n    print(f\"Schedule: {job.schedule}\")\n    print(f\"Time Zone: {job.time_zone}\")\n    print(f\"URL: {job.http_target.uri}\")\n\n# List jobs with a specific prefix\njobs = scheduler.list(\n    prefix=\"backup-\",  # Only list jobs with names starting with \"backup-\"\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor job in jobs:\n    print(f\"Job: {job.name}\")\n</code></pre>"},{"location":"services/scheduler/#getting-a-job","title":"Getting a Job","text":"<pre><code># Get information about a specific job\njob = scheduler.get(\n    name=\"my-job\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Job: {job.name}\")\nprint(f\"Schedule: {job.schedule}\")\nprint(f\"Time Zone: {job.time_zone}\")\nprint(f\"URL: {job.http_target.uri}\")\nprint(f\"HTTP Method: {job.http_target.http_method}\")\nprint(f\"Payload: {job.http_target.body.decode()}\")\nprint(f\"Headers: {job.http_target.headers}\")\nprint(f\"Retry Count: {job.retry_config.retry_count}\")\n</code></pre>"},{"location":"services/scheduler/#deleting-a-job","title":"Deleting a Job","text":"<pre><code># Delete a job\nscheduler.delete(\n    name=\"my-job\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/scheduler/#cron-syntax","title":"Cron Syntax","text":"<p>Cloud Scheduler uses a standard cron syntax with five fields:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n\u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n\u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n\u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6) (Sunday to Saturday)\n\u2502 \u2502 \u2502 \u2502 \u2502\n\u2502 \u2502 \u2502 \u2502 \u2502\n* * * * *\n</code></pre> <p>Here are some examples:</p> <ul> <li><code>0 * * * *</code>: Run at the beginning of every hour</li> <li><code>0 0 * * *</code>: Run at midnight every day</li> <li><code>0 0 * * 0</code>: Run at midnight every Sunday</li> <li><code>0 0 1 * *</code>: Run at midnight on the first day of every month</li> <li><code>0 0 1 1 *</code>: Run at midnight on January 1st</li> <li><code>*/5 * * * *</code>: Run every 5 minutes</li> <li><code>0 9-17 * * 1-5</code>: Run every hour from 9 AM to 5 PM, Monday to Friday</li> </ul>"},{"location":"services/scheduler/#error-handling","title":"Error Handling","text":"<p>The CloudScheduler class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    scheduler.get(name=\"non-existent-job\")\nexcept exceptions.NotFound:\n    print(\"Job not found\")\n\ntry:\n    scheduler.update(\n        name=\"non-existent-job\",\n        url=\"https://example.com\",\n        payload=\"Hello, world!\",\n        cron=\"0 * * * *\"\n    )\nexcept exceptions.NotFound:\n    print(\"Job not found, creating instead\")\n    scheduler.create(\n        name=\"non-existent-job\",\n        url=\"https://example.com\",\n        payload=\"Hello, world!\",\n        cron=\"0 * * * *\"\n    )\n</code></pre>"},{"location":"services/scheduler/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nscheduler = CloudScheduler(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\njobs = scheduler.list()\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/scheduler/#best-practices","title":"Best Practices","text":"<p>Here are some best practices for working with Cloud Scheduler:</p> <ol> <li>Use descriptive job names: Choose job names that clearly indicate their purpose and function.</li> <li>Set appropriate retry policies: Configure retry counts based on the criticality of the job and the reliability of the target endpoint.</li> <li>Use OIDC authentication: Enable OIDC authentication for secure communication with your endpoints.</li> <li>Monitor job execution: Set up monitoring and alerting for job failures.</li> <li>Choose appropriate schedules: Avoid scheduling too many jobs at the same time to prevent resource contention.</li> <li>Set reasonable timeouts: Configure timeouts based on the expected execution time of your job.</li> <li>Use appropriate time zones: Set the time zone to match your business operations to make schedules more intuitive.</li> </ol>"},{"location":"services/secret_manager/","title":"Secret Manager","text":"<p>Secret Manager is a service that allows you to store, manage, and access secrets as binary blobs or text strings. The <code>SecretManager</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Secret Manager.</p>"},{"location":"services/secret_manager/#installation","title":"Installation","text":"<p>To use the Secret Manager functionality, you need to install gcp-pilot with the secret extra:</p> <pre><code>pip install gcp-pilot[secret]\n</code></pre>"},{"location":"services/secret_manager/#usage","title":"Usage","text":""},{"location":"services/secret_manager/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.secret_manager import SecretManager\n\n# Initialize with default credentials\nsecret_manager = SecretManager()\n\n# Initialize with specific project\nsecret_manager = SecretManager(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nsecret_manager = SecretManager(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/secret_manager/#adding-secrets","title":"Adding Secrets","text":"<pre><code># Add a new secret\nversion_name = secret_manager.add_secret(\n    key=\"my-secret\",\n    value=\"secret-value\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Secret version created: {version_name}\")\n</code></pre> <p>If the secret doesn't exist, it will be created automatically. If it does exist, a new version will be added.</p>"},{"location":"services/secret_manager/#getting-secrets","title":"Getting Secrets","text":"<pre><code># Get the latest version of a secret\nsecret_value = secret_manager.get_secret(\n    key=\"my-secret\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Secret value: {secret_value}\")\n\n# Get a specific version of a secret\nsecret_value = secret_manager.get_secret(\n    key=\"my-secret\",\n    version=1,  # Optional: defaults to the latest version\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Secret value (version 1): {secret_value}\")\n</code></pre>"},{"location":"services/secret_manager/#listing-secrets","title":"Listing Secrets","text":"<pre><code># List all secrets in a project\nsecrets = secret_manager.list_secrets(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor name, value in secrets:\n    print(f\"Secret: {name}, Value: {value}\")\n\n# List secrets with a specific prefix\nsecrets = secret_manager.list_secrets(\n    prefix=\"api-\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor name, value in secrets:\n    print(f\"Secret: {name}, Value: {value}\")\n\n# List secrets with a specific suffix\nsecrets = secret_manager.list_secrets(\n    suffix=\"-key\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor name, value in secrets:\n    print(f\"Secret: {name}, Value: {value}\")\n\n# List secrets with both prefix and suffix\nsecrets = secret_manager.list_secrets(\n    prefix=\"api-\",\n    suffix=\"-key\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor name, value in secrets:\n    print(f\"Secret: {name}, Value: {value}\")\n</code></pre>"},{"location":"services/secret_manager/#rolling-back-secrets","title":"Rolling Back Secrets","text":"<pre><code># Temporarily disable the latest version of a secret\nresponse = secret_manager.rollback_secret(\n    key=\"my-secret\",\n    temporarily=True,  # Optional: if True, disables the version; if False, destroys it\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Secret version disabled: {response.name}\")\n\n# Permanently destroy the latest version of a secret\nresponse = secret_manager.rollback_secret(\n    key=\"my-secret\",\n    temporarily=False,  # Optional: if True, disables the version; if False, destroys it\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Secret version destroyed: {response.name}\")\n</code></pre>"},{"location":"services/secret_manager/#error-handling","title":"Error Handling","text":"<p>The SecretManager class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    secret_value = secret_manager.get_secret(key=\"non-existent-secret\")\nexcept exceptions.NotFound:\n    print(\"Secret not found\")\n</code></pre>"},{"location":"services/secret_manager/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nsecret_manager = SecretManager(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\nsecret_value = secret_manager.get_secret(key=\"my-secret\")\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/secret_manager/#best-practices","title":"Best Practices","text":"<p>Here are some best practices for working with Secret Manager:</p> <ol> <li>Use descriptive secret names: Choose secret names that clearly indicate their purpose and content.</li> <li>Rotate secrets regularly: Create new versions of secrets on a regular schedule to minimize the impact of potential leaks.</li> <li>Limit access to secrets: Use IAM policies to restrict who can access and manage secrets.</li> <li>Monitor secret access: Set up audit logging to track who is accessing your secrets.</li> <li>Use the latest version: Unless you have a specific reason to use an older version, always use the latest version of a secret.</li> </ol>"},{"location":"services/service_usage/","title":"Service Usage","text":"<p>Service Usage is a Google Cloud service that allows you to manage which APIs are enabled on your Google Cloud projects. The <code>ServiceUsage</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Service Usage API.</p>"},{"location":"services/service_usage/#installation","title":"Installation","text":"<p>To use the Service Usage functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/service_usage/#usage","title":"Usage","text":""},{"location":"services/service_usage/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.service_usage import ServiceUsage\n\n# Initialize with default credentials\nservice_usage = ServiceUsage()\n\n# Initialize with specific project\nservice_usage = ServiceUsage(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nservice_usage = ServiceUsage(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/service_usage/#managing-services","title":"Managing Services","text":""},{"location":"services/service_usage/#listing-services","title":"Listing Services","text":"<pre><code>from gcp_pilot.service_usage import ServiceUsage, ServiceStatus\n\n# List all enabled services in a project\nfor service in service_usage.list_services():\n    print(f\"Service: {service['name']}\")\n\n# List all services in a specific project\nfor service in service_usage.list_services(project_id=\"my-project\"):\n    print(f\"Service: {service['name']}\")\n\n# List all disabled services\nfor service in service_usage.list_services(status=ServiceStatus.DISABLED):\n    print(f\"Service: {service['name']}\")\n</code></pre>"},{"location":"services/service_usage/#getting-a-service","title":"Getting a Service","text":"<pre><code># Get information about a specific service\nservice = service_usage.get_service(\n    service_name=\"compute.googleapis.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/service_usage/#enabling-a-service","title":"Enabling a Service","text":"<pre><code># Enable a service in a project\nservice_usage.enable_service(\n    service_name=\"compute.googleapis.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/service_usage/#disabling-a-service","title":"Disabling a Service","text":"<pre><code># Disable a service in a project\nservice_usage.disable_service(\n    service_name=\"compute.googleapis.com\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/service_usage/#error-handling","title":"Error Handling","text":"<p>The ServiceUsage class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    service_usage.get_service(service_name=\"non-existent-service\")\nexcept exceptions.NotFound:\n    print(\"Service not found\")\n</code></pre>"},{"location":"services/sheets/","title":"Google Sheets","text":"<p>Google Sheets is a spreadsheet program included as part of the free, web-based Google Docs Editors suite. The <code>Spreadsheet</code> class in gcp-pilot provides a high-level interface for interacting with Google Sheets.</p>"},{"location":"services/sheets/#installation","title":"Installation","text":"<p>To use the Google Sheets functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/sheets/#usage","title":"Usage","text":""},{"location":"services/sheets/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.sheets import Spreadsheet\n\n# Initialize with a sheet ID\nspreadsheet = Spreadsheet(sheet_id=\"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\")\n\n# Initialize with a sheet URL\nspreadsheet = Spreadsheet(sheet_id=\"https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit\")\n\n# Initialize with specific project\nspreadsheet = Spreadsheet(\n    sheet_id=\"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n    project_id=\"my-project\"\n)\n\n# Initialize with service account impersonation\nspreadsheet = Spreadsheet(\n    sheet_id=\"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n    impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\"\n)\n</code></pre>"},{"location":"services/sheets/#working-with-worksheets","title":"Working with Worksheets","text":""},{"location":"services/sheets/#accessing-a-worksheet","title":"Accessing a Worksheet","text":"<pre><code># Get a worksheet by name\nworksheet = spreadsheet.worksheet(\"Sheet1\")\n\n# Now you can use all gspread Worksheet methods\nvalues = worksheet.get_all_values()\ncell = worksheet.acell(\"A1\")\nrow = worksheet.row_values(1)\ncolumn = worksheet.col_values(1)\n</code></pre>"},{"location":"services/sheets/#getting-the-spreadsheet-url","title":"Getting the Spreadsheet URL","text":"<pre><code># Get the URL of the spreadsheet\nurl = spreadsheet.url\nprint(f\"Spreadsheet URL: {url}\")\n</code></pre>"},{"location":"services/sheets/#advanced-usage","title":"Advanced Usage","text":"<p>Since the <code>Spreadsheet</code> class is a wrapper around the gspread library, you can use all the functionality provided by gspread once you have a worksheet:</p> <pre><code>worksheet = spreadsheet.worksheet(\"Sheet1\")\n\n# Update a cell\nworksheet.update_cell(1, 1, \"New Value\")\n\n# Update a range\nworksheet.update(\"A1:B2\", [[\"A1\", \"B1\"], [\"A2\", \"B2\"]])\n\n# Find a cell\ncell = worksheet.find(\"Value to find\")\n\n# Append rows\nworksheet.append_rows([[\"A1\", \"B1\"], [\"A2\", \"B2\"]])\n</code></pre>"},{"location":"services/sheets/#error-handling","title":"Error Handling","text":"<p>The Spreadsheet class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    spreadsheet = Spreadsheet(sheet_id=\"non-existent-sheet-id\")\nexcept exceptions.NotFound:\n    print(\"Spreadsheet not found\")\n\ntry:\n    worksheet = spreadsheet.worksheet(\"non-existent-worksheet\")\nexcept exceptions.NotFound:\n    print(\"Worksheet not found\")\n</code></pre>"},{"location":"services/source/","title":"Source Repositories","text":"<p>Source Repositories is a service that provides Git version control to support collaborative development of any application or service. The <code>SourceRepository</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Source Repositories.</p>"},{"location":"services/source/#installation","title":"Installation","text":"<p>To use the Source Repositories functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/source/#usage","title":"Usage","text":""},{"location":"services/source/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.source import SourceRepository\n\n# Initialize with default credentials\nsource_repo = SourceRepository()\n\n# Initialize with specific project\nsource_repo = SourceRepository(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nsource_repo = SourceRepository(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/source/#listing-repositories","title":"Listing Repositories","text":"<pre><code># List all repositories in a project\nrepos = source_repo.list_repos(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor repo in repos:\n    print(f\"Repository: {repo['name']}\")\n    print(f\"URL: {repo['url']}\")\n    print(f\"Size: {repo.get('size', 'Unknown')}\")\n</code></pre>"},{"location":"services/source/#getting-a-repository","title":"Getting a Repository","text":"<pre><code># Get information about a specific repository\nrepo = source_repo.get_repo(\n    repo_name=\"my-repo\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Repository: {repo['name']}\")\nprint(f\"URL: {repo['url']}\")\nprint(f\"Size: {repo.get('size', 'Unknown')}\")\n</code></pre>"},{"location":"services/source/#creating-a-repository","title":"Creating a Repository","text":"<pre><code># Create a new repository\nrepo = source_repo.create_repo(\n    repo_name=\"my-new-repo\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    exists_ok=True,  # Optional: if True, returns the existing repository if it already exists\n)\nprint(f\"Repository created: {repo['name']}\")\nprint(f\"URL: {repo['url']}\")\n</code></pre>"},{"location":"services/source/#working-with-repositories","title":"Working with Repositories","text":"<p>After creating a repository, you can clone it and work with it using standard Git commands:</p> <pre><code># Clone the repository\ngit clone https://source.developers.google.com/p/my-project/r/my-repo\n\n# Add files\ngit add .\n\n# Commit changes\ngit commit -m \"Initial commit\"\n\n# Push to the repository\ngit push origin master\n</code></pre>"},{"location":"services/source/#authentication","title":"Authentication","text":"<p>When working with Source Repositories from the command line, you can authenticate using the Google Cloud SDK:</p> <pre><code># Authenticate with Google Cloud\ngcloud auth login\n\n# Configure Git to use gcloud as a credential helper\ngit config --global credential.https://source.developers.google.com.helper gcloud.sh\n</code></pre>"},{"location":"services/source/#error-handling","title":"Error Handling","text":"<p>The SourceRepository class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    source_repo.get_repo(repo_name=\"non-existent-repo\")\nexcept exceptions.NotFound:\n    print(\"Repository not found\")\n\ntry:\n    source_repo.create_repo(repo_name=\"existing-repo\", exists_ok=False)\nexcept exceptions.AlreadyExists:\n    print(\"Repository already exists\")\n</code></pre>"},{"location":"services/source/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nsource_repo = SourceRepository(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\nrepos = source_repo.list_repos()\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/source/#integration-with-cloud-build","title":"Integration with Cloud Build","text":"<p>Source Repositories can be integrated with Cloud Build to automatically build and deploy your code when changes are pushed to the repository. For more information, see the Cloud Build documentation.</p>"},{"location":"services/source/#best-practices","title":"Best Practices","text":"<p>Here are some best practices for working with Source Repositories:</p> <ol> <li>Use descriptive repository names: Choose repository names that clearly indicate their purpose and content.</li> <li>Set up branch protection: Configure branch protection rules to prevent direct pushes to important branches.</li> <li>Use meaningful commit messages: Write clear and descriptive commit messages to make it easier to understand changes.</li> <li>Implement a branching strategy: Use a consistent branching strategy like Git Flow or GitHub Flow.</li> <li>Regularly clean up old branches: Delete branches that are no longer needed to keep the repository clean.</li> <li>Set up code reviews: Use pull requests and code reviews to maintain code quality.</li> <li>Integrate with CI/CD: Set up continuous integration and continuous deployment pipelines to automate testing and deployment.</li> </ol>"},{"location":"services/speech/","title":"Speech","text":"<p>Speech is a service that enables easy integration of Google speech recognition technologies into developer applications. The <code>Speech</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Speech-to-Text API.</p>"},{"location":"services/speech/#installation","title":"Installation","text":"<p>To use the Speech functionality, you need to install gcp-pilot with the speech extra:</p> <pre><code>pip install gcp-pilot[speech]\n</code></pre>"},{"location":"services/speech/#usage","title":"Usage","text":""},{"location":"services/speech/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.speech import Speech\n\n# Initialize with default credentials\nspeech = Speech()\n\n# Initialize with specific project\nspeech = Speech(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nspeech = Speech(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/speech/#converting-speech-to-text","title":"Converting Speech to Text","text":""},{"location":"services/speech/#from-audio-content","title":"From Audio Content","text":"<pre><code># Convert speech from audio content to text\nwith open(\"audio.flac\", \"rb\") as audio_file:\n    audio_content = audio_file.read()\n\ntranscripts = speech.speech_file_to_text(\n    flac_content=audio_content,\n    language=\"en-US\",  # Optional: defaults to \"en\"\n    rate=16000,  # Optional: sample rate in Hz, defaults to 44100\n    long_running=False,  # Optional: if True, uses asynchronous recognition\n)\n\nfor transcript in transcripts:\n    print(f\"Transcript: {transcript}\")\n</code></pre>"},{"location":"services/speech/#from-audio-uri","title":"From Audio URI","text":"<pre><code># Convert speech from a GCS URI to text\ntranscripts = speech.speech_uri_to_text(\n    uri=\"gs://my-bucket/audio.flac\",\n    language=\"en-US\",  # Optional: defaults to \"en\"\n    rate=16000,  # Optional: sample rate in Hz, defaults to 44100\n    long_running=False,  # Optional: if True, uses asynchronous recognition\n)\n\nfor transcript in transcripts:\n    print(f\"Transcript: {transcript}\")\n</code></pre>"},{"location":"services/speech/#long-running-recognition","title":"Long-Running Recognition","text":"<p>For longer audio files (more than 1 minute), you should use long-running recognition:</p> <pre><code># Convert speech from a GCS URI to text using long-running recognition\ntranscripts = speech.speech_uri_to_text(\n    uri=\"gs://my-bucket/long-audio.flac\",\n    language=\"en-US\",\n    rate=16000,\n    long_running=True,  # Use asynchronous recognition\n)\n\nfor transcript in transcripts:\n    print(f\"Transcript: {transcript}\")\n</code></pre>"},{"location":"services/speech/#supported-audio-formats","title":"Supported Audio Formats","text":"<p>The Speech API currently supports FLAC format. The audio must be encoded as follows:</p> <ul> <li>FLAC (Free Lossless Audio Codec) format</li> <li>Sample rate hertz matching the actual audio</li> <li>Single channel (mono) or 2 channels (stereo)</li> </ul>"},{"location":"services/speech/#language-support","title":"Language Support","text":"<p>The Speech API supports a wide range of languages. Some common language codes include:</p> <ul> <li><code>en-US</code>: English (United States)</li> <li><code>en-GB</code>: English (United Kingdom)</li> <li><code>es-ES</code>: Spanish (Spain)</li> <li><code>fr-FR</code>: French (France)</li> <li><code>de-DE</code>: German (Germany)</li> <li><code>ja-JP</code>: Japanese (Japan)</li> <li><code>ru-RU</code>: Russian (Russia)</li> </ul> <p>For a complete list of supported languages, refer to the Google Cloud Speech-to-Text documentation.</p>"},{"location":"services/speech/#error-handling","title":"Error Handling","text":"<p>The Speech class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    transcripts = speech.speech_uri_to_text(uri=\"gs://non-existent-bucket/audio.flac\")\nexcept exceptions.NotFound:\n    print(\"Audio file not found\")\nexcept exceptions.InvalidArgument as e:\n    print(f\"Invalid argument: {e}\")\n</code></pre>"},{"location":"services/speech/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nspeech = Speech(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\ntranscripts = speech.speech_uri_to_text(uri=\"gs://my-bucket/audio.flac\")\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/speech/#best-practices","title":"Best Practices","text":"<p>Here are some best practices for working with the Speech API:</p> <ol> <li>Use the right sample rate: Ensure the sample rate you specify matches the actual audio sample rate.</li> <li>Choose the appropriate recognition mode: Use synchronous recognition for short audio (&lt; 1 minute) and asynchronous recognition for longer audio.</li> <li>Use GCS URIs for large files: For large audio files, upload them to Google Cloud Storage and use the URI instead of sending the content directly.</li> <li>Specify the correct language: Providing the correct language code improves recognition accuracy.</li> <li>Consider using enhanced models: For better accuracy, consider using enhanced models available in the Speech API.</li> <li>Optimize audio quality: Better audio quality leads to better recognition results. Reduce background noise and ensure clear speech.</li> <li>Handle errors gracefully: Implement proper error handling to manage issues like invalid audio formats or network problems.</li> </ol>"},{"location":"services/sql/","title":"Cloud SQL","text":"<p>Cloud SQL is a fully managed relational database service for MySQL, PostgreSQL, and SQL Server. The <code>CloudSQL</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud SQL.</p>"},{"location":"services/sql/#installation","title":"Installation","text":"<p>To use the Cloud SQL functionality, you need to install gcp-pilot:</p> <pre><code>pip install gcp-pilot\n</code></pre>"},{"location":"services/sql/#usage","title":"Usage","text":""},{"location":"services/sql/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.sql import CloudSQL\n\n# Initialize with default credentials\nsql = CloudSQL()\n\n# Initialize with specific project\nsql = CloudSQL(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nsql = CloudSQL(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/sql/#managing-instances","title":"Managing Instances","text":""},{"location":"services/sql/#listing-instances","title":"Listing Instances","text":"<pre><code># List all SQL instances in a project\ninstances = sql.list_instances(\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor instance in instances:\n    print(f\"Instance: {instance['name']}\")\n    print(f\"State: {instance['state']}\")\n    print(f\"Database Version: {instance['databaseVersion']}\")\n    print(f\"Region: {instance['region']}\")\n</code></pre>"},{"location":"services/sql/#getting-an-instance","title":"Getting an Instance","text":"<pre><code># Get information about a specific SQL instance\ninstance = sql.get_instance(\n    name=\"my-instance\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Instance: {instance['name']}\")\nprint(f\"State: {instance['state']}\")\nprint(f\"Database Version: {instance['databaseVersion']}\")\nprint(f\"Region: {instance['region']}\")\n</code></pre>"},{"location":"services/sql/#creating-an-instance","title":"Creating an Instance","text":"<pre><code># Create a new SQL instance\ninstance = sql.create_instance(\n    name=\"my-instance\",\n    version=\"MYSQL_5_7\",  # Database version (e.g., MYSQL_5_7, POSTGRES_13, SQLSERVER_2019_STANDARD)\n    tier=\"db-n1-standard-1\",  # Machine type (e.g., db-n1-standard-1, db-custom-2-7680)\n    region=\"us-central1\",  # Region where the instance will be created\n    ha=False,  # Optional: if True, enables high availability\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    exists_ok=True,  # Optional: if True, returns the existing instance if it already exists\n    wait_ready=True,  # Optional: if True, waits for the instance to be ready before returning\n)\nprint(f\"Instance created: {instance['name']}\")\nprint(f\"State: {instance['state']}\")\n</code></pre>"},{"location":"services/sql/#managing-databases","title":"Managing Databases","text":""},{"location":"services/sql/#getting-a-database","title":"Getting a Database","text":"<pre><code># Get information about a specific database in an instance\ndatabase = sql.get_database(\n    instance=\"my-instance\",\n    database=\"my-database\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Database: {database['name']}\")\nprint(f\"Instance: {database['instance']}\")\nprint(f\"Charset: {database['charset']}\")\nprint(f\"Collation: {database['collation']}\")\n</code></pre>"},{"location":"services/sql/#creating-a-database","title":"Creating a Database","text":"<pre><code># Create a new database in an instance\ndatabase = sql.create_database(\n    name=\"my-database\",\n    instance=\"my-instance\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    exists_ok=True,  # Optional: if True, returns the existing database if it already exists\n)\nprint(f\"Database created: {database['name']}\")\n</code></pre>"},{"location":"services/sql/#managing-users","title":"Managing Users","text":""},{"location":"services/sql/#listing-users","title":"Listing Users","text":"<pre><code># List all users in an instance\nusers = sql.list_users(\n    instance=\"my-instance\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor user in users:\n    print(f\"User: {user['name']}\")\n    print(f\"Host: {user.get('host', '%')}\")\n</code></pre>"},{"location":"services/sql/#creating-a-user","title":"Creating a User","text":"<pre><code># Create a new user in an instance\nuser = sql.create_user(\n    name=\"my-user\",\n    password=\"my-password\",\n    instance=\"my-instance\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"User created: {user['name']}\")\n</code></pre>"},{"location":"services/sql/#managing-ssl-certificates","title":"Managing SSL Certificates","text":""},{"location":"services/sql/#creating-an-ssl-certificate","title":"Creating an SSL Certificate","text":"<pre><code># Create a new SSL certificate for an instance\ncert = sql.create_ssl_cert(\n    instance=\"my-instance\",\n    ssl_name=\"my-cert\",  # Optional: defaults to a random UUID\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nprint(f\"Certificate created: {cert['commonName']}\")\nprint(f\"Certificate valid from: {cert['validFrom']}\")\nprint(f\"Certificate valid until: {cert['validUntil']}\")\nprint(f\"Certificate SHA1 fingerprint: {cert['sha1Fingerprint']}\")\nprint(f\"Certificate private key: {cert['privateKey']}\")  # This is only returned once when the certificate is created\nprint(f\"Certificate server CA: {cert['serverCaCert']}\")\n</code></pre>"},{"location":"services/sql/#listing-ssl-certificates","title":"Listing SSL Certificates","text":"<pre><code># List all SSL certificates for an instance\ncerts = sql.list_ssl_certs(\n    instance=\"my-instance\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\nfor cert in certs:\n    print(f\"Certificate: {cert['commonName']}\")\n    print(f\"Certificate valid from: {cert['validFrom']}\")\n    print(f\"Certificate valid until: {cert['validUntil']}\")\n    print(f\"Certificate SHA1 fingerprint: {cert['sha1Fingerprint']}\")\n</code></pre>"},{"location":"services/sql/#deleting-an-ssl-certificate","title":"Deleting an SSL Certificate","text":"<pre><code># Delete an SSL certificate from an instance\nsql.delete_ssl_cert(\n    instance=\"my-instance\",\n    ssl_name=\"my-cert\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    not_found_ok=True,  # Optional: if True, doesn't raise an error if the certificate doesn't exist\n)\n</code></pre>"},{"location":"services/sql/#error-handling","title":"Error Handling","text":"<p>The CloudSQL class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    sql.get_instance(name=\"non-existent-instance\")\nexcept exceptions.NotFound:\n    print(\"Instance not found\")\n\ntry:\n    sql.create_instance(name=\"existing-instance\", version=\"MYSQL_5_7\", tier=\"db-n1-standard-1\", region=\"us-central1\", exists_ok=False)\nexcept exceptions.AlreadyExists:\n    print(\"Instance already exists\")\n\ntry:\n    sql.create_instance(name=\"recently-deleted-instance\", version=\"MYSQL_5_7\", tier=\"db-n1-standard-1\", region=\"us-central1\")\nexcept exceptions.DeletedRecently:\n    print(\"Instance was recently deleted and cannot be recreated yet\")\n\ntry:\n    sql.create_database(name=\"my-database\", instance=\"not-ready-instance\")\nexcept exceptions.HttpError as e:\n    if \"is not running\" in str(e):\n        print(\"Instance is not ready yet\")\n</code></pre>"},{"location":"services/sql/#working-with-service-account-impersonation","title":"Working with Service Account Impersonation","text":"<p>Service account impersonation allows you to act as a service account without having its key file. This is a more secure approach than downloading and storing service account keys.</p> <pre><code># Initialize with service account impersonation\nsql = CloudSQL(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n\n# Now all operations will be performed as the impersonated service account\ninstances = sql.list_instances()\n</code></pre> <p>For more information on service account impersonation, see the Authentication documentation.</p>"},{"location":"services/sql/#best-practices","title":"Best Practices","text":"<p>Here are some best practices for working with Cloud SQL:</p> <ol> <li>Use appropriate instance sizes: Choose instance sizes based on your workload requirements to optimize cost and performance.</li> <li>Enable high availability for production: Use the <code>ha=True</code> parameter when creating instances for production workloads.</li> <li>Use SSL certificates: Create and use SSL certificates to secure connections to your databases.</li> <li>Implement proper backup strategies: Set up automated backups for your databases.</li> <li>Monitor your instances: Set up monitoring and alerting for your Cloud SQL instances.</li> <li>Use connection pooling: Implement connection pooling to improve performance and reduce resource usage.</li> <li>Secure your instances: Use strong passwords, limit network access, and follow the principle of least privilege when granting permissions.</li> </ol>"},{"location":"services/storage/","title":"Cloud Storage","text":"<p>Cloud Storage is a service for storing objects in Google Cloud Platform. The <code>CloudStorage</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Storage.</p>"},{"location":"services/storage/#installation","title":"Installation","text":"<p>To use the Cloud Storage functionality, you need to install gcp-pilot with the storage extra:</p> <pre><code>pip install gcp-pilot[storage]\n</code></pre>"},{"location":"services/storage/#usage","title":"Usage","text":""},{"location":"services/storage/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.storage import CloudStorage\n\n# Initialize with default credentials\nstorage = CloudStorage()\n\n# Initialize with specific project\nstorage = CloudStorage(project_id=\"my-project\")\n\n# Initialize with service account impersonation\nstorage = CloudStorage(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/storage/#creating-a-bucket","title":"Creating a Bucket","text":"<pre><code># Create a bucket in the default region\nbucket = storage.create_bucket(name=\"my-bucket\")\n\n# Create a bucket in a specific region\nbucket = storage.create_bucket(\n    name=\"my-bucket\",\n    region=\"us-central1\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    exists_ok=True,  # Optional: if True, returns the existing bucket if it already exists\n)\n</code></pre>"},{"location":"services/storage/#uploading-files","title":"Uploading Files","text":"<p>The <code>upload</code> method is versatile and can handle various types of input:</p> <pre><code># Upload a local file\nblob = storage.upload(\n    source_file=\"/path/to/local/file.txt\",\n    bucket_name=\"my-bucket\",\n    target_file_name=\"file.txt\",  # Optional: defaults to the source file name\n    is_public=False,  # Optional: if True, makes the file publicly accessible\n    content_type=\"text/plain\",  # Optional: sets the content type\n)\n\n# Upload from a URL\nblob = storage.upload(\n    source_file=\"https://example.com/file.txt\",\n    bucket_name=\"my-bucket\",\n    target_file_name=\"file.txt\",\n)\n\n# Upload from a string\nblob = storage.upload(\n    source_file=\"Hello, World!\",\n    bucket_name=\"my-bucket\",\n    target_file_name=\"hello.txt\",\n)\n\n# Upload from bytes\nblob = storage.upload(\n    source_file=b\"Hello, World!\",\n    bucket_name=\"my-bucket\",\n    target_file_name=\"hello.txt\",\n)\n\n# Upload from a file-like object\nwith open(\"/path/to/local/file.txt\", \"rb\") as f:\n    blob = storage.upload(\n        source_file=f,\n        bucket_name=\"my-bucket\",\n        target_file_name=\"file.txt\",\n    )\n</code></pre>"},{"location":"services/storage/#getting-a-bucket","title":"Getting a Bucket","text":"<pre><code># Get a bucket\nbucket = storage.get_bucket(name=\"my-bucket\")\n\n# Get a bucket, creating it if it doesn't exist\nbucket = storage.get_bucket(\n    name=\"my-bucket\",\n    auto_create_bucket=True,\n    region=\"us-central1\",  # Optional: used only if the bucket is created\n    project_id=\"my-project\",  # Optional: used only if the bucket is created\n)\n</code></pre>"},{"location":"services/storage/#copying-files","title":"Copying Files","text":"<pre><code># Copy a file from one bucket to another\nblob = storage.copy(\n    source_file_name=\"file.txt\",\n    source_bucket_name=\"source-bucket\",\n    target_bucket_name=\"target-bucket\",\n    target_file_name=\"file_copy.txt\",  # Optional: defaults to the source file name\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    region=\"us-central1\",  # Optional: used only if a bucket is created\n    auto_create_bucket=False,  # Optional: if True, creates the target bucket if it doesn't exist\n)\n</code></pre>"},{"location":"services/storage/#moving-files","title":"Moving Files","text":"<pre><code># Move a file from one bucket to another\nblob = storage.move(\n    source_file_name=\"file.txt\",\n    source_bucket_name=\"source-bucket\",\n    target_bucket_name=\"target-bucket\",\n    target_file_name=\"file_moved.txt\",  # Optional: defaults to the source file name\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    region=\"us-central1\",  # Optional: used only if a bucket is created\n)\n</code></pre>"},{"location":"services/storage/#deleting-files","title":"Deleting Files","text":"<pre><code># Delete a file\nstorage.delete(\n    file_name=\"file.txt\",\n    bucket_name=\"my-bucket\",\n)\n</code></pre>"},{"location":"services/storage/#listing-files","title":"Listing Files","text":"<pre><code># List all files in a bucket\nfor blob in storage.list_files(bucket_name=\"my-bucket\"):\n    print(f\"File: {blob.name}\")\n\n# List files with a specific prefix\nfor blob in storage.list_files(bucket_name=\"my-bucket\", prefix=\"folder/\"):\n    print(f\"File: {blob.name}\")\n</code></pre>"},{"location":"services/storage/#getting-a-file","title":"Getting a File","text":"<pre><code># Get a file by its GCS URI\nblob = storage.get_file(uri=\"gs://my-bucket/file.txt\")\n</code></pre>"},{"location":"services/storage/#getting-a-download-url","title":"Getting a Download URL","text":"<pre><code># Generate a signed URL for downloading a file\nurl = storage.get_download_url(\n    bucket_name=\"my-bucket\",\n    blob_name=\"file.txt\",\n    expiration=timedelta(minutes=30),  # Optional: defaults to 5 minutes\n    version=\"v4\",  # Optional: defaults to \"v4\"\n)\n</code></pre>"},{"location":"services/storage/#getting-a-gcs-uri","title":"Getting a GCS URI","text":"<pre><code># Get the GCS URI for a blob\nuri = storage.get_uri(blob)\n# Returns: \"gs://my-bucket/file.txt\"\n</code></pre>"},{"location":"services/storage/#error-handling","title":"Error Handling","text":"<p>The CloudStorage class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    storage.create_bucket(name=\"my-bucket\", exists_ok=False)\nexcept exceptions.AlreadyExists:\n    print(\"Bucket already exists\")\n\ntry:\n    storage.get_file(uri=\"invalid-uri\")\nexcept exceptions.ValidationError:\n    print(\"Invalid GCS URI\")\n</code></pre>"},{"location":"services/tasks/","title":"Cloud Tasks","text":"<p>Cloud Tasks is a fully managed service that allows you to manage the execution, dispatch, and delivery of a large number of distributed tasks. The <code>CloudTasks</code> class in gcp-pilot provides a high-level interface for interacting with Google Cloud Tasks.</p>"},{"location":"services/tasks/#installation","title":"Installation","text":"<p>To use the Cloud Tasks functionality, you need to install gcp-pilot with the tasks extra:</p> <pre><code>pip install gcp-pilot[tasks]\n</code></pre>"},{"location":"services/tasks/#usage","title":"Usage","text":""},{"location":"services/tasks/#initialization","title":"Initialization","text":"<pre><code>from gcp_pilot.tasks import CloudTasks\n\n# Initialize with default credentials\ntasks = CloudTasks()\n\n# Initialize with specific project and location\ntasks = CloudTasks(project_id=\"my-project\", location=\"us-central1\")\n\n# Initialize with service account impersonation\ntasks = CloudTasks(impersonate_account=\"service-account@project-id.iam.gserviceaccount.com\")\n</code></pre>"},{"location":"services/tasks/#pushing-tasks-to-a-queue","title":"Pushing Tasks to a Queue","text":"<p>The <code>push</code> method is the primary way to add tasks to a queue:</p> <pre><code># Push a simple task to a queue\ntask = tasks.push(\n    queue_name=\"my-queue\",\n    url=\"https://example.com/task-handler\",\n    payload=\"Hello, World!\",\n)\n\n# Push a task with custom HTTP method\nfrom google.cloud import tasks_v2\n\ntask = tasks.push(\n    queue_name=\"my-queue\",\n    url=\"https://example.com/task-handler\",\n    payload=\"Hello, World!\",\n    method=tasks_v2.HttpMethod.GET,\n)\n\n# Push a task with a delay\ntask = tasks.push(\n    queue_name=\"my-queue\",\n    url=\"https://example.com/task-handler\",\n    payload=\"Hello, World!\",\n    delay_in_seconds=300,  # 5 minutes\n)\n\n# Push a task with a custom name\ntask = tasks.push(\n    queue_name=\"my-queue\",\n    url=\"https://example.com/task-handler\",\n    payload=\"Hello, World!\",\n    task_name=\"my-custom-task\",\n    unique=True,  # Appends a UUID to the task name to ensure uniqueness\n)\n\n# Push a task with custom headers\ntask = tasks.push(\n    queue_name=\"my-queue\",\n    url=\"https://example.com/task-handler\",\n    payload=\"Hello, World!\",\n    headers={\"X-Custom-Header\": \"value\"},\n    content_type=\"application/json\",\n)\n\n# Push a task with a custom timeout\nfrom datetime import timedelta\n\ntask = tasks.push(\n    queue_name=\"my-queue\",\n    url=\"https://example.com/task-handler\",\n    payload=\"Hello, World!\",\n    task_timeout=timedelta(minutes=10),\n)\n\n# Push a task without OIDC authentication\ntask = tasks.push(\n    queue_name=\"my-queue\",\n    url=\"https://example.com/task-handler\",\n    payload=\"Hello, World!\",\n    use_oidc_auth=False,\n)\n</code></pre> <p>If the specified queue doesn't exist, gcp-pilot will automatically create it for you.</p>"},{"location":"services/tasks/#creating-a-queue","title":"Creating a Queue","text":"<pre><code># Create a queue\nqueue = tasks.create_queue(\n    queue_name=\"my-queue\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/tasks/#getting-a-queue","title":"Getting a Queue","text":"<pre><code># Get information about a queue\nqueue = tasks.get_queue(\n    queue_name=\"my-queue\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/tasks/#getting-a-task","title":"Getting a Task","text":"<pre><code># Get information about a task\ntask = tasks.get_task(\n    queue_name=\"my-queue\",\n    task_name=\"my-task\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n)\n</code></pre>"},{"location":"services/tasks/#deleting-a-task","title":"Deleting a Task","text":"<pre><code># Delete a task\ntasks.delete_task(\n    queue_name=\"my-queue\",\n    task_name=\"my-task\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n    not_found_ok=True,  # Optional: if True, doesn't raise an error if the task doesn't exist\n)\n</code></pre>"},{"location":"services/tasks/#listing-tasks-in-a-queue","title":"Listing Tasks in a Queue","text":"<pre><code># List all tasks in a queue\nfor task in tasks.list_tasks(\n    queue_name=\"my-queue\",\n    project_id=\"my-project\",  # Optional: defaults to the project associated with credentials\n):\n    print(f\"Task: {task.name}\")\n</code></pre>"},{"location":"services/tasks/#auto-authorization","title":"Auto-Authorization","text":"<p>One of the key features of gcp-pilot's Cloud Tasks implementation is automatic OIDC authorization. When you push a task to a queue with <code>use_oidc_auth=True</code> (the default), gcp-pilot automatically generates an OIDC token for the task. This allows the task to authenticate with the target service, which is especially useful when the target service is a Cloud Run service or another service that requires authentication.</p>"},{"location":"services/tasks/#error-handling","title":"Error Handling","text":"<p>The CloudTasks class handles common errors and converts them to more specific exceptions:</p> <pre><code>from gcp_pilot import exceptions\n\ntry:\n    tasks.push(queue_name=\"recently-deleted-queue\", url=\"https://example.com\")\nexcept exceptions.DeletedRecently:\n    print(\"Queue was recently deleted and cannot be recreated yet\")\n</code></pre>"},{"location":"services/tasks/#working-with-app-engine","title":"Working with App Engine","text":"<p>Since CloudTasks inherits from AppEngineBasedService, it's designed to work seamlessly with App Engine. It automatically detects the App Engine location and uses it as the default location for Cloud Tasks operations.</p>"}]}